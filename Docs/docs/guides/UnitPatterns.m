(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)

Guide[
	Title -> "Unit Patterns",
	Abstract -> "Collection of functions for managing quantity units.",
	Reference -> {
		"Core Functions" -> {
			{UnitsQ, "Checks if the provided input is in the form of units known to Emerald."},
			{UnitsP, "Is a pattern that matches any quantity whose dimensions are compatible with the dimensions of input."},
			{NoUnitQ, "Checks if the provided input has no units."}
		},

		"Inequalities" -> {
			{EqualP, "Is a pattern that matches any quantity equal to the specified value."},
			{EqualQ, "Checks if the first input value is equal to the second input value."},
			{GreaterP, "Is a pattern that matches any quantity greater than the specified value."},
			{GreaterQ, "Checks if the first input value is grater than the second input value."},
			{GreaterEqualP, "Is a pattern that matches any quantity greater than or equal to the specified value."},
			{GreaterEqualQ, "Checks if the first input value is greater than or equal to the second input value."},
			{LessP, "Is a pattern that matches any quantity smaller than the specified value."},
			{LessQ, "Checks if the first input is smaller than the second input."},
			{LessEqualP, "Is a pattern matching any quantity smaller than or equal to the specified value."},
			{LessEqualQ, "Checks if the first input is smaller than or equal to the second input."},
			{RangeP, "Is a pattern that will match a value between the provided minimum and maximum values."},
			{RangeQ, "Checks if a value is inside the range from the specified minimum value to the specified maximum value."},
			{PositiveQuantityQ, "Checks if the provided value is a unit-ed value with positive magnitude in its base unit."}
		},

		"Structural Patterns" -> {
			{QuantityArrayQ, "Checks if the provided input is a valid QuantityArray."},
			{QuantityArrayP, "Is a pattern that will match a valid QuantityArray whose unit match with the input unit specification."},
			{UnitCoordinatesQ, "Checks if the provided value is a set of coordinate pairs, either as a list of numbers, list of quantities, or quantity array."},
			{UnitCoordinatesP, "Is a pattern that wil match a set of coordinate pairs, either as a list of numbers, list of quantities, or quantity array."},
			{QuantityCoordinatesQ, "Checks if the provided input is an Nx2 quantity array."},
			{QuantityCoordinatesP, "Is a pattern that matches an Nx2 quantity array."},
			{QuantityDistributionQ, "Checks if the input is a valid QuantityDistribution with input unit requirements."},
			{QuantityDistributionP, "Is a pattern that matches a valid QuantityDistribution with input unit requirements."},
			{QuantityFunctionP, "Is a pattern' that matches any QuantityFunction whose input and output units are compatible with the provided inputs."},
			{QuantityVectorQ, "Checks if the provided input is an Nx1 quantity array."},
			{QuantityMatrixQ, "Checks if the provided input is an NxM quantity array."},
			{QuantityMatrixP, "Is a pattern that matches the input unit requirements."},
			{QuantityCoordinatesP, "Is a pattern that matches an Nx2 quantity array."}
		},

		"Dimensional Analysis" -> {
			{AbsorbanceAreaQ, "Checks if the provided input is in Units of AbsorbanceUnit times Units of time."},
			{AbsorbanceDistanceQ, "Checks if the provided input is in Units of AbsorbanceUnit times Units of distance."},
			{AbsorbancePerDistanceQ, "Checks if the provided input is in Units of AbsorbanceUnit per Units of distance."},
			{AbsorbanceQ, "Checks if the provided input is in Units of AbsorbanceUnit."},
			{AbsorbanceRateQ, "Checks if the provided input is in Units of AbsorbanceUnit per Units of time."},
			{AccelerationQ, "Checks if the provided input is in Units of distance per time-squared."},
			{AmountQ, "Checks if the provided input is in Units of Moles."},
			{AngularVelocityQ, "Checks if the provided input is in Units of revolutions per time."},
			{ArbitraryUnitQ, "Checks if the provided input is in arbitrary unit."},
			{AreaQ, "Checks tests if the provided input is in Units of distance squared."},
			{BasePairQ, "Checks if the provided input is in Units of BasePair."},
			{ByteQ, "Checks if the provided input is in Units bytes."},
			{ChemicalShiftQ, "Checks if the provided input is in Units of PPM."},
			{ChemicalShiftStrengthQ, "Checks if the provided input is in Units of PPM times ArbitraryUnits."},
			{ConcentrationQ, "Checks if the provided input is in Units of molarity."},
			{ConductanceAreaQ, "Checks if the provided input is in Units of conductance times Units of time."},
			{ConductancePerTimeQ, "Checks if the provided input is in Units of conductance per Units of time."},
			{ConductanceQ, "Checks if the provided input is in Units of Siemens per distance."},
			{CurrencyQ, "Checks if the provided input is in Units of money."},
			{CurrentQ, "Checks if the provided input is in Units of Ampere."},
			{CycleQ, "Checks if the provided input is in Units of Cycle."},
			{DensityQ, "Checks if the provided input is in Units of Mass over Units of volume."},
			{DimensionlessQ, "Checks if the provided input has no Units."},
			{DistanceQ, "Checks if the provided input is in Units of Distance."},
			{EnergyQ, "Checks if the provided input is in Units of molar energy."},
			{EntropyQ, "Checks if the provided input is in Units of molar entropy."},
			{ExtinctionCoefficientQ, "Checks if the provided input is in Units of Liter/(Centimeter*Mole)."},
			{FirstOrderRateQ, "Checks if the provided input is in Units of first order rate constants (per time)."},
			{FlowRateQ, "Checks if the provided input is in Units of Volume per Units of Time."},
			{FluorescenceAreaQ, "Checks if the provided input is in Units of RFU times Units of distance."},
			{FluorescencePerAreaQ, "Checks if the provided input is in Units of RFU per Units of distance."},
			{FluorescenceQ, "Checks if the provided input is in Units of RFU."},
			{FluorescenceTimeQ, "Checks if the provided input is in Units of RFU times Units of time."},
			{FrequencyQ, "Checks if the provided input is in Units per time or Hertz."},
			{GreaterDateQ, "Checks if the first input date is later than the second input date."},
			{GreaterEqualDateQ, "Checks if the first input date is later than or the same compared to the second input date."},
			{InverseMolecularWeightQ, "Checks if the provided input is in Units of inverse molecular weight."},
			{ISOQ, "Checks if the provided input is in Units of ISO."},
			{LessDateQ, "Checks if the first date is earlier than the second date."},
			{LessEqualDateQ, "Checks if the given date is less than or equal to another date."},
			{LuminescencePerMolecularWeightQ, "Checks if the provided input is in Units of luminescence per molecular weight."},
			{LuminescenceQ, "Checks if the provided input is in Units of Lumens."},
			{MassConcentrationQ, "Checks if the provided input is in Units of mass concentration (SI Units: kg/m^3 or kg/L)."},
			{MassExtinctionCoefficientQ, "Checks if the provided input is in Units of Liter/(Centimeter Gram)."},
			{MassQ, "Checks if the provided input is in Units of Mass."},
			{MolecularWeightLuminescenceAreaQ, "Checks if the provided input is in Units of molecular weight times luminescence."},
			{MolecularWeightQ, "Checks if the provided input is in Units of molecular weight."},
			{MolecularWeightStrengthQ, "Checks if the provided input is in Units of molecular weight times luminescence."},
			{NucleotideQ, "Checks if the provided input is in Units of Nucleotide."},
			{PercentQ, "Checks if the provided input is in Units of Percent."},
			{PercentRateQ, "Checks if the provided input is in Units of Percent per time."},
			{PerMolarQ, "Checks if the provided input is in Units of 1/Molar."},
			{PixelAreaQ, "Checks if the provided input is in Units of Pixels squared."},
			{PixelQ, "Checks if the provided input is in Units of Pixels."},
			{PixelsPerDistanceQ, "Checks if the provided input is in Units of Pixels per Units of distance."},
			{PowerQ, "Checks if the provided input is in Units of Watts."},
			{PressureQ, "Checks if the provided input is in Units of Pressure."},
			{ResistivityQ, "Checks if the provided input is in Units of resistance times Units of distance."},
			{RPMQ, "Checks if the provided input is in Units of revolutions per minute (RPM)."},
			{RRTQ, "Checks if the given value is in Units of relative retention time (RRT)."},
			{SecondOrderRateQ, "Checks if the provided input is in Units of second order rate constants (per molar concentration per time)."},
			{SpeedQ, "Checks if the provided input is in Units of distance per time."},
			{StrengthPerChemicalShiftQ, "Checks if the provided input is in Units of ArbitraryUnits/PPM."},
			{StrengthPerMolecularWeightQ, "Checks if the provided input is in ArbitraryUnit per Units of weight."},
			{TemperatureQ, "Checks if the provided input is in Units of temperature."},
			{TemperatureRampRateQ, "Checks if the provided input is in Units of temperature per time."},
			{TimeOfFlightAreaQ, "Checks if the provided input is in Units of time of flight spectra area."},
			{TimeQ, "Checks if the provided input is in Units of Time."},
			{ViscosityQ, "Checks if the provided input is in Units of pressure pre time or mass per distance times time."},
			{VoltageQ, "Checks if the provided input is in Units of Volts."},
			{VolumePercentQ, "Checks if the provided input is in Units of volume percent."},
			{VolumeQ, "Checks if the provided input is in Units of Volume."},
			{WeightVolumePercentQ, "Checks if the provided input is in Units of WeightVolumePercent (% w/v)."}
		}
	},
	RelatedGuides -> {
		GuideLink["Numerics"],
		GuideLink["StatisticalDistributions"],
		GuideLink["UnitManipulation"],
		GuideLink["UnitProperties"]
	}
]
