(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Section:: *)
(*Unit Testing*)


(* ::Subsection::Closed:: *)
(*CancelTransaction*)


(* ::Subsubsection::Closed:: *)
(*CancelTransaction *)


DefineTests[CancelTransaction,
    {
        Example[{Basic, "Cancels an existing order:"},
            CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"]],
            Object[Transaction, Order, "id:4pO6dMWLBkm5"],
            TearDown :> {
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ],
        Example[{Basic, "Cancels several existing orders:"},
            CancelTransaction[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, Order, "id:Vrbp1jGnNDvb"], Object[Transaction, Order, "id:XnlV5jmdJzNN"]}],
            {Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, Order, "id:Vrbp1jGnNDvb"], Object[Transaction, Order, "id:XnlV5jmdJzNN"]},
            TearDown :> {
                Upload[{
                    <|
                        Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, Order, "id:Vrbp1jGnNDvb"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, Order, "id:XnlV5jmdJzNN"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>
                }]
            }
        ],
        Example[{Basic, "Canceling an order updates the Status and DateCanceled fields of the order object:"},
            CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"]];
            Download[Object[Transaction, Order, "id:4pO6dMWLBkm5"], {Status, DateCanceled}],
            {Canceled, _?DateObjectQ},
            TearDown :> {
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ],
        Example[{Basic, "Canceling a pending ShipToECL transaction will update Status of the transaction to Cancelled, the status of the any pre-existing samples and containers to their pre-Transit status, and the status of any samples and containers generated by the transaction to Discarded. The Destination of any samples is also cleared:"},
            CancelTransaction[Object[Transaction, ShipToECL, "Test transaction for CancelTransaction: 1 "]];
            Download[Object[Transaction, ShipToECL, "Test transaction for CancelTransaction: 1 "], {Status, SamplesOut[Status], ContainersOut[Status], ContainersOut[Contents], ContainersOut[Contents][[All, 2]][Status], ContainersOut[Contents][[All, 2]][Destination], SamplesOut[Destination]}],
            {Canceled, {Discarded, Discarded, Discarded, Discarded}, {Available, Available, Discarded}, {{}, {{"A1", LinkP[Object[Sample], Container]}}, {}}, {{}, {Available}, {}}, {{}, {Null}, {}}, {Null, Null, Null, Null}},
            SetUp :> {
                Module[{samples, stocksolutionPkts, plate, column, vessel, sendingTransaction, uploadPlate, uploadColumn,
                    uploadVessel, uploadSending, allUploads, sampleDestinations, vessel2, uploadVessel2},
                    samples = CreateID[ConstantArray[Object[Sample], 4]];
                    plate = CreateID[Object[Container, Plate]];
                    column = CreateID[Object[Item, Column]];
                    vessel = CreateID[Object[Container, Vessel]];
                    vessel2 = CreateID[Object[Container, Vessel]];

                    stocksolutionPkts = Map[<|
                        Object -> #,
                        Model -> Link[Model[Sample, StockSolution, "Test Stock Solution for ReceiveInventory-1"], Objects],
                        Volume -> 100 Microliter,
                        DeveloperObject -> True
                    |> &, samples
                    ];

                    sampleDestinations = <|Object -> #, Destination -> Link[$Site]|>& /@ samples;

                    uploadPlate = {<|
                        Object -> plate,
                        Model -> Link[Model[Container, Plate, "id:01G6nvkKrrYm"], Objects],
                        Replace[Contents] -> {{"A1", Link[samples[[1]], Container]}, {"A2", Link[samples[[2]], Container]}},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now - 1Day, Available, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}, {Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadColumn = {<|
                        Object -> column,
                        Model -> Link[Model[Item, Column, "id:Z1lqpMzm11G0"], Objects],
                        DeveloperObject -> True
                    |>};

                    uploadVessel = {<|
                        Object -> vessel,
                        Model -> Link[Model[Container, Vessel, "id:WNa4ZjKoOXlE"], Objects],
                        Replace[Contents] -> {"A1", Link[samples[[3]], Container]},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now - 1Day, Available, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}, {Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadVessel2 = {<|
                        Object -> vessel2,
                        Model -> Link[Model[Container, Vessel, "id:WNa4ZjKoOXlE"], Objects],
                        Replace[Contents] -> {"A1", Link[samples[[4]], Container]},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadSending = {<|
                        Object -> Object[Transaction, ShipToECL, "Test transaction for CancelTransaction: 1 "],
                        Replace[SamplesOut] -> Link[Join[samples[[1 ;; 2]], {column}, {samples[[4]]}]],
                        Replace[ContainersOut] -> Link[{plate, vessel, vessel2}],
                        Destination -> Link[$Site],
                        Status -> Pending,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>};

                    allUploads = Join[stocksolutionPkts, uploadPlate, uploadColumn, uploadVessel, uploadVessel2, uploadSending, sampleDestinations];
                    Upload[allUploads];
                ]
            }
        ],
        Example[{Basic, "Canceling an ordered drop shipping transaction will update transaction's status:"},
            CancelTransaction[Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 1 "]];
            Download[Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 1 "], Status],
            Canceled,
            SetUp :> {
                Upload[
                    <|
                        Object -> Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 1 "],
                        Status -> Ordered,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null
                    |>
                ]
            }
        ],

        (* --- Options Examples --- *)
        Example[{Options, Output, "Cancels several existing orders, returning Result, Options, Preview, and Tests:"},
            CancelTransaction[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, Order, "id:Vrbp1jGnNDvb"]}, Output -> {Result, Options, Preview, Tests}],
            {
                {Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, Order, "id:Vrbp1jGnNDvb"]},
                {_Rule...},
                Null,
                {_EmeraldTest..}
            },
            TearDown :> {
                Upload[{
                    <|
                        Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, Order, "id:Vrbp1jGnNDvb"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>
                }]
            }
        ],

        Example[{Messages, "CanNotCancel", "Only a pending order, a pending ShipToUser transaction, a pending ShipToECL transaction, or an ordered DropShipping transaction can be canceled:"},
            CancelTransaction[Object[Transaction, ShipToECL, "Test shipped transaction for CancelTransaction"]],
            $Failed,
            Messages :> {Error::CanNotCancel},
            SetUp :> {
                Module[{samples, stocksolutionPkts, plate, column, vessel, sendingTransaction, uploadPlate, uploadColumn,
                    uploadVessel, uploadSending, allUploads},
                    samples = CreateID[ConstantArray[Object[Sample], 3]];
                    plate = CreateID[Object[Container, Plate]];
                    column = CreateID[Object[Item, Column]];
                    vessel = CreateID[Object[Container, Vessel]];

                    stocksolutionPkts = Map[<|
                        Object -> #,
                        Model -> Link[Model[Sample, StockSolution, "Test Stock Solution for ReceiveInventory-1"], Objects],
                        Volume -> 100 Microliter,
                        DeveloperObject -> True
                    |> &, samples
                    ];

                    uploadPlate = {<|
                        Object -> plate,
                        Model -> Link[Model[Container, Plate, "id:01G6nvkKrrYm"], Objects],
                        Replace[Contents] -> {{"A1", Link[samples[[1]], Container]}, {"A2", Link[samples[[2]], Container]}},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now - 1Day, Available, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}, {Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadColumn = {<|
                        Object -> column,
                        Model -> Link[Model[Item, Column, "id:Z1lqpMzm11G0"], Objects],
                        DeveloperObject -> True
                    |>};

                    uploadVessel = {<|
                        Object -> vessel,
                        Model -> Link[Model[Container, Vessel, "id:WNa4ZjKoOXlE"], Objects],
                        Replace[Contents] -> {"A1", Link[samples[[3]], Container]},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now - 1Day, Available, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}, {Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadSending = {<|
                        Object -> Object[Transaction, ShipToECL, "Test shipped transaction for CancelTransaction"],
                        Replace[SamplesOut] -> Link[Join[samples[[1 ;; 2]], {column}]],
                        Replace[ContainersOut] -> Link[{plate, vessel}],
                        Destination -> Link[$Site],
                        Status -> Shipped,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>};

                    allUploads = Join[stocksolutionPkts, uploadPlate, uploadColumn, uploadVessel, uploadSending];
                    Upload[allUploads];
                ]
            }
        ],
        Example[{Messages, "ShippingInProgress", "If a ShipToUser transaction already has an associated shipping preparation, it may not be canceled:"},
            CancelTransaction[Object[Transaction, ShipToUser, "Test transaction in preparation for CancelTransaction"]],
            $Failed,
            Messages :> {Error::ShippingInProgress},
            SetUp :> {
                If[!DatabaseMemberQ[Object[Maintenance, Shipping, "Test maintenance shipping for CancelTransaction"]],
                    Upload[
                        <|
                            Type -> Object[Maintenance, Shipping],
                            Name -> "Test maintenance shipping for CancelTransaction",
                            DeveloperObject -> True
                        |>
                    ]
                ];
                If[DatabaseMemberQ[Object[Transaction, ShipToUser, "Test transaction in preparation for CancelTransaction"]],
                    EraseObject[Object[Transaction, ShipToUser, "Test transaction in preparation for CancelTransaction"], Verbose -> False, Force -> True]
                ];
                Upload[
                    <|
                        Type -> Object[Transaction, ShipToUser],
                        Name -> "Test transaction in preparation for CancelTransaction",
                        ShippingPreparation -> Link[Object[Maintenance, Shipping, "Test maintenance shipping for CancelTransaction"], Transactions],
                        Status -> Pending,
                        DeveloperObject -> True
                    |>
                ]
            }
        ],
        Test["Function updates the correct fields (Status and DateCanceled):",
            (
                CancelTransaction[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, Order, "id:Vrbp1jGnNDvb"], Object[Transaction, Order, "id:XnlV5jmdJzNN"]}];
                Download[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, Order, "id:Vrbp1jGnNDvb"], Object[Transaction, Order, "id:XnlV5jmdJzNN"]}, {Status, DateCanceled}]
            ),
            {{Canceled, _?DateObjectQ}, {Canceled, _?DateObjectQ}, {Canceled, _?DateObjectQ}},
            TearDown :> {
                Upload[{
                    <|
                        Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, Order, "id:Vrbp1jGnNDvb"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, Order, "id:XnlV5jmdJzNN"],
                        Status -> Pending,
                        DateCanceled -> Null
                    |>
                }]
            }
        ],
        Test["Upload -> True returns a list of valid Upload packets:",
            ValidUploadQ[CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"], Upload -> False]],
            True,
            TearDown :> {
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ],
        Test["Cache -> packets passes the cache to Download:",
            orderPackets = Download[{Object[Transaction, Order, "id:4pO6dMWLBkm5"]}];
            CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"], Cache -> orderPackets],
            Object[Transaction, Order, "id:4pO6dMWLBkm5"],
            Variables :> {orderPackets},
            TearDown :> {
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ],
        Test["Cancel multiple transactions of different types and update the Status:",
            CancelTransaction[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, ShipToUser, "Test Returning transaction for CancelTransaction: 1 "], Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 1 "]}];
            Download[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, ShipToUser, "Test Returning transaction for CancelTransaction: 1 "], Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 1 "]}, {Status, DateCanceled}],
            {{Canceled, _?DateObjectQ}, {Canceled, _?DateObjectQ}, {Canceled, _?DateObjectQ}},
            SetUp :> {
                Upload[{
                    <|
                        Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                        Status -> Pending,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, ShipToUser, "Test Returning transaction for CancelTransaction: 1 "],
                        Status -> Pending,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null
                    |>,
                    <|
                        Object -> Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 1 "],
                        Status -> Ordered,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null
                    |>
                }];
            },
            TearDown :> {
                Upload[{
                    <|
                        Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                        Status -> Pending,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null
                    |>
                }];
            }
        ],
        Test["If any of the transaction can not be canceled, return an error:",
            CancelTransaction[{Object[Transaction, Order, "id:4pO6dMWLBkm5"], Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 2 "], Object[Transaction, ShipToECL, "Test shipped transaction for CancelTransaction"]}],
            $Failed,
            Messages :> {Error::CanNotCancel},
            SetUp :> {
                Module[{samples, stocksolutionPkts, plate, column, vessel, sendingTransaction, uploadPlate, uploadColumn,
                    uploadVessel, uploadSending, allUploads},
                    samples = CreateID[ConstantArray[Object[Sample], 3]];
                    plate = CreateID[Object[Container, Plate]];
                    column = CreateID[Object[Item, Column]];
                    vessel = CreateID[Object[Container, Vessel]];

                    stocksolutionPkts = Map[<|
                        Object -> #,
                        Model -> Link[Model[Sample, StockSolution, "Test Stock Solution for ReceiveInventory-1"], Objects],
                        Volume -> 100 Microliter,
                        DeveloperObject -> True
                    |> &, samples
                    ];

                    uploadPlate = {<|
                        Object -> plate,
                        Model -> Link[Model[Container, Plate, "id:01G6nvkKrrYm"], Objects],
                        Replace[Contents] -> {{"A1", Link[samples[[1]], Container]}, {"A2", Link[samples[[2]], Container]}},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now - 1Day, Available, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}, {Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadColumn = {<|
                        Object -> column,
                        Model -> Link[Model[Item, Column, "id:Z1lqpMzm11G0"], Objects],
                        DeveloperObject -> True
                    |>};

                    uploadVessel = {<|
                        Object -> vessel,
                        Model -> Link[Model[Container, Vessel, "id:WNa4ZjKoOXlE"], Objects],
                        Replace[Contents] -> {"A1", Link[samples[[3]], Container]},
                        DeveloperObject -> True,
                        Append[StatusLog] -> {{Now - 1Day, Available, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}, {Now, Transit, Link[Object[User, Emerald, Developer, "id:E8zoYvNLok4N"]]}}
                    |>};

                    uploadSending = {<|
                        Object -> Object[Transaction, ShipToECL, "Test shipped transaction for CancelTransaction"],
                        Replace[SamplesOut] -> Link[Join[samples[[1 ;; 2]], {column}]],
                        Replace[ContainersOut] -> Link[{plate, vessel}],
                        Destination -> Link[$Site],
                        Status -> Shipped,
                        Replace[StatusLog] -> {},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>};

                    allUploads = Join[stocksolutionPkts, uploadPlate, uploadColumn, uploadVessel, uploadSending, {
                        <|
                            Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                            Status -> Pending
                        |>,
                        <|
                            Object -> Object[Transaction, DropShipping, "Test drop shipping transaction for CancelTransaction: 2 "],
                            Status -> Shipped
                        |>
                    }];
                    Upload[allUploads];
                ]
            }
        ],
				Example[{Additional,"Inventories","Canceling a transaction removes it from OutstandingRestockings of any relevant inventory objects:"},
            CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"]];
						Download[Object[Inventory,Product,"CancelTransaction test inventory "<>$SessionUUID],OutstandingRestockings],
            {},
						SetUp :> (
							Upload[
								Association[
									Type -> Object[Inventory,Product],
									Name -> "CancelTransaction test inventory "<>$SessionUUID,
									Replace[OutstandingRestockings] -> {Link[Object[Transaction, Order, "id:4pO6dMWLBkm5"]]}
								]
							]
						),
            TearDown :> {
								EraseObject[Object[Inventory,Product,"CancelTransaction test inventory "<>$SessionUUID],Force->True],
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ],

        (* Tests of proper handling of singleton overload *)
        Test["Canceling an existing singleton order properly returns a singleton for the Result Output element when other types of Output are also requested:",
            CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"], Output -> {Options, Result}],
            {
                {_Rule...},
                Object[Transaction, Order, "id:4pO6dMWLBkm5"]
            },
            TearDown :> {
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ],
        Test["Canceling an existing singleton order properly returns a list of output packets for the Result Output element when other types of Output are also requested and Upload->False:",
            CancelTransaction[Object[Transaction, Order, "id:4pO6dMWLBkm5"], Output -> {Options, Result}, Upload -> False],
            {
                {_Rule...},
                {_?ValidUploadQ..}
            },
            TearDown :> {
                Upload[<|Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"], Status -> Pending, DateCanceled -> Null|>]
            }
        ]
    },
    Stubs :> {
        emailChecks = {},
        Email[recipient_, ops___] := (emailChecks = Join[emailChecks, Lookup[ToList[ops], Bcc]])
    },
    TearDown :> {
        Upload[
            <|
                Object -> Object[Transaction, Order, "id:4pO6dMWLBkm5"],
                Status -> Pending,
                DateCanceled -> Null
            |>
        ]
    },
    SymbolTearDown :> {
        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[Object[Notification], Recipients == (Object[User, "Test user for notebook-less test protocols"] | Object[User, Emerald, Developer, "hendrik"])],
            Force -> True
        ]
    }
];


(* ::Subsubsection::Closed:: *)
(*CancelTransactionOptions*)


DefineTests[CancelTransactionOptions,
    {
        Example[{Basic, "CancelTransactionOptions returns resolved options for CancelTransaction when passed a singleton input:"},
            CancelTransactionOptions[Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID], OutputFormat -> List],
            {Rule[_, Except[Automatic]]...}
        ],
        Example[{Basic, "CancelTransactionOptions returns resolved options for CancelTransaction when passed a list of input:"},
            CancelTransactionOptions[
                {
                    Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID],
                    Object[Transaction, Order, "Test transaction order 2 for CancelTransactionOptions unit test " <> $SessionUUID],
                    Object[Transaction, Order, "Test transaction order 3 for CancelTransactionOptions unit test " <> $SessionUUID]
                },
                OutputFormat -> List
            ],
            {Rule[_, Except[Automatic]]...}
        ],
        Example[{Basic, "CancelTransactionOptions does not actually cancel the provided transaction:"},
            CancelTransactionOptions[Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID], OutputFormat -> List];
            Download[Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID], {Status, DateCanceled}],
            {Pending, Null}
        ],
        Example[{Options, OutputFormat, "Return resolved options for CancelTransaction as a table:"},
            CancelTransactionOptions[
                {
                    Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID],
                    Object[Transaction, Order, "Test transaction order 2 for CancelTransactionOptions unit test " <> $SessionUUID],
                    Object[Transaction, Order, "Test transaction order 3 for CancelTransactionOptions unit test " <> $SessionUUID]
                }
            ],
            Graphics_
        ]
    },
    SymbolSetUp :> {
        Module[
            {objs, existingObjs},

            objs = Quiet[
                Join[
                    Cases[
                        (* Enlist test objects to make sure they got deleted. *)
                        Flatten[{
                            Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 2 for CancelTransactionOptions unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 3 for CancelTransactionOptions unit test " <> $SessionUUID]
                        }],
                        ObjectP[]
                    ],
                    $CreatedObjects
                ]
            ];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            $CreatedObjects = {};

            Upload[
                {
                    <|
                        Type -> Object[Transaction, Order],
                        Name -> "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID,
                        Status -> Pending,
                        Creator -> Link[Object[User, "id:n0k9mG8AXZP6"], TransactionsCreated],
                        RequestedAutomatically -> False,
                        Replace[Products] -> {Link[Object[Product, "id:o1k9jAK4dYDA"], Orders]}, Replace[QuantitiesOutstanding] -> {0},
                        Replace[QuantitiesReceived] -> {0},
                        Replace[StatusLog] -> {{DateObject[{2022, 8, 25, 8, 32, 33.}, "Instant", "Gregorian", -7.], Canceled, Link[Object[User, Emerald, Developer, "id:Y0lXejMmX69l"]]}},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>,
                    <|
                        Type -> Object[Transaction, Order],
                        Name -> "Test transaction order 2 for CancelTransactionOptions unit test " <> $SessionUUID,
                        Status -> Pending,
                        Creator -> Link[Object[User, "id:n0k9mG8AXZP6"], TransactionsCreated],
                        RequestedAutomatically -> False,
                        Replace[Products] -> {Link[Object[Product, "id:o1k9jAK4dYDA"], Orders]}, Replace[QuantitiesOutstanding] -> {0},
                        Replace[QuantitiesReceived] -> {0},
                        Replace[StatusLog] -> {{DateObject[{2022, 8, 25, 8, 32, 33.}, "Instant", "Gregorian", -7.], Canceled, Link[Object[User, Emerald, Developer, "id:Y0lXejMmX69l"]]}},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>,
                    <|
                        Type -> Object[Transaction, Order],
                        Name -> "Test transaction order 3 for CancelTransactionOptions unit test " <> $SessionUUID,
                        Status -> Pending,
                        Creator -> Link[Object[User, "id:n0k9mG8AXZP6"], TransactionsCreated],
                        RequestedAutomatically -> False,
                        Replace[Products] -> {Link[Object[Product, "id:o1k9jAK4dYDA"], Orders]}, Replace[QuantitiesOutstanding] -> {0},
                        Replace[QuantitiesReceived] -> {0},
                        Replace[StatusLog] -> {{DateObject[{2022, 8, 25, 8, 32, 33.}, "Instant", "Gregorian", -7.], Canceled, Link[Object[User, Emerald, Developer, "id:Y0lXejMmX69l"]]}},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>
                }
            ]
        ]
    },
    SymbolTearDown :> {
        Module[
            {objs, existingObjs},

            objs = Quiet[
                Join[
                    Cases[
                        (* Enlist test objects to make sure they got deleted. *)
                        Flatten[{
                            Object[Transaction, Order, "Test transaction order 1 for CancelTransactionOptions unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 2 for CancelTransactionOptions unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 3 for CancelTransactionOptions unit test " <> $SessionUUID]
                        }],
                        ObjectP[]
                    ],
                    $CreatedObjects
                ]
            ];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];
            Unset[$CreatedObjects];
        ]
    }
];


(* ::Subsubsection::Closed:: *)
(*CancelTransactionPreview*)


DefineTests[CancelTransactionPreview,
    {
        Example[{Basic, "Returns Null when passed a singleton input:"},
            CancelTransactionPreview[Object[Transaction, Order, "Test transaction order 1 for CancelTransactionPreview unit test " <> $SessionUUID]],
            Null
        ],
        Example[{Basic, "Returns Null when passed a list of input:"},
            CancelTransactionPreview[{
                Object[Transaction, Order, "Test transaction order 1 for CancelTransactionPreview unit test " <> $SessionUUID],
                Object[Transaction, Order, "Test transaction order 2 for CancelTransactionPreview unit test " <> $SessionUUID],
                Object[Transaction, Order, "Test transaction order 3 for CancelTransactionPreview unit test " <> $SessionUUID]
            }],
            Null
        ],
        Example[{Basic, "Does not actually cancel the provided transaction:"},
            CancelTransactionPreview[Object[Transaction, Order, "Test transaction order 1 for CancelTransactionPreview unit test " <> $SessionUUID]];
            Download[Object[Transaction, Order, "id:4pO6dMWLBkm5"], {Status, DateCanceled}],
            {Pending, Null}
        ]
    },
    SymbolSetUp :> {
        Module[
            {objs, existingObjs},

            objs = Quiet[
                Join[
                    Cases[
                        (* Enlist test objects to make sure they got deleted. *)
                        Flatten[{
                            Object[Transaction, Order, "Test transaction order 1 for CancelTransactionPreview unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 2 for CancelTransactionPreview unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 3 for CancelTransactionPreview unit test " <> $SessionUUID]
                        }],
                        ObjectP[]
                    ],
                    $CreatedObjects
                ]
            ];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            $CreatedObjects = {};

            Upload[
                {
                    <|
                        Type -> Object[Transaction, Order],
                        Name -> "Test transaction order 1 for CancelTransactionPreview unit test " <> $SessionUUID,
                        Status -> Pending,
                        Creator -> Link[Object[User, "id:n0k9mG8AXZP6"], TransactionsCreated],
                        RequestedAutomatically -> False,
                        Replace[Products] -> {Link[Object[Product, "id:o1k9jAK4dYDA"], Orders]}, Replace[QuantitiesOutstanding] -> {0},
                        Replace[QuantitiesReceived] -> {0},
                        Replace[StatusLog] -> {{DateObject[{2022, 8, 25, 8, 32, 33.}, "Instant", "Gregorian", -7.], Canceled, Link[Object[User, Emerald, Developer, "id:Y0lXejMmX69l"]]}},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>,
                    <|
                        Type -> Object[Transaction, Order],
                        Name -> "Test transaction order 2 for CancelTransactionPreview unit test " <> $SessionUUID,
                        Status -> Pending,
                        Creator -> Link[Object[User, "id:n0k9mG8AXZP6"], TransactionsCreated],
                        RequestedAutomatically -> False,
                        Replace[Products] -> {Link[Object[Product, "id:o1k9jAK4dYDA"], Orders]}, Replace[QuantitiesOutstanding] -> {0},
                        Replace[QuantitiesReceived] -> {0},
                        Replace[StatusLog] -> {{DateObject[{2022, 8, 25, 8, 32, 33.}, "Instant", "Gregorian", -7.], Canceled, Link[Object[User, Emerald, Developer, "id:Y0lXejMmX69l"]]}},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>,
                    <|
                        Type -> Object[Transaction, Order],
                        Name -> "Test transaction order 3 for CancelTransactionPreview unit test " <> $SessionUUID,
                        Status -> Pending,
                        Creator -> Link[Object[User, "id:n0k9mG8AXZP6"], TransactionsCreated],
                        RequestedAutomatically -> False,
                        Replace[Products] -> {Link[Object[Product, "id:o1k9jAK4dYDA"], Orders]}, Replace[QuantitiesOutstanding] -> {0},
                        Replace[QuantitiesReceived] -> {0},
                        Replace[StatusLog] -> {{DateObject[{2022, 8, 25, 8, 32, 33.}, "Instant", "Gregorian", -7.], Canceled, Link[Object[User, Emerald, Developer, "id:Y0lXejMmX69l"]]}},
                        DateCanceled -> Null,
                        DeveloperObject -> True
                    |>
                }
            ]
        ]
    },
    SymbolTearDown :> {
        Module[
            {objs, existingObjs},

            objs = Quiet[
                Join[
                    Cases[
                        (* Enlist test objects to make sure they got deleted. *)
                        Flatten[{
                            Object[Transaction, Order, "Test transaction order 1 for CancelTransactionPreview unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 2 for CancelTransactionPreview unit test " <> $SessionUUID],
                            Object[Transaction, Order, "Test transaction order 3 for CancelTransactionPreview unit test " <> $SessionUUID]
                        }],
                        ObjectP[]
                    ],
                    $CreatedObjects
                ]
            ];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];
            Unset[$CreatedObjects];
        ]
    }
];


(* ::Subsubsection::Closed:: *)
(*ValidCancelTransactionQ*)


DefineTests[ValidCancelTransactionQ,
    {
        Example[{Basic, "Validate a request to cancel a single transaction:"},
            ValidCancelTransactionQ[Object[Transaction, Order, "ValidCancelTransactionQ test order 1 " <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Validate a request to cancel multiple transactions:"},
            ValidCancelTransactionQ[{Object[Transaction, Order, "ValidCancelTransactionQ test order 1 " <> $SessionUUID], Object[Transaction, Order, "ValidCancelTransactionQ test order 2 " <> $SessionUUID]}],
            True
        ],
        Example[{Basic, "Invalid object input will not cause validation to fail:"},
            ValidCancelTransactionQ[Object[Transaction, Order, "id:4pO6dMWLBkm5"]],
            True
        ],
        Example[{Additional, "Does not actually cancel the provided transaction:"},
            ValidCancelTransactionQ[Object[Transaction, Order, "ValidCancelTransactionQ test order 1 " <> $SessionUUID]];
            Download[Object[Transaction, Order, "ValidCancelTransactionQ test order 1 " <> $SessionUUID], {Status, DateCanceled}],
            {Pending, Null}
        ],
        Example[{Options, OutputFormat, "Return an EmeraldTestSummary:"},
            ValidCancelTransactionQ[Object[Transaction, Order, "ValidCancelTransactionQ test order 1 " <> $SessionUUID], OutputFormat -> TestSummary],
            _EmeraldTestSummary
        ],
        Example[{Options, Verbose, "Print verbose messages reporting test passage / failure:"},
            ValidCancelTransactionQ[Object[Transaction, Order, "ValidCancelTransactionQ test order 1 " <> $SessionUUID], Verbose -> True],
            True
        ]
    },
    Variables :> {testOrder1, testOrder2},
    SetUp :> {
        testOrder1 = First[OrderSamples[Object[Product, "id:BYDOjv1Z1NL8"], 1]];
        testOrder2 = First[OrderSamples[Object[Product, "id:BYDOjv1Z1NL8"], 1]];

        Upload[{
            <|Object -> testOrder1, Name -> "ValidCancelTransactionQ test order 1 " <> $SessionUUID|>,
            <|Object -> testOrder2, Name -> "ValidCancelTransactionQ test order 2 " <> $SessionUUID|>
        }];
    },
    TearDown :> {
        EraseObject[{testOrder1, testOrder2}, Verbose -> False, Force -> True]
    }
];


(* ::Subsection::Closed:: *)
(*StoreSamples*)


(* ::Subsubsection::Closed:: *)
(*StoreSamples*)


DefineTests[StoreSamples,
    {
        (* --- Basic --- *)
        Example[{Basic, "Mark a sample to be stored at 4 Celsius; the sample and its container will be refrigerated once they are not in use by any experiment:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Refrigerator],
            {OrderlessPatternSequence[ObjectP[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID]], ObjectP[Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]]]},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            },
            TimeConstraint -> 200
        ],
        Example[{Basic, "Mark a plate to be stored at -20 Celsius; the plate will be freezed once the samples and the plate are not in use by any experiment:"},
            StoreSamples[Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID], Freezer],
            {OrderlessPatternSequence[ObjectP[Object[Sample]], ObjectP[Object[Sample]], ObjectP[Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]]]},
            SetUp :> {Module[{contents, updatePkts},
                contents = Download[Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID], Contents[[All, 2]][Object]];
                updatePkts = Map[
                    <|
                        Object -> #,
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Null,
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    |>&, Join[contents, {Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]}]
                ];

                Upload[updatePkts]
            ];
            }
        ],
        Example[{Basic, "Mark a samples to be stored at -80 Celsius:"},
            StoreSamples[Object[Sample, "HEK293T Cell (-80C storage) for StoreSamples" <> $SessionUUID], DeepFreezer],
            {OrderlessPatternSequence[ObjectP[Object[Sample, "HEK293T Cell (-80C storage) for StoreSamples" <> $SessionUUID]], ObjectP[Object[Container, Vessel]]]},
            SetUp :> {
                Module[{container, updatePkts},
                    container = Download[Object[Sample, "HEK293T Cell (-80C storage) for StoreSamples" <> $SessionUUID], Container[Object]];
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, {container, Object[Sample, "HEK293T Cell (-80C storage) for StoreSamples" <> $SessionUUID]}
                    ];

                    Upload[updatePkts]
                ];
            }
        ],
        Example[{Basic, "Mark multiple samples to be stored at different temperature:"},
            StoreSamples[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]}, {Refrigerator, Freezer}],
            {OrderlessPatternSequence[ObjectP[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID]], ObjectP[Object[Sample]], ObjectP[Object[Sample]],
                ObjectP[Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]], ObjectP[Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]]]},
            SetUp :> {
                Module[{contents, objs, updatePkts},
                    contents = Download[{Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]}, Contents[[All, 2]][Object]];
                    objs = Join[Flatten[contents], {Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID], Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]}];

                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, objs
                    ];

                    Upload[updatePkts]
                ];
                StoreSamples[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID]}, Refrigerator]
            }
        ],
        Example[{Basic, "If storage condition is not specified, sample will be stored based on its model's DefaultStorageCondition:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamples" <> $SessionUUID]];
            Download[Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamples" <> $SessionUUID], {StorageCondition, Model[DefaultStorageCondition]}],
            {ObjectP[Model[StorageCondition, "Ambient Storage"]], ObjectP[Model[StorageCondition, "Ambient Storage"]]},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            }
        ],

        (* ---  Additional --- *)
        Example[{Additional, "Mark multiple samples to be stored under the same condition:"},
            StoreSamples[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID]}, Refrigerator],
            {OrderlessPatternSequence[ObjectP[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID]], ObjectP[Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID]],
                ObjectP[Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]], ObjectP[Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID]]]},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            }
        ],
        Example[{Additional, "Mark a sample to be stored at 4 Celsius by specifying StorageCondition model:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Model[StorageCondition, "Refrigerator"]],
            {OrderlessPatternSequence[ObjectP[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID]], ObjectP[Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]]]},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            }
        ],
        Example[
            {Additional, "Un-mark a sample for Disposal by setting it to another storage condition:"},
            (
                StoreSamples[Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID], AmbientStorage];
                Download[Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID], AwaitingDisposal]
            ),
            Null,
            SetUp :> {
                Upload[{
                    Association[
                        Object -> Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ],
                    Association[
                        Object -> Object[Container, Vessel, "2mL Tube to Unset for Disposal for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]
                }]
            }
        ],

        (* --- Messages --- *)
        Example[{Messages, "OptionLengthMismatch", "If the samples and the given options have different length, return an error:"},
            StoreSamples[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Plate, "96-well Plate (10X PBS, Freeze)"]},
                Temperature -> {4 Celsius}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        (*Example[{Messages,"CustomConditionNotSupported","Some custom conditions might not be currently available:"},
			StoreSamples[Object[Sample, "10X PBS StockSolution (10 C)"],Temperature -> 10 Celsius],
			$Failed,
			Messages:>{Error::CustomConditionNotSupported}
		],*)
        Example[
            {Messages, "UnsafeStorageCondition", "If a sample requires a specific storage condition for safety reasons, but a provided storage condition object does not satisfy these requirements, the storage condition is disallowed:"},
            StoreSamples[Object[Sample, "Methanol for USC Testing for StoreSamples" <> $SessionUUID], Model[StorageCondition, "Ambient Storage"]],
            $Failed,
            Messages :> {
                Error::UnsafeStorageCondition
            }
        ],
        Example[{Messages, "DiscardedInputs", "Storage condition can not be requested for the discarded sample:"},
            StoreSamples[Object[Item, Column, "HPLC Column (Discarded) for StoreSamples" <> $SessionUUID], AmbientStorage],
            $Failed,
            Messages :> {Error::DiscardedInputs}
        ],
        Example[{Messages, "SameObjectConflict", "If the same sample is specified with different storage conditions, return an error message:"},
            StoreSamples[{Object[Item, Column, "HPLC Column (A1) for StoreSamples" <> $SessionUUID], Object[Item, Column, "HPLC Column (A1) for StoreSamples" <> $SessionUUID]}, {Refrigerator, AmbientStorage}],
            $Failed,
            Messages :> {Error::SameObjectConflict}
        ],
        Example[{Messages, "ConflictingConditionsInContainer", "If updating a sample would cause it to have a different condition from other samples in its container, the condition cannot be updated:"},
            StoreSamples[Object[Sample, "10X PBS (A1, 96-well plate) for StoreSamples" <> $SessionUUID], AmbientStorage],
            $Failed,
            Messages :> {Error::ConflictingConditionsInContainer}
        ],
        Example[
            {Messages, "MissingDesiccated", "AtmosphericCondition cannot be provided when Desiccated -> False or not specified:"},
            StoreSamples[Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID], AmbientStorage, AtmosphericCondition -> Vacuum],
            $Failed,
            Messages :> {Error::MissingDesiccated}
        ],
        Example[
            {Messages, "ConditionNotSupported", "Custom storage conditions are not currently supported:"},
            StoreSamples[Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID], DeepFreezer, Desiccated -> True],
            $Failed,
            Messages :> {Error::ConditionNotSupported}
        ],
        Example[
            {Messages, "AtmosphericConditionNotSupported", "Argon and nitrogen atmospheres are not currently supported:"},
            StoreSamples[Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID], AmbientStorage, Desiccated -> True, AtmosphericCondition -> Nitrogen],
            $Failed,
            Messages :> {Error::AtmosphericConditionNotSupported}
        ],
        Example[{Messages, "IncompatibleInputLength", "Length of the two inputs must match if there are multiple samples and multiple storage conditions:"},
            StoreSamples[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]}, {AmbientStorage, Freezer}],
            $Failed,
            Messages :> {Error::IncompatibleInputLength, Error::InputLengthMismatch}
        ],
        (* --- Options --- *)
        Example[{Options, Temperature, "Mark a specific storage temperature for a sample:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Temperature -> 4 Celsius];
            Download[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], StorageCondition[Temperature]],
            4 Celsius,
            EquivalenceFunction -> Equal,
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            }
        ],
        Example[{Options, Humidity, "Mark a specific storage humidity for a sample:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Humidity -> 65 Percent];
            Download[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], StorageCondition[Humidity]],
            65 Percent,
            EquivalenceFunction -> Equal,
            Messages :> {Warning::UndatedEnvironmentalChamberStorageEnqueued},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            }
        ],
        Example[{Options, UVLightIntensity, "Mark a specific environmental chamber storage UV light intensity for a sample:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], UVLightIntensity -> 36 Watt / Meter^2];
            Download[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], StorageCondition[UVLightIntensity]],
            36 Watt / Meter^2,
            EquivalenceFunction -> Equal,
            Messages :> {Warning::UndatedEnvironmentalChamberStorageEnqueued},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ];
            }
        ],
        Example[{Options, VisibleLightIntensity, "Mark a specific environmental chamber storage visible light intensity for a sample:"},
            StoreSamples[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], VisibleLightIntensity -> 29 Kilo Lumen / Meter^2];
            Download[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], StorageCondition[VisibleLightIntensity]],
            29 Kilo Lumen / Meter^2,
            EquivalenceFunction -> Equal,
            Messages :> {Warning::UndatedEnvironmentalChamberStorageEnqueued},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> Null,
                            StorageCondition -> Null,
                            Replace[StorageSchedule] -> {},
                            Replace[StorageConditionLog] -> {}
                        |>&, myObjs
                    ];

                    Upload[updatePkts]
                ]
            }
        ],
        Example[
            {Options, Desiccated, "Specify whether samples should be stored in a desiccated environment:"},
            (
                StoreSamples[Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID], AmbientStorage, Desiccated -> True];
                Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID][StorageCondition][Name]
            ),
            "Ambient Storage, Desiccated",
            EquivalenceFunction -> Equal,
            SetUp :> {
                Upload[{
                    Association[
                        Object -> Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Null,
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ],
                    Association[
                        Object -> Object[Container, Vessel, "Vessel 1 for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Null,
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]
                }]
            }
        ],
        Example[
            {Options, AtmosphericCondition, "Specify in which atmosphere desiccation should take place:"},
            (
                StoreSamples[Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID], AmbientStorage, Desiccated -> True, AtmosphericCondition -> Vacuum];
                Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID][StorageCondition][Name]
            ),
            "Ambient Storage, Desiccated Under Vacuum",
            EquivalenceFunction -> Equal,
            SetUp :> {
                Upload[{
                    Association[
                        Object -> Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Null,
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ],
                    Association[
                        Object -> Object[Container, Vessel, "Vessel 1 for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Null,
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]
                }]
            }
        ],
        Example[
            {Additional, "Un-mark a sample for Disposal by setting it to another storage condition:"},
            (
                StoreSamples[Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID], AmbientStorage];
                Download[Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID], AwaitingDisposal]
            ),
            Null,
            SetUp :> {
                Upload[{
                    Association[
                        Object -> Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ],
                    Association[
                        Object -> Object[Container, Vessel, "2mL Tube to Unset for Disposal for StoreSamples" <> $SessionUUID],
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]
                }]
            }
        ],
        Example[
            {Options, Date, "When Date is specified, schedules protocols grouped by Date:"},
            StoreSamples[
                {
                    Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                    Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
                    Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]
                },
                LongTermTesting,
                Date -> Now + 1Day
            ];
            Download[{
                Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]
            },
                StorageSchedule
            ],
            {
                {{_DateObject, LinkP[Model[StorageCondition]], LinkP[Object[Maintenance, StorageUpdate]]}},
                {{_DateObject, LinkP[Model[StorageCondition]], LinkP[Object[Maintenance, StorageUpdate]]}},
                {{_DateObject, LinkP[Model[StorageCondition]], LinkP[Object[Maintenance, StorageUpdate]]}}
            },
            SetUp :> {
                Upload[
                    Association[
                        Object -> #,
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]& /@ {
                        Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID],
                        Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID],
                        Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID],
                        Object[Sample, "10X PBS (A1, 96-well plate) for StoreSamples" <> $SessionUUID],
                        Object[Sample, "10X PBS (A2, 96-well plate) for StoreSamples" <> $SessionUUID]
                    }
                ];
                $CreatedObjects = {}
            },
            TearDown :> {Quiet[EraseObject[$CreatedObjects, Force -> True, Verbose -> False]]}
        ],
        Example[
            {Options, Date, "Create different protocols based on date:"},
            t0 = Now;
            returns = StoreSamples[
                {
                    Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                    Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
                    Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]
                },
                LongTermTesting,
                Date -> {t0 + 1Day, t0 + 1Day, t0 + 5Day}
            ];
            Differences[DeleteDuplicates[Cases[returns, ObjectP[Object[Maintenance, StorageUpdate]]]][StartDate]],
            Alternatives[{Quantity[4, "Days"]} (* Mathematica 13.2 *), {Quantity[4., "Days"]} (* Mathematica 12.0/12.2 *)],
            SetUp :> {
                Upload[
                    Association[
                        Object -> #,
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]& /@ {
                        Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID],
                        Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID],
                        Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID],
                        Object[Sample, "10X PBS (A1, 96-well plate) for StoreSamples" <> $SessionUUID],
                        Object[Sample, "10X PBS (A2, 96-well plate) for StoreSamples" <> $SessionUUID]
                    }
                ];
                $CreatedObjects = {}
            },
            TearDown :> {Quiet[EraseObject[$CreatedObjects, Force -> True, Verbose -> False]]},
            Variables :> {t0, returns}
        ],
        Example[
            {Options, Date, "Create multiple protocols to store the same sample at different conditions at different dates:"},
            t0 = Now;
            returns = StoreSamples[
                {Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID], Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID]},
                {LongTermTesting, DeepFreezer},
                Date -> {t0 + 1Day, t0 + 6Month}
            ];
            DeleteDuplicates[Cases[returns, ObjectP[Object[Maintenance, StorageUpdate]]]][StartDate],
            {_DateObject, _DateObject},

            SetUp :> {
                Upload[
                    Association[
                        Object -> #,
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {}
                    ]& /@ {
                        Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]
                    }
                ];
                $CreatedObjects = {}
            },
            TearDown :> {Quiet[EraseObject[$CreatedObjects, Force -> True, Verbose -> False]]},
            Variables :> {t0, returns}
        ],
        Test[
            "Enqueued Maintenance object's ScheduledMoves contains the container of non-self-standing samples instead of the sample itself:",
            t0 = Now;
            returns = StoreSamples[
                Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                LongTermTesting,
                Date -> t0 + 1Day
            ];
            FirstCase[returns, ObjectP[Object[Maintenance, StorageUpdate]]][ScheduledMoves],
            {ObjectP[Object[Container]]},
            SetUp :> {
                Upload[
                    Association[
                        Object -> #,
                        AwaitingStorageUpdate -> Null,
                        StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                        AwaitingDisposal -> True,
                        Replace[DisposalLog] -> {},
                        Replace[StorageSchedule] -> {},
                        Replace[StorageConditionLog] -> {Now - 1Day, Link[Model[StorageCondition, "Ambient Storage"]], Link[$PersonID]}
                    ]& /@ {
                        Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
                        Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]
                    }
                ];
                $CreatedObjects = {}
            },
            TearDown :> {Quiet[EraseObject[$CreatedObjects, Force -> True, Verbose -> False]]}
        ]
    },

    SymbolSetUp :> Module[
        {testObjects, existingObjects, allUploads, supplier, sample, sampleID, product, productID, containerUploads, fakeBench, sampleUploads, updates},

        (* Initialize $CreatedObjects *)
        $CreatedObjects = {};

        (*make sure we don't have test objects in the database *)
        testObjects = {
            Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID],
            Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID],
            Object[Sample, "HEK293T Cell (-80C storage) for StoreSamples" <> $SessionUUID],
            Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamples" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamples" <> $SessionUUID],
            Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID],
            Object[Sample, "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID],
            Object[Container, Vessel, "2mL Tube to Unset for Disposal for StoreSamples" <> $SessionUUID],
            Object[Sample, "Methanol for USC Testing for StoreSamples" <> $SessionUUID],
            Object[Item, Column, "HPLC Column (Discarded) for StoreSamples" <> $SessionUUID],
            Object[Item, Column, "HPLC Column (A1) for StoreSamples" <> $SessionUUID],
            Object[Sample, "10X PBS (A1, 96-well plate) for StoreSamples" <> $SessionUUID],
            Object[Sample, "10X PBS (A2, 96-well plate) for StoreSamples" <> $SessionUUID],
            Object[Container, Bench, "Fake bench for StoreSamples tests" <> $SessionUUID],
            Object[Container, Vessel, "HEK293T Cell container (-80C storage) for StoreSamples" <> $SessionUUID],
            Object[Container, Vessel, "50mL tube of Methanol for USC Testing for StoreSamples" <> $SessionUUID],
            Object[Sample, "Sample 3 for StoreSamples" <> $SessionUUID],
            Object[Container, Vessel, "Vessel 1 for StoreSamples" <> $SessionUUID]
        };
        existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
        If[
            MatchQ[existingObjects, Except[Null | {}]],
            EraseObject[existingObjects, Force -> True, Verbose -> False];
        ];

        fakeBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Fake bench for StoreSamples tests" <> $SessionUUID, DeveloperObject -> True|>];

        (* generate upload packets *)
        containerUploads = UploadSample[
            {
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:3em6Zv9NjjN8"],
                Model[Container, Vessel, "id:L8kPEjnxd3nP"],
                Model[Container, Vessel, "id:bq9LA0dBGGR6"],
                Model[Item, Column, "Acquity Protein BEH C4 Column"],
                Model[Item, Column, "Acquity Protein BEH C4 Column"],
                Model[Container, Vessel, "50mL Tube"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"]
            },
            Table[{"Work Surface", fakeBench}, 10],
            Name -> {
                "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID,
                "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID,
                "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamples" <> $SessionUUID,
                "2mL Tube to Unset for Disposal for StoreSamples" <> $SessionUUID,
                "HEK293T Cell container (-80C storage) for StoreSamples" <> $SessionUUID,
                "50mL tube of Methanol for USC Testing for StoreSamples" <> $SessionUUID,
                "HPLC Column (Discarded) for StoreSamples" <> $SessionUUID,
                "HPLC Column (A1) for StoreSamples" <> $SessionUUID,
                "Vessel 1 for StoreSamples" <> $SessionUUID,
                "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID
            },
            FastTrack -> True
        ];

        sampleUploads = UploadSample[
            {
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, "Milli-Q water"],
                Model[Sample, StockSolution, "id:E8zoYveRllb5"],
                Model[Sample, StockSolution, "id:E8zoYveRllb5"],
                Model[Sample, "id:E8zoYveRlKLN"],
                Model[Sample, "id:vXl9j5qEnnRD"],
                Model[Sample, "id:M8n3rxYA6Jl5"],
                Model[Sample, StockSolution, "id:N80DNjlYwVV6"]
            },
            {
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "2mL Tube to Unset for Disposal for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]},
                {"A2", Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "HEK293T Cell container (-80C storage) for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "50mL tube of Methanol for USC Testing for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "Vessel 1 for StoreSamples" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamples" <> $SessionUUID]}
            },
            Name -> {
                "10X PBS StockSolution to Refrigerate for StoreSamples" <> $SessionUUID,
                "10X PBS StockSolution (Ambient Temp) for StoreSamples" <> $SessionUUID,
                "Water sample to Unset for Disposal for StoreSamples" <> $SessionUUID,
                "10X PBS (A1, 96-well plate) for StoreSamples" <> $SessionUUID,
                "10X PBS (A2, 96-well plate) for StoreSamples" <> $SessionUUID,
                "HEK293T Cell (-80C storage) for StoreSamples" <> $SessionUUID,
                "Methanol for USC Testing for StoreSamples" <> $SessionUUID,
                "Sample 3 for StoreSamples" <> $SessionUUID,
                "100 mM HEPES Buffer to Refrigerate for StoreSamples" <> $SessionUUID
            },
            InitialAmount -> {
                100 * Milliliter,
                100 * Milliliter,
                Null,
                Null,
                Null,
                Null,
                0.025Liter,
                Null,
                0.1Liter
            },
            StorageCondition -> {
                Model[StorageCondition, "Refrigerator"],
                Model[StorageCondition, "Ambient Storage"],
                Model[StorageCondition, "Ambient Storage"],
                Model[StorageCondition, "id:vXl9j57YlZ5N"],
                Model[StorageCondition, "id:vXl9j57YlZ5N"],
                Model[StorageCondition, "id:xRO9n3BVOe3z"],
                Model[StorageCondition, "id:vXl9j57YrPlN"],
                Model[StorageCondition, "id:GmzlKjPoJMNk"],
                Model[StorageCondition, "id:N80DNj1r04jW"]
            }
        ];

        updates = <|Object -> Object[Item, Column, "HPLC Column (Discarded) for StoreSamples" <> $SessionUUID], Status -> Discarded|>;


        (* gather all upload objects and upload them *)
        allUploads = updates;
        Upload[allUploads]
    ],
    SymbolTearDown :> {

        (* Erase all created objects *)
        Quiet[EraseObject[$CreatedObjects, Force -> True, Verbose -> False]];

        (* Unset $CreatedObjects *)
        $CreatedObjects=.;
    },
    Stubs :> {
        (* "Test user for notebook-less test protocols" *)
        $PersonID = Object[User, "id:n0k9mG8AXZP6"],
        (* Disable any email sending *)
        $EmailEnabled = False
    }
];


(* ::Subsubsection::Closed:: *)
(*StoreSamplesOptions*)


DefineTests[StoreSamplesOptions,
    {
        Example[{Basic, "Returns the options for marking a sample to be stored at Refrigerator:"},
            StoreSamplesOptions[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID], Refrigerator, OutputFormat -> List],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[{Basic, "Returns the options for marking multiple samples to be stored at different conditions:"},
            StoreSamplesOptions[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID], Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamplesOptions" <> $SessionUUID]}, {Refrigerator, Freezer}, OutputFormat -> List],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[{Basic, "Returns the options for marking a sample to be stored at it's default storage condition:"},
            StoreSamplesOptions[Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamplesOptions" <> $SessionUUID], OutputFormat -> List],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[{Basic, "Returns the options for marking multiple samples to be stored under the same condition:"},
            StoreSamplesOptions[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamplesOptions" <> $SessionUUID]}, Refrigerator, OutputFormat -> List],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[{Options, Temperature, "Returns the options for marking a specific storage temperature for a sample:"},
            StoreSamplesOptions[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID], Temperature -> 4 Celsius, OutputFormat -> List],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[{Options, OutputFormat, "Returns the options for marking a specific storage temperature for a sample as a table:"},
            StoreSamplesOptions[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID], Temperature -> 4 Celsius],
            Graphics_
        ],
        Example[{Options, OutputFormat, "Returns the options for marking a specific storage temperature for a sample as a list:"},
            StoreSamplesOptions[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID], Temperature -> 4 Celsius, OutputFormat -> List],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ]
    },
    SymbolSetUp :> Module[
        {testObjects, existingObjects, containerUploads, fakeBench, sampleUploads},

        (* Initialize $CreatedObjects *)
        $CreatedObjects = {};

        (*make sure we don't have test objects in the database *)
        testObjects = {
            Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamplesOptions" <> $SessionUUID],
            Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamplesOptions" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamplesOptions" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamplesOptions" <> $SessionUUID],
            Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamplesOptions" <> $SessionUUID],
            Object[Container, Bench, "Fake bench for StoreSamplesOptions tests" <> $SessionUUID],
            Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamplesOptions" <> $SessionUUID],
            Object[Sample, "10X PBS (A1, 96-well plate) for StoreSamplesOptions" <> $SessionUUID],
            Object[Sample, "10X PBS (A2, 96-well plate) for StoreSamplesOptions" <> $SessionUUID]
        };
        existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
        If[
            MatchQ[existingObjects, Except[Null | {}]],
            EraseObject[existingObjects, Force -> True, Verbose -> False];
        ];

        fakeBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Fake bench for StoreSamplesOptions tests" <> $SessionUUID, DeveloperObject -> True|>];

        (* generate upload packets *)
        containerUploads = UploadSample[
            {
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            },
            Table[{"Work Surface", fakeBench}, 4],
            Name -> {
                "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamplesOptions" <> $SessionUUID,
                "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamplesOptions" <> $SessionUUID,
                "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamplesOptions" <> $SessionUUID,
                "96-well Plate (10X PBS, Freeze) for StoreSamplesOptions" <> $SessionUUID
            },
            FastTrack -> True
        ];

        sampleUploads = UploadSample[
            {
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "id:N80DNjlYwVV6"],
                Model[Sample, StockSolution, "id:E8zoYveRllb5"],
                Model[Sample, StockSolution, "id:E8zoYveRllb5"]
            },
            {
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamplesOptions" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamplesOptions" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamplesOptions" <> $SessionUUID]},
                {"A1", Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamplesOptions" <> $SessionUUID]},
                {"A2", Object[Container, Plate, "96-well Plate (10X PBS, Freeze) for StoreSamplesOptions" <> $SessionUUID]}
            },
            Name -> {
                "10X PBS StockSolution to Refrigerate for StoreSamplesOptions" <> $SessionUUID,
                "10X PBS StockSolution (Ambient Temp) for StoreSamplesOptions" <> $SessionUUID,
                "100 mM HEPES Buffer to Refrigerate for StoreSamplesOptions" <> $SessionUUID,
                "10X PBS (A1, 96-well plate) for StoreSamplesOptions" <> $SessionUUID,
                "10X PBS (A2, 96-well plate) for StoreSamplesOptions" <> $SessionUUID
            },
            InitialAmount -> {
                100 * Milliliter,
                100 * Milliliter,
                0.1Liter,
                Null,
                Null
            },
            StorageCondition -> {
                Model[StorageCondition, "Refrigerator"],
                Model[StorageCondition, "Ambient Storage"],
                Model[StorageCondition, "id:N80DNj1r04jW"],
                Model[StorageCondition, "id:vXl9j57YlZ5N"],
                Model[StorageCondition, "id:vXl9j57YlZ5N"]
            }
        ];
    ],
    SymbolTearDown :> {

        (* Erase all created objects *)
        EraseObject[$CreatedObjects, Force -> True, Verbose -> False];

        (* Unset $CreatedObjects *)
        $CreatedObjects=.;
    },
    Stubs :> {
        (* "Test user for notebook-less test protocols" *)
        $PersonID = Object[User, "id:n0k9mG8AXZP6"],
        (* Disable any email sending *)
        $EmailEnabled = False
    }
];


(* ::Subsubsection::Closed:: *)
(*ValidStoreSamplesQ*)


DefineTests[ValidStoreSamplesQ,
    {
        Example[{Basic, "Returns the options for marking a sample to be stored at Refrigerator:"},
            ValidStoreSamplesQ[Object[Sample, "10X PBS StockSolution to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID], Refrigerator],
            True
        ],
        Example[{Basic, "Returns the options for marking a sample to be stored at it's default storage condition:"},
            ValidStoreSamplesQ[Object[Sample, "10X PBS StockSolution (Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Returns the options for marking multiple samples to be stored under the same condition:"},
            ValidStoreSamplesQ[{Object[Sample, "10X PBS StockSolution to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID]}, Refrigerator],
            True
        ],
        Example[{Options, Temperature, "Returns the options for marking a specific storage temperature for a sample:"},
            ValidStoreSamplesQ[Object[Sample, "10X PBS StockSolution to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID], Temperature -> 4 Celsius],
            True
        ],
        Example[{Options, Verbose, "Returns the options for marking a sample to be stored at it's default storage condition:"},
            ValidStoreSamplesQ[Object[Sample, "10X PBS StockSolution (Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID], Verbose -> True],
            True
        ],
        Example[{Options, OutputFormat, "Returns the options for marking a sample to be stored at it's default storage condition:"},
            ValidStoreSamplesQ[Object[Sample, "10X PBS StockSolution (Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID], OutputFormat -> TestSummary],
            _EmeraldTestSummary
        ]
    },
    SymbolSetUp :> Module[
        {testObjects, existingObjects, containerUploads, fakeBench, sampleUploads},

        (* Initialize $CreatedObjects *)
        $CreatedObjects = {};

        (*make sure we don't have test objects in the database *)
        testObjects = {
            Object[Sample, "10X PBS StockSolution to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for ValidStoreSamplesQ" <> $SessionUUID],
            Object[Sample, "10X PBS StockSolution (Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for ValidStoreSamplesQ" <> $SessionUUID],
            Object[Sample, "100 mM HEPES Buffer to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID],
            Object[Container, Bench, "Fake bench for ValidStoreSamplesQ tests" <> $SessionUUID]
        };
        existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
        If[
            MatchQ[existingObjects, Except[Null | {}]],
            EraseObject[existingObjects, Force -> True, Verbose -> False];
        ];

        fakeBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Fake bench for ValidStoreSamplesQ tests" <> $SessionUUID, DeveloperObject -> True|>];

        (* generate upload packets *)
        containerUploads = UploadSample[
            {
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"]
            },
            Table[{"Work Surface", fakeBench}, 3],
            Name -> {
                "1L Glass Bottle (10X PBS, Refrigerate) for ValidStoreSamplesQ" <> $SessionUUID,
                "1L Glass Bottle (10X PBS, Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID,
                "1L Glass Bottle (100 mM HEPES, Refrigerate) for ValidStoreSamplesQ" <> $SessionUUID
            },
            FastTrack -> True
        ];

        sampleUploads = UploadSample[
            {
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "id:N80DNjlYwVV6"]
            },
            {
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for ValidStoreSamplesQ" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for ValidStoreSamplesQ" <> $SessionUUID]}
            },
            Name -> {
                "10X PBS StockSolution to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID,
                "10X PBS StockSolution (Ambient Temp) for ValidStoreSamplesQ" <> $SessionUUID,
                "100 mM HEPES Buffer to Refrigerate for ValidStoreSamplesQ" <> $SessionUUID
            },
            InitialAmount -> {
                100 * Milliliter,
                100 * Milliliter,
                0.1Liter
            },
            StorageCondition -> {
                Model[StorageCondition, "Refrigerator"],
                Model[StorageCondition, "Ambient Storage"],
                Model[StorageCondition, "id:N80DNj1r04jW"]
            }
        ];
    ],
    SymbolTearDown :> {

        (* Erase all created objects *)
        EraseObject[$CreatedObjects, Force -> True, Verbose -> False];

        (* Unset $CreatedObjects *)
        $CreatedObjects=.;
    },
    Stubs :> {
        (* "Test user for notebook-less test protocols" *)
        $PersonID = Object[User, "id:n0k9mG8AXZP6"],
        (* Disable any email sending *)
        $EmailEnabled = False
    }
];


(* ::Subsubsection::Closed:: *)
(*StoreSamplesPreview*)


DefineTests[StoreSamplesPreview,
    {
        Example[{Basic, "Returns preview for marking a sample to be stored at Refrigerator:"},
            StoreSamplesPreview[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesPreview" <> $SessionUUID], Refrigerator],
            Null
        ],
        Example[{Basic, "Returns preview for marking a sample to be stored at it's default storage condition:"},
            StoreSamplesPreview[Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamplesPreview" <> $SessionUUID]],
            Null
        ],
        Example[{Basic, "Returns preview for marking multiple samples to be stored under the same condition:"},
            StoreSamplesPreview[{Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesPreview" <> $SessionUUID], Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamplesPreview" <> $SessionUUID]}, Refrigerator],
            Null
        ],
        Example[{Options, Temperature, "Returns the options for marking a specific storage temperature for a sample:"},
            StoreSamplesPreview[Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesPreview" <> $SessionUUID], Temperature -> 4 Celsius],
            Null
        ]
    },
    SymbolSetUp :> Module[
        {testObjects, existingObjects, containerUploads, fakeBench, sampleUploads},

        (* Initialize $CreatedObjects *)
        $CreatedObjects = {};

        (*make sure we don't have test objects in the database *)
        testObjects = {
            Object[Sample, "10X PBS StockSolution to Refrigerate for StoreSamplesPreview" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamplesPreview" <> $SessionUUID],
            Object[Sample, "10X PBS StockSolution (Ambient Temp) for StoreSamplesPreview" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamplesPreview" <> $SessionUUID],
            Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamplesPreview" <> $SessionUUID],
            Object[Sample, "100 mM HEPES Buffer to Refrigerate for StoreSamplesPreview" <> $SessionUUID],
            Object[Container, Bench, "Fake bench for StoreSamplesPreview tests" <> $SessionUUID]
        };
        existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
        If[
            MatchQ[existingObjects, Except[Null | {}]],
            EraseObject[existingObjects, Force -> True, Verbose -> False];
        ];

        fakeBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Fake bench for StoreSamplesPreview tests" <> $SessionUUID, DeveloperObject -> True|>];

        (* generate upload packets *)
        containerUploads = UploadSample[
            {
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"],
                Model[Container, Vessel, "id:zGj91aR3ddXJ"]
            },
            Table[{"Work Surface", fakeBench}, 3],
            Name -> {
                "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamplesPreview" <> $SessionUUID,
                "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamplesPreview" <> $SessionUUID,
                "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamplesPreview" <> $SessionUUID
            },
            FastTrack -> True
        ];

        sampleUploads = UploadSample[
            {
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "10x PBS"],
                Model[Sample, StockSolution, "id:N80DNjlYwVV6"]
            },
            {
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Refrigerate) for StoreSamplesPreview" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (10X PBS, Ambient Temp) for StoreSamplesPreview" <> $SessionUUID]},
                {"A1", Object[Container, Vessel, "1L Glass Bottle (100 mM HEPES, Refrigerate) for StoreSamplesPreview" <> $SessionUUID]}
            },
            Name -> {
                "10X PBS StockSolution to Refrigerate for StoreSamplesPreview" <> $SessionUUID,
                "10X PBS StockSolution (Ambient Temp) for StoreSamplesPreview" <> $SessionUUID,
                "100 mM HEPES Buffer to Refrigerate for StoreSamplesPreview" <> $SessionUUID
            },
            InitialAmount -> {
                100 * Milliliter,
                100 * Milliliter,
                0.1Liter
            },
            StorageCondition -> {
                Model[StorageCondition, "Refrigerator"],
                Model[StorageCondition, "Ambient Storage"],
                Model[StorageCondition, "id:N80DNj1r04jW"]
            }
        ];
    ],
    SymbolTearDown :> {

        (* Erase all created objects *)
        EraseObject[$CreatedObjects, Force -> True, Verbose -> False];

        (* Unset $CreatedObjects *)
        $CreatedObjects=.;
    },
    Stubs :> {
        (* "Test user for notebook-less test protocols" *)
        $PersonID = Object[User, "id:n0k9mG8AXZP6"],
        (* Disable any email sending *)
        $EmailEnabled = False
    }
];

DefineTests[ClearSampleStorageSchedule,
    {
        (* --- Basic --- *)
        Example[{Basic, "Clear all StorageSchedule of a non-self-standing sample and its container with all the container's contents:"},
            ClearSampleStorageSchedule[Object[Sample, "ClearSampleStorageSchedule testing sample 1 in -80"]];
            Download[{
                Object[Container, Plate, "ClearSampleStorageSchedule testing container in -80"],
                Object[Sample, "ClearSampleStorageSchedule testing sample 1 in -80"],
                Object[Sample, "ClearSampleStorageSchedule testing sample 2 in -80"],
                Object[Sample, "ClearSampleStorageSchedule testing sample 3 in -80"]
            },
                StorageSchedule],
            {{}, {}, {}, {}},
            SetUp :> {
                Module[{myObjs, updatePkts, protPkt},
                    myObjs = {
                        Object[Container, Plate, "ClearSampleStorageSchedule testing container in -80"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample 1 in -80"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample 2 in -80"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample 3 in -80"]
                    };
                    updatePkts = Map[
                        <|
                            Object -> #,
                            AwaitingStorageUpdate -> True,
                            StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                            Replace[StorageSchedule] -> {
                                {DateObject[{2021, 4, 14, 13, 41, 19.}], Link[Model[StorageCondition, "Ambient Storage"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]},
                                {DateObject[{2021, 4, 15, 12, 41, 19.}], Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]},
                                {DateObject[{2021, 4, 16, 12, 41, 19.}], Link[Model[StorageCondition, "id:xRO9n3BVOe3z"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]}
                            },
                            Replace[DisposalLog] -> {}
                        |>&, myObjs
                    ];
                    protPkt = <|Object -> Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"], Status -> Processing, OperationStatus -> OperatorStart|>;
                    Upload[Flatten[{updatePkts, protPkt}]]
                ];
            }
        ],
        Example[{Basic, "Clear StorageSchedule for multiple inputs:"},
            ClearSampleStorageSchedule[{
                Object[Sample, "ClearSampleStorageSchedule testing sample 1 in -80"],
                Object[Container, Vessel, "ClearSampleStorageSchedule testing container cold"]
            }];
            Download[{
                Object[Container, Plate, "ClearSampleStorageSchedule testing container in -80"],
                Object[Sample, "ClearSampleStorageSchedule testing sample 1 in -80"],
                Object[Sample, "ClearSampleStorageSchedule testing sample 2 in -80"],
                Object[Sample, "ClearSampleStorageSchedule testing sample 3 in -80"],
                Object[Container, Vessel, "ClearSampleStorageSchedule testing container cold"],
                Object[Sample, "ClearSampleStorageSchedule testing sample cold"]
            }, StorageSchedule],
            {{}..},
            SetUp :> {
                Module[{myObjs, updatePkts, protPkt},
                    myObjs = {
                        Object[Container, Plate, "ClearSampleStorageSchedule testing container in -80"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample 1 in -80"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample 2 in -80"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample 3 in -80"],
                        Object[Container, Vessel, "ClearSampleStorageSchedule testing container cold"],
                        Object[Sample, "ClearSampleStorageSchedule testing sample cold"]
                    };
                    updatePkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            AwaitingStorageUpdate -> True,
                            StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                            Replace[StorageSchedule] -> {
                                {DateObject[{2021, 4, 14, 13, 41, 19.}], Link[Model[StorageCondition, "Ambient Storage"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]},
                                {DateObject[{2021, 4, 15, 12, 41, 19.}], Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]},
                                {DateObject[{2021, 4, 16, 12, 41, 19.}], Link[Model[StorageCondition, "id:xRO9n3BVOe3z"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]}
                            },
                            Replace[DisposalLog] -> {}
                        |>&, myObjs
                    ];
                    protPkt = <|Object -> Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"], Status -> Processing, OperationStatus -> OperatorStart|>;
                    Upload[Flatten[{updatePkts, protPkt}]]
                ];
            }
        ],

        Example[{Additional, "Cancels Object[Maintenance,StorageUpdate] only if its ScheduledMoves contain solely the inputs of ClearSampleStorageSchedule:"},
            ClearSampleStorageSchedule[Object[Sample, "ClearSampleStorageSchedule testing sample RT"]];
            {
                Object[Sample, "ClearSampleStorageSchedule testing sample RT"][StorageSchedule],
                Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing only input samples"][Status],
                Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"][Status]
            },
            {{}, Canceled, Processing},
            SetUp :> {
                Module[{myObjs, updatePkts, protUpdatePkts},
                    myObjs = {Object[Sample, "ClearSampleStorageSchedule testing sample RT"], Object[Container, Vessel, "ClearSampleStorageSchedule testing container RT"]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            Status -> Available,
                            AwaitingStorageUpdate -> True,
                            StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                            Replace[StorageSchedule] -> {
                                {DateObject[{2021, 4, 15, 12, 41, 19.}], Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing only input samples"]]},
                                {DateObject[{2021, 4, 16, 12, 41, 19.}], Link[Model[StorageCondition, "id:xRO9n3BVOe3z"]], Link[Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]]},
                                {Null, Link[Model[StorageCondition, "Ambient Storage"]], Link[Object[User, Emerald, Developer, "id:kEJ9mqRx5Yo3"]]}
                            },
                            Replace[DisposalLog] -> {}
                        |>&, myObjs
                    ];
                    protUpdatePkts = <|
                        Object -> #, Status -> Processing, OperationStatus -> OperatorStart
                    |>& /@ {Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing only input samples"], Object[Maintenance, StorageUpdate, "Enqueued StorageUpdate protocol containing input samples and other samples"]};
                    Upload[Join[updatePkts, protUpdatePkts]]
                ]
            }
        ],
        Example[{Messages, "TooLateToCancelMaintenanceStorageUpdate", "Throw a warning when the StorageUpdate protocol is already running:"},
            ClearSampleStorageSchedule[Object[Sample, "ClearSampleStorageSchedule testing sample RT"]];
            Download[
                {Object[Sample, "ClearSampleStorageSchedule testing sample RT"], Object[Container, Vessel, "ClearSampleStorageSchedule testing container RT"]},
                {StorageSchedule, StorageCondition, AwaitingStorageUpdate}
            ],
            {
                {
                    {{_, LinkP[Model[StorageCondition, "Ambient Storage"]], LinkP[Object[Maintenance, StorageUpdate, "Processing StorageUpdate protocol unable to cancel"]]}},
                    LinkP[Model[StorageCondition, "Ambient Storage"]],
                    True
                },
                {
                    {{_, LinkP[Model[StorageCondition, "Ambient Storage"]], LinkP[Object[Maintenance, StorageUpdate, "Processing StorageUpdate protocol unable to cancel"]]}},
                    LinkP[Model[StorageCondition, "Ambient Storage"]],
                    True
                }
            },
            Messages :> {Warning::TooLateToCancelMaintenanceStorageUpdate},
            SetUp :> {
                Module[{myObjs, updatePkts},
                    myObjs = {Object[Sample, "ClearSampleStorageSchedule testing sample RT"], Object[Container, Vessel, "ClearSampleStorageSchedule testing container RT"]};
                    updatePkts = Map[
                        <|
                            Object -> #,
                            Status -> Available,
                            AwaitingStorageUpdate -> True,
                            StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                            Replace[StorageSchedule] -> {
                                {DateObject[{2021, 4, 14, 13, 41, 19.}], Link[Model[StorageCondition, "Ambient Storage"]], Link[Object[Maintenance, StorageUpdate, "Processing StorageUpdate protocol unable to cancel"]]},
                                {DateObject[{2021, 4, 15, 12, 41, 19.}], Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Link[Object[User, Emerald, Developer, "id:kEJ9mqRx5Yo3"]]},
                                {DateObject[{2021, 4, 16, 12, 41, 19.}], Link[Model[StorageCondition, "id:xRO9n3BVOe3z"]], Link[Object[User, Emerald, Developer, "id:kEJ9mqRx5Yo3"]]}
                            },
                            Replace[DisposalLog] -> {}
                        |>&, myObjs
                    ];
                    Upload[updatePkts]
                ]
            }
        ]
    }

];


(* ::Subsection:: *)
(*DiscardSamples*)


(* ::Subsubsection:: *)
(*DiscardSamples*)


DefineTests[DiscardSamples,
    {
        Example[{Basic, "Mark a sample for disposal; it and its container will be discarded once they are not in use by any experiment:"},
            DiscardSamples[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]],
            {OrderlessPatternSequence[ObjectReferenceP[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]]]}
        ],
        Example[{Basic, "Mark a plate for disposal; all samples within the container will be discarded:"},
            DiscardSamples[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID]],
            {OrderlessPatternSequence[ObjectReferenceP[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]]]}
        ],
        Example[{Basic, "Mark multiple samples for disposal:"},
            DiscardSamples[{Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]}],
            {OrderlessPatternSequence[
                ObjectReferenceP[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID]],
                ObjectReferenceP[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]]
            ]}
        ],
        Example[{Additional, "Mark multiple containers for disposal; all samples within the containers are also marked for disposal:"},
            DiscardSamples[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]}],
            {
                OrderlessPatternSequence[
                    ObjectReferenceP[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]],
                    ObjectReferenceP[Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]],
                    ObjectReferenceP[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]]
                ]
            }
        ],
        Example[{Additional, "Mark a mixed list of samples and containers for disposal:"},
            DiscardSamples[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]}],
            {OrderlessPatternSequence[
                ObjectReferenceP[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]],
                ObjectReferenceP[Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]],
                ObjectReferenceP[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]]
            ]}
        ],
        Example[{Additional, "Marking a sample for disposal marks both the sample and its container as AwaitingDisposal:"},
            DiscardSamples[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]];
            Download[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID], {AwaitingDisposal, Container[AwaitingDisposal]}],
            {True, True}
        ],
        Example[{Options, DiscardContainer, "Indicate that the container of a fluid sample should be thrown out:"},
            DiscardSamples[Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID], DiscardContainer -> True];
            Download[Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID], {Container[AwaitingDisposal], Container[Reusable], Container[Model][Reusability]}],
            {True, False, True}
        ],
        Example[{Options, DiscardContainer, "Normally, if a container is marked as reusable in its Model, discarding it will direct it to be dishwashed and restocked:"},
            DiscardSamples[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID]];
            Download[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID], {AwaitingDisposal, Reusable, Model[Reusability]}],
            {True, True, True}
        ],
        Example[{Options, DiscardContainer, "Set DiscardContainer to True to indicate that a normally reusable container should no longer be considered reusable, and be thrown out instead of dishwashed:"},
            DiscardSamples[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID], DiscardContainer -> True];
            Download[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID], {AwaitingDisposal, Reusable, Model[Reusability]}],
            {True, False, True}
        ],
        Example[{Options, DiscardContainer, "If a container is marked as non-reusable, discarding it will direct it to be thrown out:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID], Model[Reusability]],
                DiscardSamples[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]]
            },
            {False, {ObjectReferenceP[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]]}}
        ],
        Example[{Options, DiscardContainer, "Non-reusable containers must always be thrown out; DiscardContainer cannot be set to False:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID], Model[Reusability]],
                DiscardSamples[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID], DiscardContainer -> False]
            },
            {False, $Failed},
            Messages :> {Error::ContainerDiscardRequired, Error::InvalidOption}
        ],
        Example[{Messages, "InputLengthMismatch", "If DiscardContainer is provided as a list, the list must have the same length as the input list:"},
            DiscardSamples[{Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID]}, DiscardContainer -> {True, Automatic}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "ItemsContainerless", "The DiscardContainer option will be ignored for items that are not moved around the lab inside an associated container:"},
            DiscardSamples[Object[Item, Column, "Column to Dispose for DiscardSamples tests" <> $SessionUUID], DiscardContainer -> True],
            {ObjectReferenceP[Object[Item, Column, "Column to Dispose for DiscardSamples tests" <> $SessionUUID]]},
            Messages :> {Warning::ItemsContainerless}
        ],
        Example[{Messages, "ContainerDiscardRequired", "Samples in non-reusable containers must be discarded along with their containers; DiscardContainer cannot be set to False:"},
            DiscardSamples[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID], DiscardContainer -> False],
            $Failed,
            Messages :> {Error::ContainerDiscardRequired, Error::InvalidOption}
        ],
        Example[{Messages, "DiscardedInputs", "Samples already discarded cannot be discarded again:"},
            DiscardSamples[Object[Sample, "Discarded Water in 2mL Tube"]],
            $Failed,
            Messages :> {Error::DiscardedInputs, Error::InvalidInput}
        ],
        Example[{Messages, "OutstandingResources", "A warning is thrown is samples with outstanding resources are discarded; the samples will not actually be discarded until the outstanding resources are fulfilled:"},
            DiscardSamples[Object[Sample, "Water in 2mL Tube with Outstanding Resource"]],
            {OrderlessPatternSequence[ObjectReferenceP[Object[Sample, "Water in 2mL Tube with Outstanding Resource"]], ObjectReferenceP[Object[Container, Vessel, "id:n0k9mG8AmaG4"]]]},
            Messages :> {Warning::OutstandingResources}
        ],
        Example[{Messages, "ConflictingConditionsInContainer", "If not all samples within the same container are provided, an error is thrown, as partial containers cannot be discarded:"},
            DiscardSamples[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]],
            $Failed,
            Messages :> {Error::ConflictingConditionsInContainer, Error::InvalidInput}
        ],
        (****************************************TESTS ********************************)
        Test["When Output -> Tests, return a list of tests checking all messages:",
            DiscardSamples[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]}, Output -> Tests],
            {__EmeraldTest}
        ],
        Test["When Output -> Preview, return Null:",
            DiscardSamples[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]}, Output -> Preview],
            Null
        ],
        Test["When Output -> Options, return a list of non-hidden options:",
            DiscardSamples[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]}, Output -> Options],
            {DiscardContainer -> True}
        ],
        Test["When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            DiscardSamples[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            {
                {__EmeraldTest},
                Null,
                {DiscardContainer -> True},
                {
                    OrderlessPatternSequence[
                        ObjectReferenceP[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]],
                        ObjectReferenceP[Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]],
                        ObjectReferenceP[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]]
                    ]
                }
            }
        ],
        Test["Specify a container and its contents and DiscardSamples should still work:",
            DiscardSamples[{Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID], Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]}],
            {OrderlessPatternSequence[ObjectReferenceP[Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID]]]}
        ],
        Test["Specify a SelfContainedSample to test DiscardSamples:",
            DiscardSamples[Object[Item, Needle, "Test Needle to test DiscardSamples for DiscardSamples tests" <> $SessionUUID]],
            {OrderlessPatternSequence[ObjectReferenceP[Object[Item, Needle, "Test Needle to test DiscardSamples for DiscardSamples tests" <> $SessionUUID]]]}
        ]
    },
    SetUp :> (
        Upload[{
            <|
                Object -> Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Column, "Column to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {},
                Reusable -> True
            |>,
            <|
                Object -> Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Needle, "Test Needle to test DiscardSamples for DiscardSamples tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>

        }]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test DiscardSamples for DiscardSamples tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];
        Module[{testBench, plate1, vessel1, vessel2, sample1, sample2, sample3, sample4, column1, needle1},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for DiscardSamples tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                plate1,
                vessel1,
                vessel2,
                column1,
                needle1
            } = UploadSample[
                {
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "250mL Glass Bottle"],
                    Model[Item, Column, "HiTrap Q HP 5x1mL Column"],
                    Model[Item, Needle, "Reusable Stainless Steel Non-Coring 12 in x 18G Needle"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "Column to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "Test Needle to test DiscardSamples for DiscardSamples tests" <> $SessionUUID
                }
            ];

            {
                sample1,
                sample2,
                sample3,
                sample4
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", plate1},
                    {"A2", plate1},
                    {"A1", vessel1},
                    {"A1", vessel2}
                },
                Name -> {
                    "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID,
                    "Water in Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter,
                    1 Milliliter,
                    100 Milliliter
                },
                FastTrack -> True
            ];
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamples tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test DiscardSamples for DiscardSamples tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ]
    )
];


(* ::Subsubsection::Closed:: *)
(*DiscardSamplesOptions*)


DefineTests[DiscardSamplesOptions,
    {
        Example[{Basic, "Returns all options for: Mark a sample for disposal; it and its container will be discarded once they are not in use by any experiment:"},
            DiscardSamplesOptions[Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]],
            Graphics_
        ],
        Example[{Basic, "Returns all options for: Mark a plate for disposal; all samples within the container will be discarded:"},
            DiscardSamplesOptions[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]],
            Graphics_
        ],
        Example[{Basic, "Returns all options for: Mark multiple samples for disposal:"},
            DiscardSamplesOptions[{Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}],
            Graphics_
        ],
        Example[{Additional, "Returns all options for: Mark multiple containers for disposal; all samples within the containers are also marked for disposal:"},
            DiscardSamplesOptions[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}, OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        Example[{Additional, "Returns all options for: Mark a mixed list of samples and containers for disposal:"},
            DiscardSamplesOptions[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}],
            Graphics_
        ],
        Example[{Additional, "Returns all options for: Marking a sample for disposal marks both the sample and its container as AwaitingDisposal:"},
            DiscardSamplesOptions[Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        (* Options *)
        Example[
            {Options, OutputFormat, "Choose to return options as a List or Table:"},
            DiscardSamplesOptions[Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {RulesP..}
        ],
        Example[{Options, DiscardContainer, "Returns all options for: Indicate that the container of a fluid sample should be thrown out:"},
            DiscardSamplesOptions[Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], DiscardContainer -> True, OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        Example[{Options, DiscardContainer, "Returns all options for: Normally, if a container is marked as reusable in its Model, discarding it will direct it to be dishwashed and restocked:"},
            DiscardSamplesOptions[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {DiscardContainer -> False},
            TimeConstraint -> 300
        ],
        Example[{Options, DiscardContainer, "Returns all options for: Set DiscardContainer to True to indicate that a normally reusable container should no longer be considered reusable, and be thrown out instead of dishwashed:"},
            DiscardSamplesOptions[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], DiscardContainer -> True, OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        Example[{Options, DiscardContainer, "Returns all options for: If a container is marked as non-reusable, discarding it will direct it to be thrown out:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Model[Reusability]],
                DiscardSamplesOptions[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], OutputFormat -> List]
            },
            {False, {DiscardContainer -> True}}
        ],
        Example[{Options, DiscardContainer, "Returns all options for: Non-reusable containers must always be thrown out; DiscardContainer cannot be set to False:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Model[Reusability]],
                DiscardSamplesOptions[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], DiscardContainer -> False, OutputFormat -> List]
            },
            {False, {DiscardContainer -> False}},
            Messages :> {Error::ContainerDiscardRequired, Error::InvalidOption}
        ],
        Example[{Messages, "InputLengthMismatch", "Returns Error if DiscardContainer is provided as a list, the list must have the same length as the input list:"},
            DiscardSamplesOptions[{Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}, DiscardContainer -> {True, Automatic}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "ItemsContainerless", "Returns all options for: The DiscardContainer option will be ignored for items that are not moved around the lab inside an associated container:"},
            DiscardSamplesOptions[Object[Item, Column, "Column to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], DiscardContainer -> True],
            Graphics_,
            Messages :> {Warning::ItemsContainerless}
        ],
        Example[{Messages, "ContainerDiscardRequired", "Returns all options for when Samples in non-reusable containers must be discarded along with their containers; DiscardContainer cannot be set to False:"},
            DiscardSamplesOptions[Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], DiscardContainer -> False],
            Graphics_,
            Messages :> {Error::ContainerDiscardRequired, Error::InvalidOption}
        ],
        Example[{Messages, "DiscardedInputs", "Returns all options for when Samples already discarded cannot be discarded again:"},
            DiscardSamplesOptions[Object[Sample, "Discarded Water in 2mL Tube"]],
            Graphics_,
            Messages :> {Error::DiscardedInputs, Error::InvalidInput}
        ],
        Example[{Messages, "OutstandingResources", "Returns all options for: samples with outstanding resources are discarded; the samples will not actually be discarded until the outstanding resources are fulfilled:"},
            DiscardSamplesOptions[Object[Sample, "Water in 2mL Tube with Outstanding Resource"]],
            Graphics_,
            Messages :> {Warning::OutstandingResources}
        ],
        Example[{Messages, "ConflictingConditionsInContainer", "Returns all options for when not all samples within the same container are provided:"},
            DiscardSamplesOptions[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]],
            Graphics_,
            Messages :> {Error::ConflictingConditionsInContainer, Error::InvalidInput}
        ],
        (****************************************TESTS ********************************)
        Test["Returns all options for: When Output -> Tests, return a list of tests checking all messages:",
            DiscardSamplesOptions[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}, Output -> Tests, OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        Test["Returns all options for: When Output -> Preview, return Null:",
            DiscardSamplesOptions[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}, Output -> Preview, OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        Test["Returns all options for: When Output -> Options, return a list of options:",
            DiscardSamplesOptions[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}, Output -> Options, OutputFormat -> List],
            {DiscardContainer -> True}
        ],
        Test["Returns all options for: When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            DiscardSamplesOptions[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}, OutputFormat -> List],
            {DiscardContainer -> True},
            TimeConstraint -> 200
        ]
    },
    SetUp :> (
        Upload[{
            <|
                Object -> Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Column, "Column to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {},
                Reusable -> True
            |>,
            <|
                Object -> Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Needle, "Test Needle to test DiscardSamplesOptions for DiscardSamplesOptions tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>

        }]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test DiscardSamplesOptions for DiscardSamplesOptions tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];
        Module[{testBench, plate1, vessel1, vessel2, sample1, sample2, sample3, sample4, column1, needle1},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for DiscardSamplesOptions tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                plate1,
                vessel1,
                vessel2,
                column1,
                needle1
            } = UploadSample[
                {
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "250mL Glass Bottle"],
                    Model[Item, Column, "HiTrap Q HP 5x1mL Column"],
                    Model[Item, Needle, "Reusable Stainless Steel Non-Coring 12 in x 18G Needle"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "Column to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "Test Needle to test DiscardSamplesOptions for DiscardSamplesOptions tests" <> $SessionUUID
                }
            ];

            {
                sample1,
                sample2,
                sample3,
                sample4
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", plate1},
                    {"A2", plate1},
                    {"A1", vessel1},
                    {"A1", vessel2}
                },
                Name -> {
                    "Water Sample in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "Water Sample 2 in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID,
                    "Water in Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter,
                    1 Milliliter,
                    100 Milliliter
                },
                FastTrack -> True
            ];
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesOptions tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test DiscardSamplesOptions for DiscardSamplesOptions tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ]
    )
];


(* ::Subsubsection::Closed:: *)
(*DiscardSamplesPreview*)


DefineTests[DiscardSamplesPreview,
    {
        Example[{Basic, "Returns Preview for: Mark a sample for disposal; it and its container will be discarded once they are not in use by any experiment:"},
            DiscardSamplesPreview[Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Basic, "Returns Preview for: Mark a plate for disposal; all samples within the container will be discarded:"},
            DiscardSamplesPreview[Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Basic, "Returns Preview for: Mark multiple samples for disposal:"},
            DiscardSamplesPreview[{Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Additional, "Returns Preview for: Mark multiple containers for disposal; all samples within the containers are also marked for disposal:"},
            DiscardSamplesPreview[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Additional, "Returns Preview for: Mark a mixed list of samples and containers for disposal:"},
            DiscardSamplesPreview[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Additional, "Returns Preview for: Marking a sample for disposal marks both the sample and its container as AwaitingDisposal:"},
            DiscardSamplesPreview[Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Options, DiscardContainer, "Returns Preview for: Indicate that the container of a fluid sample should be thrown out:"},
            DiscardSamplesPreview[Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], DiscardContainer -> True],
            Null
        ],
        Example[{Options, DiscardContainer, "Returns Preview for: Normally, if a container is marked as reusable in its Model, discarding it will direct it to be dishwashed and restocked:"},
            DiscardSamplesPreview[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Options, DiscardContainer, "Returns Preview for: Set DiscardContainer to True to indicate that a normally reusable container should no longer be considered reusable, and be thrown out instead of dishwashed:"},
            DiscardSamplesPreview[Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], DiscardContainer -> True],
            Null
        ],
        Example[{Options, DiscardContainer, "Returns Preview for: If a container is marked as non-reusable, discarding it will direct it to be thrown out:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Model[Reusability]],
                DiscardSamplesPreview[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]]
            },
            {False, Null}
        ],
        Example[{Options, DiscardContainer, "Returns Preview for: Non-reusable containers must always be thrown out; DiscardContainer cannot be set to False:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Model[Reusability]],
                DiscardSamplesPreview[Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], DiscardContainer -> False]
            },
            {False, Null},
            Messages :> {Error::ContainerDiscardRequired, Error::InvalidOption}
        ],
        Example[{Messages, "InputLengthMismatch", "Returns Error if DiscardContainer is provided as a list, the list must have the same length as the input list:"},
            DiscardSamplesPreview[{Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}, DiscardContainer -> {True, Automatic}],
            Null,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "ItemsContainerless", "Returns Preview for: The DiscardContainer option will be ignored for items that are not moved around the lab inside an associated container:"},
            DiscardSamplesPreview[Object[Item, Column, "Column to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], DiscardContainer -> True],
            Null,
            Messages :> {Warning::ItemsContainerless}
        ],
        Example[{Messages, "ContainerDiscardRequired", "Returns Preview for when Samples in non-reusable containers must be discarded along with their containers; DiscardContainer cannot be set to False:"},
            DiscardSamplesPreview[Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], DiscardContainer -> False],
            Null,
            Messages :> {Error::ContainerDiscardRequired, Error::InvalidOption}
        ],
        Example[{Messages, "DiscardedInputs", "Returns Preview for when Samples already discarded cannot be discarded again:"},
            DiscardSamplesPreview[Object[Sample, "Discarded Water in 2mL Tube"]],
            Null,
            Messages :> {Error::DiscardedInputs, Error::InvalidInput}
        ],
        Example[{Messages, "OutstandingResources", "Returns Preview for samples with outstanding resources are discarded; the samples will not actually be discarded until the outstanding resources are fulfilled:"},
            DiscardSamplesPreview[Object[Sample, "Water in 2mL Tube with Outstanding Resource"]],
            Null,
            Messages :> {Warning::OutstandingResources}
        ],
        Example[{Messages, "ConflictingConditionsInContainer", "Returns Preview for when not all samples within the same container are provided:"},
            DiscardSamplesPreview[Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]],
            Null,
            Messages :> {Error::ConflictingConditionsInContainer, Error::InvalidInput}
        ],
        (****************************************TESTS ********************************)
        Test["Returns Preview for When Output -> Tests, return a list of tests checking all messages:",
            DiscardSamplesPreview[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}, Output -> Tests],
            Null
        ],
        Test["Returns Preview for When Output -> Preview, return Null:",
            DiscardSamplesPreview[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}, Output -> Preview],
            Null
        ],
        Test["Returns Preview for When Output -> Options, return a list of options:",
            DiscardSamplesPreview[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}, Output -> Options],
            Null
        ],
        Test["Returns Preview for When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            DiscardSamplesPreview[{Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            Null
        ]
    },
    SetUp :> (
        Upload[{
            <|
                Object -> Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Column, "Column to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {},
                Reusable -> True
            |>,
            <|
                Object -> Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Needle, "Test Needle to test DiscardSamplesPreview for DiscardSamplesPreview tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>

        }]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test DiscardSamplesPreview for DiscardSamplesPreview tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];
        Module[{testBench, plate1, vessel1, vessel2, sample1, sample2, sample3, sample4, column1, needle1},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for DiscardSamplesPreview tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                plate1,
                vessel1,
                vessel2,
                column1,
                needle1
            } = UploadSample[
                {
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "250mL Glass Bottle"],
                    Model[Item, Column, "HiTrap Q HP 5x1mL Column"],
                    Model[Item, Needle, "Reusable Stainless Steel Non-Coring 12 in x 18G Needle"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "Column to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "Test Needle to test DiscardSamplesPreview for DiscardSamplesPreview tests" <> $SessionUUID
                }
            ];

            {
                sample1,
                sample2,
                sample3,
                sample4
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", plate1},
                    {"A2", plate1},
                    {"A1", vessel1},
                    {"A1", vessel2}
                },
                Name -> {
                    "Water Sample in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "Water Sample 2 in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID,
                    "Water in Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter,
                    1 Milliliter,
                    100 Milliliter
                },
                FastTrack -> True
            ];
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for DiscardSamplesPreview tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test DiscardSamplesPreview for DiscardSamplesPreview tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ]
    )
];


(* ::Subsubsection::Closed:: *)
(*ValidDiscardSamplesQ*)


DefineTests[ValidDiscardSamplesQ,
    {
        Example[{Basic, "Check the validity of the DiscardSamples call to: Mark a sample for disposal; it and its container will be discarded once they are not in use by any experiment:"},
            ValidDiscardSamplesQ[Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Check the validity of the DiscardSamples call to: Mark a plate for disposal; all samples within the container will be discarded:"},
            ValidDiscardSamplesQ[Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]],
            True,
            TimeConstraint -> 300
        ],
        Example[{Basic, "Check the validity of the DiscardSamples call to: Mark multiple samples for disposal:"},
            ValidDiscardSamplesQ[{Object[Sample, "Water Sample in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Sample, "Water Sample 2 in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}],
            True
        ],
        Example[{Additional, "Check the validity of the DiscardSamples call to: Mark multiple containers for disposal; all samples within the containers are also marked for disposal:"},
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}],
            True
        ],
        Example[{Additional, "Check the validity of the DiscardSamples call to: Mark a mixed list of samples and containers for disposal:"},
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}],
            True,
            TimeConstraint -> 300
        ],
        Example[{Additional, "Check the validity of the DiscardSamples call to: Marking a sample for disposal marks both the sample and its container as AwaitingDisposal:"},
            ValidDiscardSamplesQ[Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Options, OutputFormat, "Check the validity of DiscardSamples to Mark a sample for disposal and return a test summary if OutputFormat -> TestSummary:"},
            ValidDiscardSamplesQ[Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], OutputFormat -> TestSummary],
            _EmeraldTestSummary
        ],
        Example[{Options, Verbose, "Check the validity of the DiscardSamples call to Mark a mixed list of samples and containers for disposal and indicate the passing and failing tests with the Verbose option:"},
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}, Verbose -> True],
            True,
            TimeConstraint -> 300
        ],
        Example[{Options, Verbose, "Check the validity of the DiscardSamples call if Non-reusable containers are requested to be thrown out and indicate only the failing tests with the Verbose option:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Model[Reusability]],
                ValidDiscardSamplesQ[Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], DiscardContainer -> False, Verbose -> Failures]
            },
            {False, False},
            TimeConstraint -> 300
        ],
        Example[{Options, DiscardContainer, "Check the validity of the DiscardSamples call to: Indicate that the container of a fluid sample should be thrown out:"},
            ValidDiscardSamplesQ[Object[Sample, "Water in Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], DiscardContainer -> True],
            True
        ],
        Example[{Options, DiscardContainer, "Check the validity of the DiscardSamples call to: Normally, if a container is marked as reusable in its Model, discarding it will direct it to be dishwashed and restocked:"},
            ValidDiscardSamplesQ[Object[Container, Vessel, "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Options, DiscardContainer, "Check the validity of the DiscardSamples call to: Set DiscardContainer to True to indicate that a normally reusable container should no longer be considered reusable, and be thrown out instead of dishwashed:"},
            ValidDiscardSamplesQ[Object[Container, Vessel, "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], DiscardContainer -> True],
            True
        ],
        Example[{Options, DiscardContainer, "Check the validity of the DiscardSamples call to: If a container is marked as non-reusable, discarding it will direct it to be thrown out:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Model[Reusability]],
                ValidDiscardSamplesQ[Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]]
            },
            {False, True}
        ],
        Example[{Options, DiscardContainer, "Check the validity of the DiscardSamples call if Non-reusable containers must always be thrown out; DiscardContainer cannot be set to False:"},
            {
                Download[Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Model[Reusability]],
                ValidDiscardSamplesQ[Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], DiscardContainer -> False]
            },
            {False, False}
        ],
        Example[{Messages, "InputLengthMismatch", "Check the validity of the DiscardSamples call if DiscardContainer is provided as a list, the list must have the same length as the input list:"},
            ValidDiscardSamplesQ[{Object[Container, Vessel, "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}, DiscardContainer -> {True, Automatic}],
            False
        ],
        Example[{Messages, "ItemsContainerless", "Check the validity of the DiscardSamples call to: The DiscardContainer option will be ignored for items that are not moved around the lab inside an associated container:"},
            ValidDiscardSamplesQ[Object[Item, Column, "Column to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], DiscardContainer -> True],
            True
        ],
        Example[{Messages, "ContainerDiscardRequired", "Check the validity of the DiscardSamples call for when Samples in non-reusable containers must be discarded along with their containers; DiscardContainer cannot be set to False:"},
            ValidDiscardSamplesQ[Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], DiscardContainer -> False],
            False
        ],
        Example[{Messages, "DiscardedInputs", "Check the validity of the DiscardSamples call for when Samples already discarded cannot be discarded again:"},
            ValidDiscardSamplesQ[Object[Sample, "Discarded Water in 2mL Tube"]],
            False
        ],
        Example[{Messages, "OutstandingResources", "Check the validity of the DiscardSamples call for samples with outstanding resources are discarded; the samples will not actually be discarded until the outstanding resources are fulfilled:"},
            ValidDiscardSamplesQ[Object[Sample, "Water in 2mL Tube with Outstanding Resource"]],
            True
        ],
        Example[{Messages, "ConflictingConditionsInContainer", "Check the validity of the DiscardSamples call for when not all samples within the same container are provided:"},
            ValidDiscardSamplesQ[Object[Sample, "Water Sample in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]],
            False
        ],
        (****************************************TESTS ********************************)
        Test["Check the validity of the DiscardSamples call for When Output -> Tests, return a list of tests checking all messages:",
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}, Output -> Tests],
            True
        ],
        Test["Check the validity of the DiscardSamples call for When Output -> Preview, return Null:",
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}, Output -> Preview],
            True
        ],
        Test["Check the validity of the DiscardSamples call for when Output -> Options, return a list of options:",
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}, Output -> Options],
            True
        ],
        Test["Check the validity of the DiscardSamples call for when Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            ValidDiscardSamplesQ[{Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            True
        ]
    },
    SetUp :> (
        Upload[{
            <|
                Object -> Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Sample, "Water Sample 2 in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Column, "Column to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Container, Vessel, "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {},
                Reusable -> True
            |>,
            <|
                Object -> Object[Sample, "Water in Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>,
            <|
                Object -> Object[Item, Needle, "Test Needle to test ValidDiscardSamplesQ for ValidDiscardSamplesQ tests" <> $SessionUUID],
                StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]],
                Replace[StorageConditionLog] -> {{Now, Link[Model[StorageCondition, "Ambient Storage"]], Null}},
                AwaitingDisposal -> Null,
                Replace[DisposalLog] -> {}
            |>

        }]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test ValidDiscardSamplesQ for ValidDiscardSamplesQ tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];
        Module[{testBench, plate1, vessel1, vessel2, sample1, sample2, sample3, sample4, column1, needle1},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for ValidDiscardSamplesQ tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                plate1,
                vessel1,
                vessel2,
                column1,
                needle1
            } = UploadSample[
                {
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "250mL Glass Bottle"],
                    Model[Item, Column, "HiTrap Q HP 5x1mL Column"],
                    Model[Item, Needle, "Reusable Stainless Steel Non-Coring 12 in x 18G Needle"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "Column to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "Test Needle to test ValidDiscardSamplesQ for ValidDiscardSamplesQ tests" <> $SessionUUID
                }
            ];

            {
                sample1,
                sample2,
                sample3,
                sample4
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", plate1},
                    {"A2", plate1},
                    {"A1", vessel1},
                    {"A1", vessel2}
                },
                Name -> {
                    "Water Sample in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "Water Sample 2 in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID,
                    "Water in Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter,
                    1 Milliliter,
                    100 Milliliter
                },
                FastTrack -> True
            ];
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = {
                Object[Container, Bench, "Test bench for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water Sample to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "2mL Tube to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Container, Plate, "96-well Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water Sample in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water Sample 2 in Plate to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Item, Column, "Column to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "250mL Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Water in Glass Bottle to Dispose for ValidDiscardSamplesQ tests" <> $SessionUUID],
                Object[Item, Needle, "Test Needle to test ValidDiscardSamplesQ for ValidDiscardSamplesQ tests" <> $SessionUUID]
            };
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ]
    )
];


(* ::Subsection::Closed:: *)
(*CancelDiscardSamples*)


(* ::Subsubsection::Closed:: *)
(*CancelDiscardSamples*)


DefineTests[CancelDiscardSamples,
    {
        Example[{Basic, "Cancel a pending disposal request for a sample to ensure it is not permanently discarded as part of regular maintenance:"},
            CancelDiscardSamples[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
            {ObjectReferenceP[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]], ObjectReferenceP[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]]},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Cancel a pending disposal request for a container and the samples in it to ensure they are not permanently discarded as part of regular maintenance:"},
            CancelDiscardSamples[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
            {ObjectReferenceP[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]]},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Cancel a disposal request for multiple samples and containers:"},
            CancelDiscardSamples[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}],
            {
                ObjectReferenceP[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]]
            },
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]
                }]
            }
        ],
        Example[{Additional, "This function can be safely run on a sample that is not marked for disposal; it will have no effect:"},
            CancelDiscardSamples[Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamples " <> $SessionUUID]];
            Download[Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamples " <> $SessionUUID], AwaitingDisposal],
            Null
        ],
        Example[{Additional, "This function will ensure that the AwaitingDisposal flag is set to Null for both a sample and its container:"},
            CancelDiscardSamples[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]];
            Download[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], {AwaitingDisposal, Container[AwaitingDisposal]}],
            {Null, Null},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}]
            }
        ],
        Example[{Additional, "The sample's DisposalLog reflects the change to the discarded request:"},
            CancelDiscardSamples[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]];
            Download[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], DisposalLog],
            {
                {_?DateObjectQ, True, LinkP[]},
                {_?DateObjectQ, False, LinkP[]}
            },
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}]
            }
        ],
        Example[{Messages, "SamplesAlreadyDiscarded", "A warning is thrown if any provided samples have already been permanently thrown away; these samples will be ignored:"},
            CancelDiscardSamples[{Object[Sample, "Sample in tube already thrown away for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}],
            {
                ObjectReferenceP[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]]
            },
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}]
            },
            Messages :> {
                Warning::SamplesAlreadyDiscarded
            }
        ],
        Example[{Messages, "ContainerConflict", "If not all samples within the same container are undiscarded, a warning will be displayed:"},
            CancelDiscardSamples[Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
            {
                ObjectReferenceP[Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                ObjectReferenceP[Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]]
            },
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]
                }]
            },
            Messages :> {
                Warning::ContainerConflict
            }
        ],
        (***************** Tests ******************)
        Test["When Output -> Tests, return a list of tests checking all messages:",
            CancelDiscardSamples[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}, Output -> Tests],
            {__EmeraldTest},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]
                }]
            }
        ],
        Test["When Output -> Preview, return Null:",
            CancelDiscardSamples[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}, Output -> Preview],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]
                }]
            }
        ],
        Test["When Output -> Options, return a list of options:",
            CancelDiscardSamples[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}, Output -> Options],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]
                }]
            }
        ],
        Test["When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            CancelDiscardSamples[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            {
                {__EmeraldTest},
                Null,
                {},
                {
                    ObjectReferenceP[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                    ObjectReferenceP[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                    ObjectReferenceP[Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                    ObjectReferenceP[Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]],
                    ObjectReferenceP[Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]]
                }
            },
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID]
                }]
            }
        ]
    },
    SymbolSetUp :> {
        Module[{
            testBench, testContainers, testSamples, uploadedObjects
        },
            Off[Warning::SamplesOutOfStock];
            Off[Warning::InstrumentUndergoingMaintenance];

            $CreatedObjects = {};
            tearDownCancelDiscardSamplesTestObjects[];

            (* Create the test bench *)
            testBench = Upload[
                <|
                    Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects],
                    Type -> Object[Container, Bench],
                    Name -> "Test bench for CancelDiscardSamples " <> $SessionUUID
                |>
            ];

            (* Create the test sample containers *)
            testContainers = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID,
                    "Tube already thrown away for CancelDiscardSamples " <> $SessionUUID,
                    "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID,
                    "Plate not marked for Disposal for CancelDiscardSamples " <> $SessionUUID
                },
                Status -> Available,
                StorageCondition -> AmbientStorage
            ];

            (* Create the test samples *)
            testSamples = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", testContainers[[1]]},
                    {"A1", testContainers[[2]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[4]]}
                },
                Name -> {
                    "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID,
                    "Sample in tube already thrown away for CancelDiscardSamples " <> $SessionUUID,
                    "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID,
                    "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID,
                    "Sample1 in Plate not marked for Disposal for CancelDiscardSamples " <> $SessionUUID
                },
                Status -> Available,
                InitialAmount -> ConstantArray[1 Milliliter, 5]
            ];

            (* Discard one of the test containers (and the sample within it) *)
            UploadSampleStatus[
                Object[Container, Vessel, "Tube already thrown away for CancelDiscardSamples " <> $SessionUUID],
                Discarded
            ];

            (* Get a list of the uploaded objects *)
            uploadedObjects = Join[{testBench}, testContainers, testSamples];

            (* Set DeveloperObject->True for the uploaded objects *)
            Upload[Map[
                <|
                    Object -> #,
                    DeveloperObject -> True
                |>&,
                uploadedObjects
            ]];
        ];
    },
    SymbolTearDown :> {
        On[Warning::SamplesOutOfStock];
        On[Warning::InstrumentUndergoingMaintenance];
        tearDownCancelDiscardSamplesTestObjects[];
        Unset[$CreatedObjects];
    }
];

tearDownCancelDiscardSamplesTestObjects[] := Module[{allObjects, existingObjects},

    (* Gather all the objects and models created in SymbolSetUp *)
    allObjects = Join[
        Cases[$CreatedObjects, ObjectP[]],
        {
            Object[Container, Bench, "Test bench for CancelDiscardSamples " <> $SessionUUID],

            Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
            Object[Container, Vessel, "Tube already thrown away for CancelDiscardSamples " <> $SessionUUID],
            Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
            Object[Container, Plate, "Plate not marked for Disposal for CancelDiscardSamples " <> $SessionUUID],

            Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
            Object[Sample, "Sample in tube already thrown away for CancelDiscardSamples " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
            Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamples " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamples " <> $SessionUUID]
        }
    ];

    (* Check whether the names already exist in the database *)
    existingObjects = PickList[allObjects, DatabaseMemberQ[allObjects]];

    (* Erase any objects and models that exist in the database *)
    Quiet[EraseObject[existingObjects, Force -> True, Verbose -> False]];
];


(* ::Subsubsection::Closed:: *)
(*CancelDiscardSamplesOptions*)


DefineTests[CancelDiscardSamplesOptions,
    {
        Example[{Basic, "Returns all options to: Cancel a pending disposal request for a sample to ensure it is not permanently discarded as part of regular maintenance:"},
            CancelDiscardSamplesOptions[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]],
            Graphics_,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Returns all options to: Cancel a pending disposal request for a container and the samples in it to ensure they are not permanently discarded as part of regular maintenance:"},
            CancelDiscardSamplesOptions[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]],
            Graphics_,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Returns all options to: Cancel a disposal request for multiple samples and containers:"},
            CancelDiscardSamplesOptions[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}],
            Graphics_,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
                }]
            }
        ],
        Example[{Additional, "Returns all options for the case that this function can be safely run on a sample that is not marked for disposal; it will have no effect:"},
            CancelDiscardSamplesOptions[Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], OutputFormat -> List],
            {}
        ],
        Example[{Additional, "Returns all options to for the case that this function will ensure that the AwaitingDisposal flag is set to Null for both a sample and its container:"},
            CancelDiscardSamplesOptions[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], OutputFormat -> List],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}]
            }
        ],
        Example[{Additional, "Returns all options so that the sample's DisposalLog reflects the change to the discarded request:"},
            CancelDiscardSamplesOptions[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]],
            Graphics_,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}]
            }
        ],
        (* Options *)
        Example[
            {Options, OutputFormat, "Choose to return options as a List or Table:"},
            CancelDiscardSamplesOptions[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], OutputFormat -> List],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}]
            }
        ],
        (* Messages *)
        Example[{Messages, "SamplesAlreadyDiscarded", "Returns all options for: A warning is thrown if any provided samples have already been permanently thrown away; these samples will be ignored:"},
            CancelDiscardSamplesOptions[{Object[Sample, "Sample in tube already thrown away for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}],
            Graphics_,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}]
            },
            Messages :> {
                Warning::SamplesAlreadyDiscarded
            }
        ],
        Example[{Messages, "ContainerConflict", "Returns all options: If not all samples within the same container are undiscarded, a warning will be displayed:"},
            CancelDiscardSamplesOptions[Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]],
            Graphics_,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
                }]
            },
            Messages :> {
                Warning::ContainerConflict
            }
        ],
        (***************** Tests ******************)
        Test["Returns all options for when Output -> Tests, return a list of tests checking all messages:",
            CancelDiscardSamplesOptions[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}, Output -> Tests, OutputFormat -> List],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
                }]
            }
        ],
        Test["Returns all options for when Output -> Preview, return Null:",
            CancelDiscardSamplesOptions[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}, Output -> Preview, OutputFormat -> List],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
                }]
            }
        ],
        Test["Returns all options for when Output -> Options, return a list of options:",
            CancelDiscardSamplesOptions[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}, Output -> Options, OutputFormat -> List],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
                }]
            }
        ],
        Test["Returns all options for when Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            CancelDiscardSamplesOptions[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}, OutputFormat -> List],
            {},
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
                }]
            }
        ]
    },
    SymbolSetUp :> {
        Module[{
            testBench, testContainers, testSamples, uploadedObjects
        },
            Off[Warning::SamplesOutOfStock];
            Off[Warning::InstrumentUndergoingMaintenance];

            $CreatedObjects = {};
            tearDownCancelDiscardSamplesOptionsTestObjects[];

            (* Create the test bench *)
            testBench = Upload[
                <|
                    Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects],
                    Type -> Object[Container, Bench],
                    Name -> "Test bench for CancelDiscardSamplesOptions " <> $SessionUUID
                |>
            ];

            (* Create the test sample containers *)
            testContainers = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Tube already thrown away for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Plate not marked for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID
                },
                Status -> Available,
                StorageCondition -> AmbientStorage
            ];

            (* Create the test samples *)
            testSamples = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", testContainers[[1]]},
                    {"A1", testContainers[[2]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[4]]}
                },
                Name -> {
                    "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Sample in tube already thrown away for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID,
                    "Sample1 in Plate not marked for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID
                },
                Status -> Available,
                InitialAmount -> ConstantArray[1 Milliliter, 5]
            ];

            (* Discard one of the test containers (and the sample within it) *)
            UploadSampleStatus[
                Object[Container, Vessel, "Tube already thrown away for CancelDiscardSamplesOptions " <> $SessionUUID],
                Discarded
            ];

            (* Get a list of the uploaded objects *)
            uploadedObjects = Join[{testBench}, testContainers, testSamples];

            (* Set DeveloperObject->True for the uploaded objects *)
            Upload[Map[
                <|
                    Object -> #,
                    DeveloperObject -> True
                |>&,
                uploadedObjects
            ]];
        ];
    },
    SymbolTearDown :> {
        On[Warning::SamplesOutOfStock];
        On[Warning::InstrumentUndergoingMaintenance];
        tearDownCancelDiscardSamplesOptionsTestObjects[];
        Unset[$CreatedObjects];
    }
];

tearDownCancelDiscardSamplesOptionsTestObjects[] := Module[{allObjects, existingObjects},

    (* Gather all the objects and models created in SymbolSetUp *)
    allObjects = Join[
        Cases[$CreatedObjects, ObjectP[]],
        {
            Object[Container, Bench, "Test bench for CancelDiscardSamplesOptions " <> $SessionUUID],

            Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Container, Vessel, "Tube already thrown away for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Container, Plate, "Plate not marked for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],

            Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Sample, "Sample in tube already thrown away for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamplesOptions " <> $SessionUUID]
        }
    ];

    (* Check whether the names already exist in the database *)
    existingObjects = PickList[allObjects, DatabaseMemberQ[allObjects]];

    (* Erase any objects and models that exist in the database *)
    Quiet[EraseObject[existingObjects, Force -> True, Verbose -> False]];
];


(* ::Subsubsection::Closed:: *)
(*CancelDiscardSamplesPreview*)


DefineTests[CancelDiscardSamplesPreview,
    {
        Example[{Basic, "Returns Preview for: Cancel a pending disposal request for a sample to ensure it is not permanently discarded as part of regular maintenance:"},
            CancelDiscardSamplesPreview[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Returns Preview for: Cancel a pending disposal request for a container and the samples in it to ensure they are not permanently discarded as part of regular maintenance:"},
            CancelDiscardSamplesPreview[Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Returns Preview for: Cancel a disposal request for multiple samples and containers:"},
            CancelDiscardSamplesPreview[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
                }]
            }
        ],
        Example[{Additional, "Returns Preview for: This function can be safely run on a sample that is not marked for disposal; it will have no effect:"},
            CancelDiscardSamplesPreview[Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]],
            Null
        ],
        Example[{Additional, "Returns Preview for: This function will ensure that the AwaitingDisposal flag is set to Null for both a sample and its container:"},
            CancelDiscardSamplesPreview[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}]
            }
        ],
        Example[{Additional, "Returns Preview for: The sample's DisposalLog reflects the change to the discarded request:"},
            CancelDiscardSamplesPreview[Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}]
            }
        ],
        Example[{Messages, "SamplesAlreadyDiscarded", "Returns Preview for: A warning is thrown if any provided samples have already been permanently thrown away; these samples will be ignored:"},
            CancelDiscardSamplesPreview[{Object[Sample, "Sample in tube already thrown away for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}]
            },
            Messages :> {
                Warning::SamplesAlreadyDiscarded
            },
            TimeConstraint -> 200
        ],
        Example[{Messages, "ContainerConflict", "Returns Preview for: If not all samples within the same container are undiscarded, a warning will be displayed:"},
            CancelDiscardSamplesPreview[Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
                }]
            },
            Messages :> {
                Warning::ContainerConflict
            }
        ],
        (***************** Tests ******************)
        Test["Returns Preview for: When Output -> Tests, return a list of tests checking all messages:",
            CancelDiscardSamplesPreview[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}, Output -> Tests],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
                }]
            }
        ],
        Test["Returns Preview for: When Output -> Preview, return Null:",
            CancelDiscardSamplesPreview[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}, Output -> Preview],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
                }]
            }
        ],
        Test["Returns Preview for: When Output -> Options, return a list of options:",
            CancelDiscardSamplesPreview[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}, Output -> Options],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
                }]
            }
        ],
        Test["Returns Preview for: When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            CancelDiscardSamplesPreview[{Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            Null,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
                }]
            }
        ]
    },
    SymbolSetUp :> {
        Module[{
            testBench, testContainers, testSamples, uploadedObjects
        },
            Off[Warning::SamplesOutOfStock];
            Off[Warning::InstrumentUndergoingMaintenance];

            $CreatedObjects = {};
            tearDownCancelDiscardSamplesPreviewTestObjects[];

            (* Create the test bench *)
            testBench = Upload[
                <|
                    Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects],
                    Type -> Object[Container, Bench],
                    Name -> "Test bench for CancelDiscardSamplesPreview " <> $SessionUUID
                |>
            ];

            (* Create the test sample containers *)
            testContainers = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Tube already thrown away for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Plate not marked for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID
                },
                Status -> Available,
                StorageCondition -> AmbientStorage
            ];

            (* Create the test samples *)
            testSamples = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", testContainers[[1]]},
                    {"A1", testContainers[[2]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[4]]}
                },
                Name -> {
                    "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Sample in tube already thrown away for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID,
                    "Sample1 in Plate not marked for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID
                },
                Status -> Available,
                InitialAmount -> ConstantArray[1 Milliliter, 5]
            ];

            (* Discard one of the test containers (and the sample within it) *)
            UploadSampleStatus[
                Object[Container, Vessel, "Tube already thrown away for CancelDiscardSamplesPreview " <> $SessionUUID],
                Discarded
            ];

            (* Get a list of the uploaded objects *)
            uploadedObjects = Join[{testBench}, testContainers, testSamples];

            (* Set DeveloperObject->True for the uploaded objects *)
            Upload[Map[
                <|
                    Object -> #,
                    DeveloperObject -> True
                |>&,
                uploadedObjects
            ]];
        ];
    },
    SymbolTearDown :> {
        On[Warning::SamplesOutOfStock];
        On[Warning::InstrumentUndergoingMaintenance];
        tearDownCancelDiscardSamplesPreviewTestObjects[];
        Unset[$CreatedObjects];
    }
];

tearDownCancelDiscardSamplesPreviewTestObjects[] := Module[{allObjects, existingObjects},

    (* Gather all the objects and models created in SymbolSetUp *)
    allObjects = Join[
        Cases[$CreatedObjects, ObjectP[]],
        {
            Object[Container, Bench, "Test bench for CancelDiscardSamplesPreview " <> $SessionUUID],

            Object[Container, Vessel, "Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Container, Vessel, "Tube already thrown away for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Container, Plate, "Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Container, Plate, "Plate not marked for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],

            Object[Sample, "Sample in Tube to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Sample, "Sample in tube already thrown away for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Sample, "Sample2 in Plate to Unmark for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate not marked for Disposal for CancelDiscardSamplesPreview " <> $SessionUUID]
        }
    ];

    (* Check whether the names already exist in the database *)
    existingObjects = PickList[allObjects, DatabaseMemberQ[allObjects]];

    (* Erase any objects and models that exist in the database *)
    Quiet[EraseObject[existingObjects, Force -> True, Verbose -> False]];
];


(* ::Subsubsection::Closed:: *)
(*ValidCancelDiscardSamplesQ*)


DefineTests[ValidCancelDiscardSamplesQ,
    {
        Example[{Basic, "Check the validity of the CancelDiscardSamples call to: Cancel a pending disposal request for a sample to ensure it is not permanently discarded as part of regular maintenance:"},
            ValidCancelDiscardSamplesQ[Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Check the validity of the CancelDiscardSamples call to: Cancel a pending disposal request for a container and the samples in it to ensure they are not permanently discarded as part of regular maintenance:"},
            ValidCancelDiscardSamplesQ[Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Check the validity of the CancelDiscardSamples call to: Cancel a disposal request for multiple samples and containers:"},
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Example[{Additional, "Check the validity of the CancelDiscardSamples call for: This function can be safely run on a sample that is not marked for disposal; it will have no effect:"},
            ValidCancelDiscardSamplesQ[Object[Sample, "Sample1 in Plate not marked for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]],
            True
        ],
        Example[{Additional, "Check the validity of the CancelDiscardSamples call for: This function will ensure that the AwaitingDisposal flag is set to Null for both a sample and its container:"},
            ValidCancelDiscardSamplesQ[Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}]
            }
        ],
        Example[{Additional, "Check the validity of the CancelDiscardSamples call for: The sample's DisposalLog reflects the change to the discarded request:"},
            ValidCancelDiscardSamplesQ[Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}]
            }
        ],
        Example[{Options, OutputFormat, "Check the validity of CancelDiscardSamples to Cancel a disposal request for multiple samples and containers, and return a test summary if OutputFormat -> TestSummary:"},
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}, OutputFormat -> TestSummary],
            _EmeraldTestSummary,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Example[{Options, Verbose, "Check the validity of CancelDiscardSamples to Cancel a disposal request for multiple samples and containers, and indicate the passing and failing tests with the Verbose option:"},
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}, Verbose -> True],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Example[{Options, Verbose, "Check the validity of CancelDiscardSamples to Cancel a disposal request if not all samples within the same container are undiscarded, and indicate only the failing tests with the Verbose -> Failures option:"},
            ValidCancelDiscardSamplesQ[Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Verbose -> Failures],
            False,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Example[{Messages, "SamplesAlreadyDiscarded", "Check the validity of the CancelDiscardSamples call so that: A warning is thrown if any provided samples have already been permanently thrown away; these samples will be ignored:"},
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in tube already thrown away for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}]
            }
        ],
        Example[{Messages, "ContainerConflict", "Check the validity of the CancelDiscardSamples call for: If not all samples within the same container are undiscarded, a warning will be displayed:"},
            ValidCancelDiscardSamplesQ[Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]],
            False,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        (***************** Tests ******************)
        Test["Check the validity of the CancelDiscardSamples call When Output -> Tests, return a list of tests checking all messages:",
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}, Output -> Tests],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Test["Check the validity of the CancelDiscardSamples call When Output -> Preview, return Null:",
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}, Output -> Preview],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Test["Check the validity of the CancelDiscardSamples call When Output -> Options, return a list of options:",
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}, Output -> Options],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ],
        Test["Check the validity of the CancelDiscardSamples call When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            ValidCancelDiscardSamplesQ[{Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            True,
            SetUp :> {
                Upload[<|Object -> #, AwaitingDisposal -> True, Replace[DisposalLog] -> {{Now, True, Link[$PersonID]}}|>& /@ {
                    Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID], Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                    Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
                }]
            }
        ]
    },
    SymbolSetUp :> {
        Module[{
            testBench, testContainers, testSamples, uploadedObjects
        },
            Off[Warning::SamplesOutOfStock];
            Off[Warning::InstrumentUndergoingMaintenance];

            $CreatedObjects = {};
            tearDownValidCancelDiscardSamplesQTestObjects[];

            (* Create the test bench *)
            testBench = Upload[
                <|
                    Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects],
                    Type -> Object[Container, Bench],
                    Name -> "Test bench for ValidCancelDiscardSamplesQ " <> $SessionUUID
                |>
            ];

            (* Create the test sample containers *)
            testContainers = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                    Model[Container, Plate, "96-well 2mL Deep Well Plate"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Tube already thrown away for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Plate not marked for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID
                },
                Status -> Available,
                StorageCondition -> AmbientStorage
            ];

            (* Create the test samples *)
            testSamples = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", testContainers[[1]]},
                    {"A1", testContainers[[2]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[3]]},
                    {"A1", testContainers[[4]]}
                },
                Name -> {
                    "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Sample in tube already thrown away for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID,
                    "Sample1 in Plate not marked for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID
                },
                Status -> Available,
                InitialAmount -> ConstantArray[1 Milliliter, 5]
            ];

            (* Discard one of the test containers (and the sample within it) *)
            UploadSampleStatus[
                Object[Container, Vessel, "Tube already thrown away for ValidCancelDiscardSamplesQ " <> $SessionUUID],
                Discarded
            ];

            (* Get a list of the uploaded objects *)
            uploadedObjects = Join[{testBench}, testContainers, testSamples];

            (* Set DeveloperObject->True for the uploaded objects *)
            Upload[Map[
                <|
                    Object -> #,
                    DeveloperObject -> True
                |>&,
                uploadedObjects
            ]];
        ];
    },
    SymbolTearDown :> {
        On[Warning::SamplesOutOfStock];
        On[Warning::InstrumentUndergoingMaintenance];
        tearDownValidCancelDiscardSamplesQTestObjects[];
        Unset[$CreatedObjects];
    }
];

tearDownValidCancelDiscardSamplesQTestObjects[] := Module[{allObjects, existingObjects},

    (* Gather all the objects and models created in SymbolSetUp *)
    allObjects = Join[
        Cases[$CreatedObjects, ObjectP[]],
        {
            Object[Container, Bench, "Test bench for ValidCancelDiscardSamplesQ " <> $SessionUUID],

            Object[Container, Vessel, "Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Container, Vessel, "Tube already thrown away for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Container, Plate, "Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Container, Plate, "Plate not marked for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],

            Object[Sample, "Sample in Tube to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Sample, "Sample in tube already thrown away for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Sample, "Sample2 in Plate to Unmark for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID],
            Object[Sample, "Sample1 in Plate not marked for Disposal for ValidCancelDiscardSamplesQ " <> $SessionUUID]
        }
    ];

    (* Check whether the names already exist in the database *)
    existingObjects = PickList[allObjects, DatabaseMemberQ[allObjects]];

    (* Erase any objects and models that exist in the database *)
    Quiet[EraseObject[existingObjects, Force -> True, Verbose -> False]];
];


(* ::Subsection::Closed:: *)
(*ShipBetweenSites*)


(* ::Subsubsection::Closed:: *)
(*ShipBetweenSites*)



DefineTests[ShipBetweenSites,
    {
        Example[{Basic, "Request multiple objects to be returned:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, SiteToSite]], ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],
        Example[{Basic, "Request containers with sample objects to be returned:"},
            transactions = ShipBetweenSites[
                {
                    Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID],
                    Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSites" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, SiteToSite]], ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],

        Example[{Basic, "Specify a single destination for all of the shipped items:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID]
            ];
            Download[transactions, Destination],
            {ObjectP[Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID]]},
            Variables :> {transactions}
        ],
        Example[{Basic, "Request a single object to be returned:"},
            transactions = ShipBetweenSites[
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],
        Example[{Basic, "Specify an amount of a model to ship between sites:"},
            transactions = ShipBetweenSites[
                Model[Sample, "Milli-Q water"],
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID],
                Amount -> 20 Milliliter
            ],
            {ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],

        (* ---------------- *)
        (* -- Additional -- *)
        (* ---------------- *)
        Example[{Additional, "Ship a model between sites to fulfill a model resource request, each model is a different transaction:"},
            transactions = Cases[ShipBetweenSites[
                {Model[Sample, "Milli-Q water"], Model[Sample, "Milli-Q water"]},
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID],
                Amount -> 20 Milliliter,
                DependentResource -> {Object[Resource, Sample, "Resource with ContainerModel for ShipBetweenSites " <> $SessionUUID], Object[Resource, Sample, "Resource without ContainerModel for ShipBetweenSites " <> $SessionUUID]},
                DependentProtocol -> {Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID], Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID]}
            ], ObjectP[Object[Transaction]]],
            {ObjectP[Object[Transaction, SiteToSite]], ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],
        Example[{Additional, "Handles mixed lists of Models/Objects:"},
            transactions = Quiet[ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Model[Sample, "Milli-Q water"]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                Amount -> {Null, 20 Milliliter},
                Container -> {Null, Null}
            ], Warning::ContainersIncludeAdditionalSamples];
            Download[transactions, SamplesIn],
            {OrderlessPatternSequence[{ObjectP[Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID]]}, {ObjectP[Model[Sample, "Milli-Q water"]]}]},
            Variables :> {transactions}
        ],

        Example[{Additional, "Handles objects with or without dependent resources:"},
            transactions = Cases[ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                DependentResource -> {Object[Resource, Sample, "Resource for sample for ShipBetweenSites " <> $SessionUUID], Object[Resource, Sample, "Resource 2 for sample for ShipBetweenSites " <> $SessionUUID], None},
                DependentProtocol -> {Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID], Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID], None}
            ],
                ObjectP[Object[Transaction]]
            ];
            Download[transactions, {Resources, DependentProtocols}],
            {OrderlessPatternSequence[
                {
                    {ObjectP[Object[Resource, Sample, "Resource for sample for ShipBetweenSites " <> $SessionUUID]], ObjectP[Object[Resource, Sample, "Resource 2 for sample for ShipBetweenSites " <> $SessionUUID]]},
                    {
                        ObjectP[Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID]],
                        ObjectP[Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID]]
                    }
                },
                {{Null}, {}}
            ]},
            Variables :> {transactions}
        ],

        Example[{Additional, "Selects a plate seal for all plates that will be shipped:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ];
            Download[transactions, PlateSeals],
            {{LinkP[Model[Item, PlateSeal, "id:dORYzZJMop8e"]]}, {}},
            Variables :> {transactions}
        ],
        Example[{Additional, "Selects a plate seal for plate containers that will be shipped when multiple container and sample inputs are used:"},
            transactions = ShipBetweenSites[
                {
                    Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID],
                    Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSites" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ];
            Download[transactions, PlateSeals],
            {{LinkP[Model[Item, PlateSeal, "id:dORYzZJMop8e"]]}, {}},
            Variables :> {transactions}
        ],

        Example[{Additional, "Cardboard boxes are selected for ambient shipments, and styrofoam boxes are selected for cold shipments:"},
            transactions = ShipBetweenSites[
                {
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> {None, Ice, Ice, DryIce}
            ];
            Download[transactions, ShippingContainers[ContainerMaterials]],
            {{{Cardboard}}, {{Cardboard, Styrofoam}}, {{Cardboard, Styrofoam}}},
            Variables :> {transactions}
        ],
        Example[{Additional, "Selects packing materials based on shipment temperature:"},
            transactions = ShipBetweenSites[
                {
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> {None, Ice, Ice, DryIce}
            ];
            Download[transactions, {Ice, DryIce, Padding}],
            {
                {{}, {}, {LinkP[Model[Item, Consumable, "Packing peanuts"]]}},
                {ConstantArray[LinkP[Model[Item, Consumable, "Ice pack, 8 oz"]], 26], {}, {}},
                {{}, {LinkP[Model[Sample, "Dry ice"]]}, {}}
            },
            Variables :> {transactions}
        ],
        Example[{Additional, "Selects a secondary bag for all containers:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> Null
            ];
            Download[transactions, SecondaryContainers],
            {{LinkP[Model[Container, Bag]], LinkP[Model[Container, Bag]]}},
            Variables :> {transactions}
        ],
        Example[{Additional, "If there is not a box large enough for all of the transaction contents, chooses multiple boxes:"},
            transactions = ShipBetweenSites[
                {Object[Item, Column, "Test Column Sample for ShipBetweenSites (large)" <> $SessionUUID], Object[Item, Column, "Test Column Sample for ShipBetweenSites (large 2)" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> Null
            ];
            Download[transactions, ShippingContainers],
            {{LinkP[Model[Container, Box]], LinkP[Model[Container, Box]]}},
            Variables :> {transactions}
        ],
        Example[{Additional, "Any sample containers that are too large to fit into any bag will not get a secondary container. MaintenanceShipping will give a message later:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 1)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> Null
            ];
            Download[transactions, SecondaryContainers],
            {{LinkP[Model[Container, Bag, "id:aXRlGn6RqLvO"]]}},
            Variables :> {transactions}
        ],
        Example[{Additional, "If any sample is too large to fit into the largest stocked box, no shipping container will be populated. MaintenanceShipping will give a message later:"},
            transactions = ShipBetweenSites[
                {
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (extra large)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> Null
            ];
            Download[transactions, ShippingContainers],
            {{}},
            Variables :> {transactions}
        ],
        Example[{Additional, "If the samples are at different sites, generates a transaction for each site:"},
            transactions = ShipBetweenSites[
                {
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, SiteToSite]], ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],
        Example[{Additional, "If an item shares a container with other samples, no warning is given that the item is co-localized:"},
            transactions = ShipBetweenSites[
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions}
        ],

        (* -------------- *)
        (* -- Messages -- *)
        (* -------------- *)

        Example[{Messages, "EmptyContainers", "If an input container is empty, give a message and return Failed:"},
            transactions = ShipBetweenSites[
                {Object[Container, Plate, "Test plate with no contents for ShipBetweenSites" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::EmptyContainers}
        ],
        Example[{Messages, "ContainersIncludeAdditionalSamples", "If the sample shares a container with other samples, give a warning that the samples will be transferred to separate containers:"},
            transactions = ShipBetweenSites[
                {Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, SiteToSite]]},
            Variables :> {transactions},
            Messages :> {Warning::ContainersIncludeAdditionalSamples}
        ],
        Example[{Messages, "SiteNotFound", "If a sample's site could not be determined, give a message and return Failed:"},
            transactions = ShipBetweenSites[
                {Object[Sample, "Test Oligo Sample without site for ShipBetweenSites" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::SiteNotFound, Error::InvalidInput}
        ],
        Example[{Messages, "ContainersSpanShipments", "If samples from the same container are specified with different ShippingSpeed options, a warning will be given stating that the samples will be transferred to separate containers:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShippingSpeed -> {NextDay, FiveDay, FiveDay}
            ];
            Download[transactions, ShippingSpeed],
            {NextDay, FiveDay},
            Variables :> {transactions},
            Messages :> {Warning::ContainersSpanShipments}
        ],
        Example[{Messages, "ContainersSpanShipments", "If samples from the same container are specified with different ColdPacking options, a warning will be given stating that the samples will be transferred to separate containers:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> {Ice, DryIce, None}
            ];
            Download[transactions, ColdPacking],
            {Ice, DryIce, None},
            Variables :> {transactions},
            Messages :> {Warning::ContainersSpanShipments}
        ],
        Example[{Messages, "InputLengthMismatch", "If a listed option does not match the length of the sample inputs, give a message and return $Failed:"},
            ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShippingSpeed -> {FiveDay, FiveDay, NextDay}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "InputLengthMismatch", "If a listed option does not match the length of the samples in an input container, give a message and return $Failed:"},
            ShipBetweenSites[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShippingSpeed -> {FiveDay, FiveDay, NextDay}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "OwnershipConflict", "If the input samples are not owned by the user's financing team, give a message and return $Failed:"},
            ShipBetweenSites[
                Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSites" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::OwnershipConflict}
        ],
        Example[{Messages, "NotShippable", "If the input container samples cannot realistically be shipped, give a message and return $Failed:"},
            ShipBetweenSites[
                {
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 1)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID],
                    Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::NotShippable}
        ],

        (* ------------- *)
        (* -- Options -- *)
        (* ------------- *)

        Example[{Options, Creator, "Specify the creator for the order:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                Creator -> Object[User, "Test user for notebook-less test protocols"]
            ];
            Download[transactions, Creator],
            {ObjectP[Object[User, "Test user for notebook-less test protocols"]]..},
            Variables :> {transactions}
        ],
        Example[{Options, ShippingSpeed, "Specify that the entire transaction should be shipped overnight:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShippingSpeed -> NextDay
            ];
            Download[transactions, ShippingSpeed],
            {NextDay},
            Variables :> {transactions}
        ],
        Example[{Options, ShippingSpeed, "Specify that samples should be shipped at different rates:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShippingSpeed -> {ThreeDay, ThreeDay, FiveDay}
            ];
            Download[transactions, ShippingSpeed],
            {ThreeDay, FiveDay},
            Variables :> {transactions}
        ],
        Example[{Options, ShippingSpeed, "ShippingSpeed automatically resolves to NextDay for cold samples and to FiveDay for ambient samples:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ];
            Download[transactions, ShippingSpeed],
            {NextDay, FiveDay},
            Variables :> {transactions}
        ],
        Example[{Options, ColdPacking, "Specify that the entire transaction should be packed with ice:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> Ice
            ];
            Download[transactions, ColdPacking],
            {Ice},
            Variables :> {transactions}
        ],
        Example[{Options, ColdPacking, "Specify that some of the samples should be shipped on ice:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> {Ice, Ice, None}
            ];
            Download[transactions, ColdPacking],
            {Ice, None},
            Variables :> {transactions}
        ],
        Example[{Options, ColdPacking, "ColdPacking automatically resolves based on the sample's storage condition or on the sample's model's default storage condition:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ColdPacking -> Automatic
            ];
            Download[transactions, ColdPacking],
            {Ice, None},
            Variables :> {transactions}
        ],


        (* -- Aliquoting -- *)

        Example[{Options, Aliquot, "If no aliquoting options are specified, Aliquot resolves to false:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {{}},
            Variables :> {transactions}
        ],
        Example[{Options, Aliquot, "Indicate if aliquots should be taken from the SamplesIn and prepared to be used in lieu of the SamplesIn in the transaction. If aliquoting, you must specify a valid combination of aliquot options to indicate how the samples should be prepared:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                Aliquot -> True,
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, Aliquot, "Indicate if aliquots should be taken from the samples found in input containers and prepared to be used in lieu of the SamplesIn in the transaction. If aliquoting, you must specify a valid combination of aliquot options to indicate how the samples should be prepared:"},
            transactions = ShipBetweenSites[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                Aliquot -> True,
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, AliquotAmount, "Specify the amount of the sample that should be transferred from the SamplesIn into the AliquotSamples. In this case the sample will not be diluted, it will only be transferred:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, TargetConcentration, "Specify that samples should be diluted prior to shipping:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                TargetConcentration -> 25 Micromolar,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, "Milli-Q water"],
                AliquotAmount -> 100 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null, BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, TargetConcentrationAnalyte, "Specify the component that should be diluted to the specified TargetConcentration prior to shipping:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                TargetConcentration -> 25 Micromolar,
                TargetConcentrationAnalyte -> Model[Molecule, Oligomer, "Six Monomer Test"],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, "Milli-Q water"],
                AliquotAmount -> 100 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null, BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentVolume, "Specify the desired total volume of the AliquotSamples. After transferring the aliquot volume of the input sample, ShipmentBuffer will be added up to this volume:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShipmentVolume -> 500 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotAmount -> 100 Micro Liter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null, ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where aliquot container has multiple positions):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where aliquot container has single position):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotContainer -> Model[Container, Vessel, "2mL Tube"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {2, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ConcentratedBuffer, "Specify the concentrated buffer source which should be added to each of the AliquotSamples to obtain 1x buffer concentration after dilution of the AliquotSamples:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                AliquotAmount -> 100 Micro Liter,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    },
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDilutionFactor, "Specify the dilution factor by which the concentrated buffer should be diluted in preparing the AliquotSamples to obtain a 1x buffer concentration after dilution of the AliquotSamples:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    },
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDiluent, "Specify the diluent to use to dilute the concentrated buffer in preparing the AliquotSamples:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                BufferDiluent -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.`,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.`,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentBuffer, "Specify the buffer which should be used to dilute the AliquotSamples:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, Aliquot, "Indicate if aliquots should be taken from the SamplesIn and prepared to be used in lieu of the SamplesIn in the transaction. If aliquoting, you must specify a valid combination of aliquot options to indicate how the samples should be prepared. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                Aliquot -> True,
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, AliquotAmount, "Specify the amount of the sample that should be transferred from the SamplesIn into the AliquotSamples. In this case the sample will not be diluted, it will only be transferred:"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, TargetConcentration, "Specify that samples should be diluted prior to shipping. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                TargetConcentration -> 25 Micromolar,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, "Milli-Q water"],
                AliquotAmount -> 100 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentVolume, "Specify the desired total volume of the AliquotSamples. After transferring the aliquot volume of the input sample, ShipmentBuffer will be added up to this volume. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShipmentVolume -> 500 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotAmount -> 100 Micro Liter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where samples are at multiple sites; Case where aliquot container has multiple positions):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where samples are at multiple sites; Case where aliquot container has single position):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotContainer -> Model[Container, Vessel, "2mL Tube"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {2, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {3, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ConcentratedBuffer, "Specify the concentrated buffer source which should be added to each of the AliquotSamples to obtain 1x buffer concentration after dilution of the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                AliquotAmount -> 100 Micro Liter,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }, {
                    True,
                    {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                    Quantity[100., "Microliters"],
                    Null,
                    Null,
                    Quantity[0.5, "Milliliters"],
                    LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]], 10.,
                    LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                    Null
                }
                },
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDilutionFactor, "Specify the dilution factor by which the concentrated buffer should be diluted in preparing the AliquotSamples to obtain a 1x buffer concentration after dilution of the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    },
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                },
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDiluent, "Specify the diluent to use to dilute the concentrated buffer in preparing the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                BufferDiluent -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentBuffer, "Specify the buffer which should be used to dilute the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipBetweenSites[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, DestinationWell, "Set the DestinationWell option:"},
            options = ShipBetweenSites[
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                DestinationWell -> "A2",
                Output -> Options
            ];
            Lookup[options, DestinationWell],
            "A2",
            Variables :> {options}
        ],
        Example[{Options, BufferDilutionFactor, "The dilution factor by which the concentrated buffer should be diluted by the BufferDiluent; the diluted version of the ConcentratedBuffer will then be added to any aliquot samples that require dilution, where the volume of this buffer added is the difference between the AliquotAmount and the total AssayVolume:"},
            options = ShipBetweenSites[
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "10x UV buffer"],
                AliquotAmount -> .9 Milliliter,
                ShipmentVolume -> 1 Milliliter,
                Output -> Options,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[options, BufferDilutionFactor],
            10,
            EquivalenceFunction -> Equal,
            Variables :> {options}
        ],
        Example[{Options, ConcentratedBuffer, "The concentrated buffer which should be diluted by the BufferDilutionFactor with the BufferDiluent; the diluted version of the ConcentratedBuffer will then be added to any aliquot samples that require dilution, where the volume of this buffer added is the difference between the AliquotAmount and the total AssayVolume:"},
            options = ShipBetweenSites[
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                ConcentratedBuffer -> Model[Sample, StockSolution, "10x UV buffer"],
                BufferDilutionFactor -> 10,
                AliquotAmount -> .9 Milliliter,
                ShipmentVolume -> 1 Milliliter,
                Output -> Options,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[options, ConcentratedBuffer],
            ObjectP[Model[Sample, StockSolution, "10x UV buffer"]],
            Variables :> {options}
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSites" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ShipBetweenSites" <> $SessionUUID],
        $EmailEnabled = False
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},
            allObjs = {
                Object[Team, Financing, "Test Team for ShipBetweenSites (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSites" <> $SessionUUID],
                Object[User, "Test User for ShipBetweenSites" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipBetweenSites" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipBetweenSites" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipBetweenSites" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipBetweenSites" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipBetweenSites" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipBetweenSites" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipBetweenSites" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipBetweenSites" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSites" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSites (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipBetweenSites" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSites" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipBetweenSites (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSites (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipBetweenSites" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipBetweenSites" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSites" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSites" <> $SessionUUID],
                Object[Resource, Sample, "Resource with ContainerModel for ShipBetweenSites " <> $SessionUUID],
                Object[Resource, Sample, "Resource without ContainerModel for ShipBetweenSites " <> $SessionUUID],
                Object[Resource, Sample, "Resource for sample for ShipBetweenSites " <> $SessionUUID],
                Object[Resource, Sample, "Resource 2 for sample for ShipBetweenSites " <> $SessionUUID],
                Object[Protocol, ImageSample, "Protocol 1 for ShipBetweenSites " <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];
        $CreatedObjects = {};

        Block[{$DeveloperUpload = True},
            Module[{siteModel, siteObject, financingTeam, notebook, user},

                {
                    siteModel, siteObject, financingTeam, notebook, user
                } = CreateID[
                    {Model[Container, Site], Object[Container, Site], Object[Team, Financing], Object[LaboratoryNotebook], Object[User]}
                ];

                Upload[{
                    (* Shipping site model *)
                    <|Object -> siteModel, Name -> "Test Model Site for ShipBetweenSites (1)" <> $SessionUUID, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]]|>,
                    (* Shipping site object *)
                    <|Object -> siteObject, Name -> "Test Site for ShipBetweenSites (1)" <> $SessionUUID, Model -> Link[siteModel, Objects]|>,
                    (* Financing team *)
                    <|Object -> financingTeam, Name -> "Test Team for ShipBetweenSites (1)" <> $SessionUUID, DefaultMailingAddress -> Link[siteObject], Replace[ExperimentSites]-> {Link[siteObject, FinancingTeams]}|>,
                    (* Laboratory notebook *)
                    <|Object -> notebook, Name -> "Test Notebook for ShipBetweenSites" <> $SessionUUID, Replace[Financers] -> {Link[financingTeam, NotebooksFinanced]}, Replace[Editors] -> {Link[financingTeam, Notebooks]}|>,
                    (*User*)
                    <|Object -> user, Name -> "Test User for ShipBetweenSites" <> $SessionUUID, Replace[FinancingTeams] -> {Link[financingTeam, Members]}|>,
                    (* Resources *)
                    <|Type -> Object[Resource, Sample], Name -> "Resource with ContainerModel for ShipBetweenSites " <> $SessionUUID, Replace[ContainerModels] -> {Link[Model[Container, Vessel, "50mL Tube"]]}, Replace[Models] -> {Link[Model[Sample, "Milli-Q water"]]}, Amount -> 20 Milliliter|>,
                    <|Type -> Object[Resource, Sample], Name -> "Resource without ContainerModel for ShipBetweenSites " <> $SessionUUID, Replace[Models] -> {Link[Model[Sample, "Milli-Q water"]]}, Amount -> 20 Milliliter|>,
                    <|Type -> Object[Protocol, ImageSample], Name -> "Protocol 1 for ShipBetweenSites " <> $SessionUUID|>
                }];

                Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSites" <> $SessionUUID], Object]},
                    ClearDownload[];

                    (* Put together model packets to upload *)
                    Upload[{
                        <|
                            Type -> Model[Container, Plate], Name -> "Test place model for ShipBetweenSites" <> $SessionUUID,
                            Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                            Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}
                        |>,
                        <|
                            Type -> Model[Container, Vessel], Name -> "Test vessel model for ShipBetweenSites" <> $SessionUUID, MaxVolume -> 10Milliliter,
                            Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                            Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}
                        |>,
                        <|
                            Type -> Model[Container, Vessel], Name -> "Large container model for ShipBetweenSites" <> $SessionUUID,
                            Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                            Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}
                        |>,
                        <|Type -> Model[Container, Shelf], Name -> "Test shelf model for ShipBetweenSites" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}|>,
                        <|Type -> Model[Container, Building], Name -> "Test building model for ShipBetweenSites" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}|>,
                        <|Expires -> False, Name -> "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,
                        <|Expires -> False, Name -> "Test Model StockSolution for ShipBetweenSites (2)" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,
                        <|Expires -> False, Name -> "Test Model Column for ShipBetweenSites" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}|>,
                        <|Expires -> False, Name -> "Test Model Oligomer for ShipBetweenSites" <> $SessionUUID, Type -> Model[Sample]|>,
                        <|Expires -> False, Name -> "Test Model Column (large) for ShipBetweenSites" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}|>,
                        <|Expires -> False, Name -> "Test Model Column (extra large) for ShipBetweenSites" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}|>
                    }];

                    (* sample objects to upload *)
                    Upload[Append[#, <|Site ->Link[siteObject]|>]&/@{
                        <|Volume -> 1Milliliter, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                        <|Volume -> 1Milliliter, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                        <|Volume -> 1Milliliter, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,
                        <|Volume -> 1Milliliter, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                        <|Volume -> 1Milliliter, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSites (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                        <|Volume -> 1Milliliter, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSites (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                        <|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,
                        <|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSites (2)" <> $SessionUUID|>,
                        <|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSites (large)" <> $SessionUUID, Status -> Available|>,
                        <|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSites (large 2)" <> $SessionUUID, Status -> Available|>,
                        <|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSites (extra large)" <> $SessionUUID, Status -> Available|>,
                        <|Type -> Object[Container, Plate], Name -> "Test plate with no contents for ShipBetweenSites" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSites" <> $SessionUUID], Objects]|>,
                        <|Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSites" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ShipBetweenSites" <> $SessionUUID|>,
                        <|Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ShipBetweenSites" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSites" <> $SessionUUID], Objects], Notebook -> Null|>
                    }];

                    (* container objects to upload *)
                    Upload[Append[#, <|Site ->Link[siteObject]|>]&/@{
                        <|Type -> Object[Container, Plate], Name -> "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID], Container]}}|>,
                        <|Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipBetweenSites" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSites (1)" <> $SessionUUID], Container]}}|>,
                        <|Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSites (2)" <> $SessionUUID], Container]}}|>,
                        <|
                            Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipBetweenSites (1)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipBetweenSites" <> $SessionUUID], Objects],
                            Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 1)" <> $SessionUUID], Container]}}
                        |>,
                        <|
                            Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipBetweenSites (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipBetweenSites" <> $SessionUUID], Objects],
                            Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSites (in large container 2)" <> $SessionUUID], Container]}}
                        |>,
                        <|Type -> Object[Container, Plate], Name -> "Test plate without site for ShipBetweenSites" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ShipBetweenSites" <> $SessionUUID], Container]}}|>,
                        <|Type -> Object[Container, Vessel], Name -> "Test container without notebook (public) for ShipBetweenSites" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSites" <> $SessionUUID], Container]}}, Notebook -> Null|>
                    }];

                    (* resources for objects *)
                    Upload[
                        {
                            <|
                                Type -> Object[Resource, Sample], Name -> "Resource for sample for ShipBetweenSites " <> $SessionUUID,
                                Sample -> Link[Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID]],
                                RequestedSample -> Link[Object[Sample, "Test Oligo Sample for ShipBetweenSites (1)" <> $SessionUUID], RequestedResources]
                            |>,
                            <|
                                Type -> Object[Resource, Sample], Name -> "Resource 2 for sample for ShipBetweenSites " <> $SessionUUID,
                                Sample -> Link[Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID]],
                                RequestedSample -> Link[Object[Sample, "Test Oligo Sample for ShipBetweenSites (2)" <> $SessionUUID], RequestedResources]
                            |>
                        }
                    ];

                    Upload[<|Type -> Object[Container, Shelf], Name -> "Test shelf with contents (oligos and column sample) for ShipBetweenSites (1)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSites" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSites (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSites (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSites (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSites (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSites (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipBetweenSites (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipBetweenSites (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSites" <> $SessionUUID], Container]}}|>];
                    Upload[<|Type -> Object[Container, Shelf], Name -> "Test shelf with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSites" <> $SessionUUID], Container]}}|>];
                    Upload[<|Type -> Object[Container, Building], Name -> "Test building with contents (oligos and column shelf) for ShipBetweenSites (1)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipBetweenSites (1)" <> $SessionUUID], Container]}}|>];
                    Upload[<|Type -> Object[Container, Building], Name -> "Test building with contents (stock solution shelf) for ShipBetweenSites (2)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipBetweenSites" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSites (2)" <> $SessionUUID], Container]}}|>];
                    Upload[<|Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSites (2)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSites (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipBetweenSites (1)" <> $SessionUUID], Container]}}|>];
                    Upload[<|Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSites (3)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSites (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (stock solution shelf) for ShipBetweenSites (2)" <> $SessionUUID], Container]}}|>];
                    Upload[<|Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSites (4)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSites (1)" <> $SessionUUID], Objects]|>];
                ];
            ]
        ]
    ),
    SymbolTearDown :> {
        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[Object[Notification], Recipients == (Object[User, "Test User for ShipBetweenSites" <> $SessionUUID] | Object[User, Emerald, Developer, "hendrik"])],
            Force -> True
        ];

        Module[{allObjs, existingObjs},
            existingObjs = PickList[$CreatedObjects, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ]
    },
    TearDown :> {EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];}
];

(* ::Subsubsection::Closed:: *)
(*ShipBetweenSitesOptions*)


DefineTests[ShipBetweenSitesOptions,
    {
        Example[
            {Basic, "Returns resolved options for calling ShipBetweenSites on a single sample:"},
            ShipBetweenSitesOptions[
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID]
            ],
            Graphics_
        ],
        Example[
            {Basic, "Returns resolved options for calling ShipBetweenSites on multiple samples:"},
            ShipBetweenSitesOptions[
                {Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID]
            ],
            Graphics_
        ],
        Example[
            {Basic, "Returns resolved options for calling ShipBetweenSites on container with samples:"},
            ShipBetweenSitesOptions[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesOptions" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID]
            ],
            Graphics_
        ],
        Example[
            {Basic, "Returns resolved options for calling ShipBetweenSites on multiple samples with specified shipping conditions:"},
            ShipBetweenSitesOptions[
                {
                    Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID],
                ColdPacking -> {None, Ice, Ice, DryIce}
            ],
            Graphics_
        ],
        Test["Returned options do not contain any Automatic or $Failed entries:",
            ShipBetweenSitesOptions[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID],
                OutputFormat -> List
            ],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[
            {Options, OutputFormat, "Return the resolved options in a list:"},
            ShipBetweenSitesOptions[
                {
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID],
                OutputFormat -> List
            ],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesOptions" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ShipBetweenSitesOptions" <> $SessionUUID]
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},

            $CreatedObjects = {};

            allObjs = {
                Object[Team, Financing, "Test Team for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[User, "Test User for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];
				Module[{siteModel1, site1, financingTeam1,notebook1, user1},

					Block[{$DeveloperUpload=True},

						{siteModel1, site1, financingTeam1,notebook1, user1}=CreateID[{Model[Container, Site], Object[Container, Site], Object[Team, Financing], Object[LaboratoryNotebook], Object[User]}];

						(* Shipping site model *)
						Upload[{<|
							Object -> siteModel1,
							Name -> "Test Model Site for ShipBetweenSitesOptions (1)" <> $SessionUUID,
							ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]]
						|>,
							(* Shipping site object *)
							<|
								Object-> site1,
								Name -> "Test Site for ShipBetweenSitesOptions (1)" <> $SessionUUID,
								Model -> Link[siteModel1, Objects]
							|>,
							(* Financing team *)
							<|
								Object-> financingTeam1,
								Name -> "Test Team for ShipBetweenSitesOptions (1)" <> $SessionUUID,
								DefaultMailingAddress -> Link[site1]
							|>,
							(* Laboratory notebook *)
							<|
								Object -> notebook1,
								Name -> "Test Notebook for ShipBetweenSitesOptions" <> $SessionUUID,
								Replace[Financers] -> {Link[financingTeam1, NotebooksFinanced]}
							|>,
							(*User*)
							<|
								Object-> user1,
								Name -> "Test User for ShipBetweenSitesOptions" <> $SessionUUID,
								Replace[FinancingTeams] -> {Link[financingTeam1, Members]}
							|>
						}];


						Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesOptions" <> $SessionUUID], Object]},
							ClearDownload[];

							Module[
								{
									modelsPacketsToUpload, sampleObjectPacketsToUpload, containerObjectPacketsToUpload,
									shelf1, shelf2, building1, building2, site2, site3, site4
								},

								(* Put together model packets to upload *)
								modelsPacketsToUpload = {
									<|
										Type -> Model[Container, Plate], Name -> "Test place model for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
										Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}
									|>,
									<|
										Type -> Model[Container, Vessel], Name -> "Test vessel model for ShipBetweenSitesOptions" <> $SessionUUID, MaxVolume -> 10Milliliter,
										Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
										Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}
									|>,
									<|
										Type -> Model[Container, Vessel],
										Name -> "Large container model for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
										Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}
									|>,
									<|
										Type -> Model[Container, Shelf],
										Name -> "Test shelf model for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}
									|>,
									<|
										Type -> Model[Container, Building],
										Name -> "Test building model for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}
									|>,
									<|
										Name -> "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID,
										Type -> Model[Sample, StockSolution],
										Expires -> False
									|>,
									<|
										Name -> "Test Model StockSolution for ShipBetweenSitesOptions (2)" <> $SessionUUID,
										Type -> Model[Sample, StockSolution],
										Expires -> False
									|>,
									<|
										Type -> Model[Item, Column],
										Name -> "Test Model Column for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]},
										Expires -> False
									|>,
									<|
										Type -> Model[Sample],
										Name -> "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID
									|>,
									<|
										Type -> Model[Item, Column],
										Name -> "Test Model Column (large) for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]},
										Expires -> False
									|>,
									<|
										Type -> Model[Item, Column],
										Name -> "Test Model Column (extra large) for ShipBetweenSitesOptions" <> $SessionUUID,
										Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]},
										Expires -> False
									|>
								};

								Upload[modelsPacketsToUpload];

								(* sample objects to upload *)
								sampleObjectPacketsToUpload = {
									<|Volume -> 1Milliliter,Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

									<|Volume -> 1Milliliter,Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

									<|Volume -> 1Milliliter,Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,

									<|Volume -> 1Milliliter,Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

									<|Volume -> 1Milliliter,Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

									<|Volume -> 1Milliliter,Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

									<|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,

									<|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID|>,

									<|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesOptions (large)" <> $SessionUUID, Status -> Available|>,

									<|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesOptions (large 2)" <> $SessionUUID, Status -> Available|>,

									<|Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesOptions (extra large)" <> $SessionUUID, Status -> Available|>,

									<|Type -> Object[Container, Plate], Name -> "Test plate with no contents for ShipBetweenSitesOptions" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSitesOptions" <> $SessionUUID], Objects]|>,

									<|Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ShipBetweenSitesOptions" <> $SessionUUID|>,

									<|Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID], Objects], Notebook -> Null|>
								};

								Upload[sampleObjectPacketsToUpload];

								(* container objects to upload *)
								containerObjectPacketsToUpload = {
									<|
										Type -> Object[Container, Plate],
										Name -> "Test plate with contents (2 oligomer samples) for ShipBetweenSitesOptions" <> $SessionUUID,
										Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID], Container]}}
									|>,
									<|
										Type -> Object[Container, Vessel],
										Name -> "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions" <> $SessionUUID,
										Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID], Container]}}
									|>,
									<|
										Type -> Object[Container, Vessel],
										Name -> "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID,
										Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID], Container]}}
									|>,
									<|
										Type -> Object[Container, Vessel],
										Name -> "Test large vessel for ShipBetweenSitesOptions (1)" <> $SessionUUID,
										Model -> Link[Model[Container, Vessel, "Large container model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 1)" <> $SessionUUID], Container]}}|>,
									<|
										Type -> Object[Container, Vessel],
										Name -> "Test large vessel for ShipBetweenSitesOptions (2)" <> $SessionUUID,
										Model -> Link[Model[Container, Vessel, "Large container model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 2)" <> $SessionUUID], Container]}}|>,
									<|
										Type -> Object[Container, Plate],
										Name -> "Test plate without site for ShipBetweenSitesOptions" <> $SessionUUID,
										Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ShipBetweenSitesOptions" <> $SessionUUID], Container]}}
									|>,
									<|
										Type -> Object[Container, Vessel],
										Name -> "Test container without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID,
										Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID], Container]}},
										Notebook -> Null
									|>
								};

								Upload[containerObjectPacketsToUpload];

								{shelf1, shelf2, building1, building2, site2, site3, site4} = CreateID[Flatten[{
									ConstantArray[Object[Container, Shelf], 2],
									ConstantArray[Object[Container, Building], 2],
									ConstantArray[Object[Container, Site], 3]
								}]];

								Upload[{
									<|
										Object-> shelf1,
										Name -> "Test shelf with contents (oligos and column sample) for ShipBetweenSitesOptions (1)" <> $SessionUUID,
										Model -> Link[Model[Container, Shelf, "Test shelf model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesOptions" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipBetweenSitesOptions (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipBetweenSitesOptions (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID], Container]}}
									|>,
									<|
										Object-> shelf2,
										Name -> "Test shelf with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID,
										Model -> Link[Model[Container, Shelf, "Test shelf model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions" <> $SessionUUID], Container]}}
									|>,
									<|
										Object -> building1,
										Name -> "Test building with contents (oligos and column shelf) for ShipBetweenSitesOptions (1)" <> $SessionUUID,
										Model -> Link[Model[Container, Building, "Test building model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"Slot 1", Link[shelf1, Container]}}
									|>,
									<|
										Object-> building2,
										Name -> "Test building with contents (stock solution shelf) for ShipBetweenSitesOptions (2)" <> $SessionUUID,
										Model -> Link[Model[Container, Building, "Test building model for ShipBetweenSitesOptions" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"Slot 1", Link[shelf2, Container]}}
									|>,
									<|
										Object-> site2,
										Name -> "Test Site for ShipBetweenSitesOptions (2)" <> $SessionUUID,
										Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesOptions (1)" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"Slot 1", Link[building1, Container]}}
									|>,
									<|
										Object-> site3,
										Name -> "Test Site for ShipBetweenSitesOptions (3)" <> $SessionUUID,
										Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesOptions (1)" <> $SessionUUID], Objects],
										Replace[Contents] -> {{"Slot 1", Link[building2, Container]}}
									|>,
									<|
										Object-> site4,
										Name -> "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID,
										Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesOptions (1)" <> $SessionUUID], Objects]
									|>
								}]
							];
						]
					]
				]
		),
    SymbolTearDown :> {
        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[Object[Notification], Recipients == (Object[User, "Test User for ShipBetweenSitesOptions" <> $SessionUUID] | Object[User, Emerald, Developer, "hendrik"])],
            Force -> True
        ];

        Module[{allObjs, existingObjs},
            allObjs = Cases[Flatten[{
                $CreatedObjects,
                Object[Team, Financing, "Test Team for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[User, "Test User for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesOptions (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesOptions (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipBetweenSitesOptions (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesOptions (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSitesOptions" <> $SessionUUID]
            }], ObjectP[]];
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            Unset[$CreatedObjects];
        ]
    },
    TearDown :> {
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    }
];


(* ::Subsubsection::Closed:: *)
(*ShipBetweenSitesPreview*)


DefineTests[ShipBetweenSitesPreview,
    {
        Example[
            {Basic, "Returns summary table for calling ShipBetweenSites on a single sample:"},
            ShipBetweenSitesPreview[Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID], Object[Container, Site, "Test Site for ShipBetweenSitesPreview (4)" <> $SessionUUID]],
            Pane_
        ],
        Example[
            {Basic, "Returns summary table for calling ShipBetweenSites on multiple samples:"},
            ShipBetweenSitesPreview[
                {Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (4)" <> $SessionUUID]
            ],
            Pane_
        ],
        Example[
            {Basic, "Returns summary table for calling ShipBetweenSites on container with samples:"},
            ShipBetweenSitesPreview[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesPreview" <> $SessionUUID]},
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (4)" <> $SessionUUID]
            ],
            Pane_
        ],
        Example[
            {Basic, "Returns summary table for calling ShipBetweenSites on multiple samples listing the specified shipping conditions:"},
            ShipBetweenSitesPreview[
                {
                    Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (4)" <> $SessionUUID],
                ColdPacking -> {None, Ice, Ice, DryIce}
            ],
            Graphics_
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesPreview" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ShipBetweenSitesPreview" <> $SessionUUID]
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},

            $CreatedObjects = {};

            allObjs = {
                Object[Team, Financing, "Test Team for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[User, "Test User for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesPreview" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipBetweenSitesPreview (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipBetweenSitesPreview (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSitesPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSitesPreview" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];


        (* Shipping site model *)
        Upload[<|DeveloperObject -> True, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]], Type -> Model[Container, Site], Name -> "Test Model Site for ShipBetweenSitesPreview (1)" <> $SessionUUID|>];
        (* Shipping site object *)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSitesPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesPreview (1)" <> $SessionUUID], Objects]|>];
        (* Financing team *)
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ShipBetweenSitesPreview (1)" <> $SessionUUID, DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ShipBetweenSitesPreview (1)" <> $SessionUUID]]|>];
        (* Laboratory notebook *)
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ShipBetweenSitesPreview" <> $SessionUUID, Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ShipBetweenSitesPreview (1)" <> $SessionUUID], NotebooksFinanced]}|>];
        (* User *)
        Upload[<|DeveloperObject -> True, Type -> Object[User], Name -> "Test User for ShipBetweenSitesPreview" <> $SessionUUID, Replace[FinancingTeams] -> {Link[Object[Team, Financing, "Test Team for ShipBetweenSitesPreview (1)" <> $SessionUUID], Members]}|>];

        Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ShipBetweenSitesPreview" <> $SessionUUID], Object]},
            ClearDownload[];

            Module[
                {modelsPacketsToUpload, sampleObjectPacketsToUpload, containerObjectPacketsToUpload},

                (* Put together model packets to upload *)
                modelsPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test place model for ShipBetweenSitesPreview" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test vessel model for ShipBetweenSitesPreview" <> $SessionUUID, MaxVolume -> 10Milliliter,
                        Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Large container model for ShipBetweenSitesPreview" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Shelf], Name -> "Test shelf model for ShipBetweenSitesPreview" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}|>,
                    <|DeveloperObject -> True, Type -> Model[Container, Building], Name -> "Test building model for ShipBetweenSitesPreview" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ShipBetweenSitesPreview" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ShipBetweenSitesPreview (2)" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column for ShipBetweenSitesPreview" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Oligomer for ShipBetweenSitesPreview" <> $SessionUUID, Type -> Model[Sample]|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (large) for ShipBetweenSitesPreview" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (extra large) for ShipBetweenSitesPreview" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}|>
                };

                Upload[modelsPacketsToUpload];

                (* sample objects to upload *)
                sampleObjectPacketsToUpload = {
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesPreview (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipBetweenSitesPreview (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesPreview (large)" <> $SessionUUID, Status -> Available|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesPreview (large 2)" <> $SessionUUID, Status -> Available|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipBetweenSitesPreview (extra large)" <> $SessionUUID, Status -> Available|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with no contents for ShipBetweenSitesPreview" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSitesPreview" <> $SessionUUID], Objects]|>,
                    <|DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ShipBetweenSitesPreview" <> $SessionUUID|>,
                    <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ShipBetweenSitesPreview" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Notebook -> Null|>

                };

                Upload[sampleObjectPacketsToUpload];

                (* container objects to upload *)
                containerObjectPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents (2 oligomer samples) for ShipBetweenSitesPreview" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipBetweenSitesPreview" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipBetweenSitesPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipBetweenSitesPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipBetweenSitesPreview" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (in large container 1)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipBetweenSitesPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipBetweenSitesPreview" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipBetweenSitesPreview (in large container 2)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate without site for ShipBetweenSitesPreview" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ShipBetweenSitesPreview" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test container without notebook (public) for ShipBetweenSitesPreview" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ShipBetweenSitesPreview" <> $SessionUUID], Container]}}, Notebook -> Null|>
                };

                Upload[containerObjectPacketsToUpload];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (oligos and column sample) for ShipBetweenSitesPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipBetweenSitesPreview" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipBetweenSitesPreview (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipBetweenSitesPreview (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ShipBetweenSitesPreview" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (stock solution sample) for ShipBetweenSitesPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipBetweenSitesPreview" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (oligos and column shelf) for ShipBetweenSitesPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipBetweenSitesPreview (1)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (stock solution shelf) for ShipBetweenSitesPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipBetweenSitesPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSitesPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesPreview (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipBetweenSitesPreview (1)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSitesPreview (3)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesPreview (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (stock solution shelf) for ShipBetweenSitesPreview (2)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipBetweenSitesPreview (4)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipBetweenSitesPreview (1)" <> $SessionUUID], Objects]|>];
            ];
        ]
    ),
    SymbolTearDown :> {

        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[Object[Notification], Recipients == (Object[User, "Test User for ShipBetweenSitesPreview" <> $SessionUUID] | Object[User, Emerald, Developer, "hendrik"])],
            Force -> True
        ];

        Module[{allObjs, existingObjs},
            allObjs = Cases[$CreatedObjects, ObjectP[]];
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            Unset[$CreatedObjects];
        ]
    },
    TearDown :> {
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    }
];


(* ::Subsubsection::Closed:: *)
(*ValidShipBetweenSitesQ*)


DefineTests[ValidShipBetweenSitesQ,
    {
        Example[
            {Basic, "Check the validity of calling ShipBetweenSites on a single sample:"},
            ValidShipBetweenSitesQ[Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID]],
            True
        ],
        Example[
            {Basic, "Check the validity of calling ShipBetweenSites on multiple samples:"},
            ValidShipBetweenSitesQ[
                {
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID]
            ],
            True
        ],
        Example[
            {Basic, "Check the validity of calling ShipBetweenSites on containers with sample objects:"},
            ValidShipBetweenSitesQ[
                {
                    Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipBetweenSitesQ" <> $SessionUUID],
                    Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID]
            ],
            True
        ],
        Example[
            {Basic, "Check the validity of calling ShipBetweenSites on multiple samples listing the specified shipping conditions:"},
            ValidShipBetweenSitesQ[
                {
                    Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID],
                ColdPacking -> {None, Ice, Ice, DryIce}
            ],
            True
        ],
        Example[{Options, OutputFormat, "Validate a ShipBetweenSites call, returning an ECL Test Summary:"},
            ValidShipBetweenSitesQ[
                {
                    Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID],
                OutputFormat -> TestSummary
            ],
            _EmeraldTestSummary
        ],
        Example[
            {Options, Verbose, "Validate an ShipToECL, printing a verbose summary of tests as they are run:"},
            ValidShipBetweenSitesQ[
                {
                    Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID]
                },
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID],
                Verbose -> True
            ],
            True
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ValidShipBetweenSitesQ" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ValidShipBetweenSitesQ" <> $SessionUUID]
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},

            $CreatedObjects = {};

            allObjs = {
                Object[Team, Financing, "Test Team for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[User, "Test User for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Container, Building, "Test building model for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ValidShipBetweenSitesQ" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ValidShipBetweenSitesQ (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ValidShipBetweenSitesQ" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ValidShipBetweenSitesQ" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];


        (* Shipping site model *)
        Upload[<|DeveloperObject -> True, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]], Type -> Model[Container, Site], Name -> "Test Model Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID|>];
        (* Shipping site object *)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Objects]|>];

        (* Financing team *)
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ValidShipBetweenSitesQ (1)" <> $SessionUUID, DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID]]|>];

        (* Laboratory notebook *)
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ValidShipBetweenSitesQ" <> $SessionUUID, Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ValidShipBetweenSitesQ (1)" <> $SessionUUID], NotebooksFinanced]}|>];

        (* User *)
        Upload[<|DeveloperObject -> True, Type -> Object[User], Name -> "Test User for ValidShipBetweenSitesQ" <> $SessionUUID, Replace[FinancingTeams] -> {Link[Object[Team, Financing, "Test Team for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Members]}|>];

        Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ValidShipBetweenSitesQ" <> $SessionUUID], Object]},
            ClearDownload[];

            Module[
                {modelsPacketsToUpload, sampleObjectPacketsToUpload, containerObjectPacketsToUpload},

                (* Put together model packets to upload *)
                modelsPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test place model for ValidShipBetweenSitesQ" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test vessel model for ValidShipBetweenSitesQ" <> $SessionUUID, MaxVolume -> 10Milliliter,
                        Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Large container model for ValidShipBetweenSitesQ" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                    <|DeveloperObject -> True, Type -> Model[Container, Shelf], Name -> "Test shelf model for ValidShipBetweenSitesQ" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}|>,
                    <|DeveloperObject -> True, Type -> Model[Container, Building], Name -> "Test building model for ValidShipBetweenSitesQ" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ValidShipBetweenSitesQ" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column for ValidShipBetweenSitesQ" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Oligomer for ValidShipBetweenSitesQ" <> $SessionUUID, Type -> Model[Sample]|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (large) for ValidShipBetweenSitesQ" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}|>,
                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (extra large) for ValidShipBetweenSitesQ" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}|>
                };

                Upload[modelsPacketsToUpload];

                (* sample objects to upload *)
                sampleObjectPacketsToUpload = {
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipBetweenSitesQ (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipBetweenSitesQ (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipBetweenSitesQ (large)" <> $SessionUUID, Status -> Available|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipBetweenSitesQ (large 2)" <> $SessionUUID, Status -> Available|>,
                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipBetweenSitesQ (extra large)" <> $SessionUUID, Status -> Available|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with no contents for ValidShipBetweenSitesQ" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects]|>,
                    <|DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ValidShipBetweenSitesQ" <> $SessionUUID|>,
                    <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ValidShipBetweenSitesQ" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Notebook -> Null|>
                };

                Upload[sampleObjectPacketsToUpload];

                (* container objects to upload *)
                containerObjectPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents (2 oligomer samples) for ValidShipBetweenSitesQ" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ValidShipBetweenSitesQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (in large container 1)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipBetweenSitesQ (in large container 2)" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate without site for ValidShipBetweenSitesQ" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ValidShipBetweenSitesQ" <> $SessionUUID], Container]}}|>,
                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test container without notebook (public) for ValidShipBetweenSitesQ" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ValidShipBetweenSitesQ" <> $SessionUUID], Container]}}, Notebook -> Null|>
                };

                Upload[containerObjectPacketsToUpload];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (oligos and column sample) for ValidShipBetweenSitesQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipBetweenSitesQ" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ValidShipBetweenSitesQ (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ValidShipBetweenSitesQ" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (stock solution sample) for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipBetweenSitesQ" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (oligos and column shelf) for ValidShipBetweenSitesQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (stock solution shelf) for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ValidShipBetweenSitesQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipBetweenSitesQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (oligos and column shelf) for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipBetweenSitesQ (3)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (stock solution shelf) for ValidShipBetweenSitesQ (2)" <> $SessionUUID], Container]}}|>];
                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipBetweenSitesQ (4)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipBetweenSitesQ (1)" <> $SessionUUID], Objects]|>];
            ];
        ]
    ),
    SymbolTearDown :> {
        Module[{allObjs, existingObjs},
            allObjs = Cases[$CreatedObjects, ObjectP[]];
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            Unset[$CreatedObjects];
        ];
    }
];



(* ::Subsection::Closed:: *)
(* shipFromECL*)

DefineTests[shipFromECL,

    {
        Example[{Basic, "Takes input from ShipBetweenSites:"},
            transactions = shipFromECL[
                {
                    Model[Sample, "Milli-Q water"]
                },
                ShipBetweenSites,
                Destination -> Object[Container, Site, "Test Site for shipFromECL (1)" <> $SessionUUID],
                Amount -> {20 Milliliter},
                Container -> {Null}
            ];
            Download[transactions, SamplesIn],
            {{ObjectP[Model[Sample, "Milli-Q water"]]}},
            Variables :> {transactions}
        ]
    },
    SymbolSetUp :> {
        Block[{$DeveloperUpload = True},
            Module[{allObjs, existingObjs, siteModel, siteObject, financingTeam, notebook, user},

                allObjs = {
                    Object[Team, Financing, "Test Team for shipFromECL (1)" <> $SessionUUID],
                    Model[Container, Site, "Test Model Site for shipFromECL (1)" <> $SessionUUID],
                    Object[Container, Site, "Test Site for shipFromECL (1)" <> $SessionUUID],
                    Object[LaboratoryNotebook, "Test Notebook for shipFromECL" <> $SessionUUID],
                    Object[User, "Test User for shipFromECL" <> $SessionUUID]
                };

                existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
                EraseObject[existingObjs, Force -> True, Verbose -> False];
                $CreatedObjects = {};

                {
                    siteModel, siteObject, financingTeam, notebook, user
                } = CreateID[
                    {Model[Container, Site], Object[Container, Site], Object[Team, Financing], Object[LaboratoryNotebook], Object[User]}
                ];

                Upload[{
                    (* Shipping site model *)
                    <|Object -> siteModel, Name -> "Test Model Site for shipFromECL (1)" <> $SessionUUID, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]]|>,
                    (* Shipping site object *)
                    <|Object -> siteObject, Name -> "Test Site for shipFromECL (1)" <> $SessionUUID, Model -> Link[siteModel, Objects]|>,
                    (* Financing team *)
                    <|Object -> financingTeam, Name -> "Test Team for shipFromECL (1)" <> $SessionUUID, DefaultMailingAddress -> Link[siteObject]|>,
                    (* Laboratory notebook *)
                    <|Object -> notebook, Name -> "Test Notebook for shipFromECL" <> $SessionUUID, Replace[Financers] -> {Link[financingTeam, NotebooksFinanced]}, Replace[Editors] -> {Link[financingTeam, Notebooks]}|>,
                    (*User*)
                    <|Object -> user, Name -> "Test User for shipFromECL" <> $SessionUUID, Replace[FinancingTeams] -> {Link[financingTeam, Members]}|>
                }];

            ]
        ]
    },
    SymbolTearDown :> {
        Module[{existingObjs},
            existingObjs = PickList[$CreatedObjects, DatabaseMemberQ[$CreatedObjects]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];
            Unset[$CreatedObjects]
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for shipFromECL" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for shipFromECL" <> $SessionUUID],
        $EmailEnabled = False
    },
    TearDown :> {
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    }
];

(* ::Subsection::Closed:: *)
(*ShipToUser*)

DefineTests[ShipToUser,
    {
        Example[
            {Basic, "Request multiple objects to be returned:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]}
            ],
            {ObjectP[Object[Transaction, ShipToUser]], ObjectP[Object[Transaction, ShipToUser]]},
            Variables :> {transactions}
        ],
        Example[
            {Basic, "Request containers with sample objects to be returned:"},
            transactions = ShipToUser[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID],
                    Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser" <> $SessionUUID]}
            ],
            {ObjectP[Object[Transaction, ShipToUser]], ObjectP[Object[Transaction, ShipToUser]]},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "EmptyContainers", "If an input container is empty, give a message and return Failed:"},
            transactions = ShipToUser[
                {Object[Container, Plate, "Test plate with no contents for ShipToUser" <> $SessionUUID]}
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::EmptyContainers}
        ],
        Example[
            {Additional, "Selects a plate seal for all plates that will be shipped:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]}
            ];
            Download[transactions, PlateSeals],
            {{LinkP[Model[Item, PlateSeal, "id:dORYzZJMop8e"]]}, {}},
            Variables :> {transactions}
        ],

        Example[
            {Additional, "Selects a plate seal for plate containers that will be shipped when multiple container and sample inputs are used:"},
            transactions = ShipToUser[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID],
                    Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]}
            ];
            Download[transactions, PlateSeals],
            {{LinkP[Model[Item, PlateSeal, "id:dORYzZJMop8e"]]}, {}},
            Variables :> {transactions}
        ],

        Example[{Additional, "Cardboard boxes are selected for ambient shipments, and styrofoam boxes are selected for cold shipments:"},
            transactions = ShipToUser[
                {Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                ColdPacking -> {None, Ice, Ice, DryIce}
            ];
            Download[transactions, ShippingContainers[ContainerMaterials]],
            {{{Cardboard}}, {{Cardboard, Styrofoam}}, {{Cardboard, Styrofoam}}},
            Variables :> {transactions}
        ],
        Example[{Additional, "Selects packing materials based on shipment temperature:"},
            transactions = ShipToUser[
                {Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                ColdPacking -> {None, Ice, Ice, DryIce}
            ];
            Download[transactions, {Ice, DryIce, Padding}],
            {
                {{}, {}, {LinkP[Model[Item, Consumable, "Packing peanuts"]]}},
                {ConstantArray[LinkP[Model[Item, Consumable, "Ice pack, 8 oz"]], 26], {}, {}},
                {{}, {LinkP[Model[Sample, "Dry ice"]]}, {}}},
            Variables :> {transactions}
        ],
        Example[{Additional, "Selects a secondary bag for all containers:"},
            transactions =
                ShipToUser[{Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                    ColdPacking -> Null];
            Download[transactions, SecondaryContainers],
            {{LinkP[Model[Container, Bag]], LinkP[Model[Container, Bag]]}},
            Variables :> {transactions}
        ],
        Example[{Additional, "If there is not a box large enough for all of the transaction contents, chooses multiple boxes:"},
            transactions = ShipToUser[{Object[Item, Column, "Test Column Sample for ShipToUser (large)" <> $SessionUUID], Object[Item, Column, "Test Column Sample for ShipToUser (large 2)" <> $SessionUUID]}, ColdPacking -> Null];
            Download[transactions, ShippingContainers],
            {{LinkP[Model[Container, Box]], LinkP[Model[Container, Box]]}},
            Variables :> {transactions}
        ],
        Example[{Additional, "Any sample containers that are too large to fit into any bag will not get a secondary container. MaintenanceShipping will give a message later:"},
            transactions = ShipToUser[{
                Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                ColdPacking -> Null];
            Download[transactions, SecondaryContainers],
            {{LinkP[Model[Container, Bag, "id:aXRlGn6RqLvO"]]}},
            Variables :> {transactions}
        ],
        Example[{Additional, "If any sample is too large to fit into the largest stocked box, no shipping container will be populated. MaintenanceShipping will give a message later:"},
            transactions = ShipToUser[{
                Object[Item, Column, "Test Column Sample for ShipToUser (extra large)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                ColdPacking -> Null];
            Download[transactions, ShippingContainers],
            {{}},
            Variables :> {transactions}
        ],

        Example[
            {Basic, "Request a single object to be returned:"},
            transactions = ShipToUser[
                Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, ShipToUser]]},
            Variables :> {transactions}
        ],
        Example[
            {Additional, "If the samples are at different sites, generates a transaction for each site:"},
            transactions = ShipToUser[
                {Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]}
            ],
            {ObjectP[Object[Transaction, ShipToUser]], ObjectP[Object[Transaction, ShipToUser]]},
            Variables :> {transactions}
        ],
        Example[
            {Additional, "If an item shares a container with other samples, no warning is given that the item is co-localized:"},
            transactions = ShipToUser[
                Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, ShipToUser]]},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "ContainersIncludeAdditionalSamples", "If the sample shares a container with other samples, give a warning that the samples will be transferred to separate containers:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID]}
            ],
            {ObjectP[Object[Transaction, ShipToUser]]},
            Variables :> {transactions},
            Messages :> {Warning::ContainersIncludeAdditionalSamples}
        ],
        Example[
            {Messages, "SiteNotFound", "If a sample's site could not be determined, give a message and return Failed:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample without site for ShipToUser" <> $SessionUUID]}
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::SiteNotFound, Error::InvalidInput}
        ],
        Example[
            {Options, Creator, "Specify the creator for the order:"},
            transactions = ShipToUser[{Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID], Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID], Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]} , Creator -> Object[User, "Test user for notebook-less test protocols"]];
            Download[transactions, Creator],
            {ObjectP[Object[User, "Test user for notebook-less test protocols"]]..},
            Variables :> {transactions}
        ],
        Example[
            {Options, ShippingSpeed, "Specify that the entire transaction should be shipped overnight:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                ShippingSpeed -> NextDay
            ];
            Download[transactions, ShippingSpeed],
            {NextDay},
            Variables :> {transactions}
        ],
        Example[
            {Options, ShippingSpeed, "Specify that samples should be shipped at different rates:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]},
                ShippingSpeed -> {ThreeDay, ThreeDay, FiveDay}
            ];
            Download[transactions, ShippingSpeed],
            {ThreeDay, FiveDay},
            Variables :> {transactions}
        ],
        Example[
            {Options, ShippingSpeed, "ShippingSpeed automatically resolves to NextDay for cold samples and to FiveDay for ambient samples:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]}
            ];
            Download[transactions, ShippingSpeed],
            {NextDay, FiveDay},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "ContainersSpanShipments", "If samples from the same container are specified with different ShippingSpeed options, a warning will be given stating that the samples will be transferred to separate containers:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                ShippingSpeed -> {NextDay, FiveDay, FiveDay}
            ];
            Download[transactions, ShippingSpeed],
            {NextDay, FiveDay},
            Variables :> {transactions},
            Messages :> {Warning::ContainersSpanShipments}
        ],

        Example[
            {Options, ColdPacking, "Specify that the entire transaction should be packed with ice:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]},
                ColdPacking -> Ice
            ];
            Download[transactions, ColdPacking],
            {Ice},
            Variables :> {transactions}
        ],
        Example[
            {Options, ColdPacking, "Specify that some of the samples should be shipped on ice:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]},
                ColdPacking -> {Ice, Ice, None}
            ];
            Download[transactions, ColdPacking],
            {Ice, None},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "ContainersSpanShipments", "If samples from the same container are specified with different ColdPacking options, a warning will be given stating that the samples will be transferred to separate containers:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]},
                ColdPacking -> {Ice, DryIce, None}
            ];
            Download[transactions, ColdPacking],
            {Ice, DryIce, None},
            Variables :> {transactions},
            Messages :> {Warning::ContainersSpanShipments}
        ],
        Example[
            {Options, ColdPacking, "ColdPacking automatically resolves based on the sample's storage condition or on the sample's model's default storage condition:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (2)" <> $SessionUUID]},
                ColdPacking -> Automatic
            ];
            Download[transactions, ColdPacking],
            {Ice, None},
            Variables :> {transactions}
        ],

        Example[
            {Options, Destination, "Specify a destination:"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]
                },
                Destination -> Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID]
            ];
            Download[transactions, Destination],
            {LinkP[Download[Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID], Object]]},
            Variables :> {transactions}
        ],
        Example[
            {Options, Destination, "Destination is automatically resolved from the notebook calling this function:"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]
                }
            ];
            Download[transactions, Destination],
            {LinkP[Download[Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID], Object]]},
            Variables :> {transactions}
        ],
        Example[
            {Options, Destination, "Specify a different destination for some samples:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID]},
                Destination -> {Automatic, Automatic, Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID]}
            ];
            Download[transactions, Destination],
            {LinkP[Download[Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID], Object]], LinkP[Download[Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID], Object]]},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "NoDestination", "If destination is not specified and could not be resolved from the notebook calling this function, give a message and return $Failed:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID]}
            ],
            $Failed,
            SetUp :> {
                Upload[<|
                    Object -> Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID],
                    DefaultMailingAddress -> Null
                |>]
            },
            TearDown :> {
                Upload[<|
                    Object -> Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID],
                    DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID]]
                |>]
            },
            Variables :> {transactions},
            Messages :> {Error::NoDestination, Error::InvalidOption}
        ],
        Example[
            {Messages, "InputLengthMismatch", "If a listed option does not match the length of the sample inputs, give a message and return $Failed:"},
            ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]},
                ShippingSpeed -> {FiveDay, FiveDay, NextDay}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[
            {Messages, "InputLengthMismatch", "If a listed option does not match the length of the samples in an input container, give a message and return $Failed:"},
            ShipToUser[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID]},
                ShippingSpeed -> {FiveDay, FiveDay, NextDay}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],

        Example[
            {Messages, "OwnershipConflict", "If the input samples are not owned by the user's financing team, give a message and return $Failed:"},
            ShipToUser[
                Object[Sample, "Test oligomer without notebook (public) for ShipToUser" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::OwnershipConflict}
        ],
        Example[
            {Messages, "NotShippable", "If the input container samples cannot realistically be shipped, give a message and return $Failed:"},
            ShipToUser[
                {
                    Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 1)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID],
                    Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID]
                }
            ],
            $Failed,
            Messages :> {Error::NotShippable}
        ],

        (* Aliquoting *)
        Example[{Options, Aliquot, "If no aliquoting options are specified, Aliquot resolves to false:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                }
            ];
            Download[transactions, AliquotSamplePreparation],
            {{}},
            Variables :> {transactions}
        ],
        Example[{Options, Aliquot, "Indicate if aliquots should be taken from the SamplesIn and prepared to be used in lieu of the SamplesIn in the transaction. If aliquoting, you must specify a valid combination of aliquot options to indicate how the samples should be prepared:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                Aliquot -> True,
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, Aliquot, "Indicate if aliquots should be taken from the samples found in input containers and prepared to be used in lieu of the SamplesIn in the transaction. If aliquoting, you must specify a valid combination of aliquot options to indicate how the samples should be prepared:"},
            transactions = ShipToUser[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID]},
                Aliquot -> True,
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, AliquotAmount, "Specify the amount of the sample that should be transferred from the SamplesIn into the AliquotSamples. In this case the sample will not be diluted, it will only be transferred:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, TargetConcentration, "Specify that samples should be diluted prior to shipping:"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                TargetConcentration -> 25 Micromolar,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, "Milli-Q water"],
                AliquotAmount -> 100 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null, BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, TargetConcentrationAnalyte, "Specify the component that should be diluted to the specified TargetConcentration prior to shipping:"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                TargetConcentration -> 25 Micromolar,
                TargetConcentrationAnalyte -> Model[Molecule, Oligomer, "Six Monomer Test"],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, "Milli-Q water"],
                AliquotAmount -> 100 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null, BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentVolume, "Specify the desired total volume of the AliquotSamples. After transferring the aliquot volume of the input sample, ShipmentBuffer will be added up to this volume:"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                ShipmentVolume -> 500 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotAmount -> 100 Micro Liter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null, ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where aliquot container has multiple positions):"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where aliquot container has single position):"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                AliquotContainer -> Model[Container, Vessel, "2mL Tube"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {2, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ConcentratedBuffer, "Specify the concentrated buffer source which should be added to each of the AliquotSamples to obtain 1x buffer concentration after dilution of the AliquotSamples:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                AliquotAmount -> 100 Micro Liter,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    },
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDilutionFactor, "Specify the dilution factor by which the concentrated buffer should be diluted in preparing the AliquotSamples to obtain a 1x buffer concentration after dilution of the AliquotSamples:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    },
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDiluent, "Specify the diluent to use to dilute the concentrated buffer in preparing the AliquotSamples:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                BufferDiluent -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.`,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.`,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentBuffer, "Specify the buffer which should be used to dilute the AliquotSamples:"},
            transactions = ShipToUser[
                {Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID]
                },
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, Aliquot, "Indicate if aliquots should be taken from the SamplesIn and prepared to be used in lieu of the SamplesIn in the transaction. If aliquoting, you must specify a valid combination of aliquot options to indicate how the samples should be prepared. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]},
                Aliquot -> True,
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, AliquotAmount, "Specify the amount of the sample that should be transferred from the SamplesIn into the AliquotSamples. In this case the sample will not be diluted, it will only be transferred:"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                AliquotAmount -> 100 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP@Model[Container, Plate, "96-well 2mL Deep Well Plate"]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.1, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, TargetConcentration, "Specify that samples should be diluted prior to shipping. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                TargetConcentration -> 25 Micromolar,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, "Milli-Q water"],
                AliquotAmount -> 100 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Quantity[25, "Micromolar"],
                        AssayVolume -> Quantity[0.2, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, "Milli-Q water"]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentVolume, "Specify the desired total volume of the AliquotSamples. After transferring the aliquot volume of the input sample, ShipmentBuffer will be added up to this volume. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                ShipmentVolume -> 500 Microliter,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotAmount -> 100 Micro Liter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[100., "Microliters"],
                        TargetConcentration -> Null,
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> Null,
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where samples are at multiple sites; Case where aliquot container has multiple positions):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],

        Example[{Options, AliquotContainer, "Specify the type of container that should be used to prepare and house the AliquotSamples. (Case where samples are at multiple sites; Case where aliquot container has single position):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                AliquotContainer -> Model[Container, Vessel, "2mL Tube"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {2, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5`, "Milliliters"],
                        AliquotContainer -> {3, ObjectP[Model[Container, Vessel, "2mL Tube"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ConcentratedBuffer, "Specify the concentrated buffer source which should be added to each of the AliquotSamples to obtain 1x buffer concentration after dilution of the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                AliquotAmount -> 100 Micro Liter,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }, {
                    True,
                    {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                    Quantity[100., "Microliters"],
                    Null,
                    Null,
                    Quantity[0.5, "Milliliters"],
                    LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]], 10.,
                    LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                    Null
                }
                },
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[100., "Microliters"],
                        Null,
                        Null,
                        Quantity[0.5, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDilutionFactor, "Specify the dilution factor by which the concentrated buffer should be diluted in preparing the AliquotSamples to obtain a 1x buffer concentration after dilution of the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[#, {Aliquot, AliquotContainer, AliquotAmount, TargetConcentration, TargetConcentrationAnalyte, AssayVolume, ConcentratedBuffer, BufferDilutionFactor, BufferDiluent, AssayBuffer}] & /@ Download[transactions, AliquotSamplePreparation],
            {
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    },
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                },
                {
                    {
                        True,
                        {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        Quantity[50., "Microliters"],
                        Quantity[5, "Micromolar"],
                        ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        Quantity[0.5`, "Milliliters"],
                        LinkP[Download[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID], Object]],
                        10.`,
                        LinkP[Model[Sample, "id:8qZ1VWNmdLBD"]],
                        Null
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, BufferDiluent, "Specify the diluent to use to dilute the concentrated buffer in preparing the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                BufferDiluent -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> Null,
                        BufferDiluent -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID]],
                        BufferDilutionFactor -> 10.,
                        ConcentratedBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, ShipmentBuffer, "Specify the buffer which should be used to dilute the AliquotSamples. (Case where samples are at multiple sites):"},
            transactions = ShipToUser[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID]
                },
                ShipmentBuffer -> Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                TargetConcentration -> 5 Micromolar,
                ShipmentVolume -> 500 Microliter
            ];
            Download[transactions, AliquotSamplePreparation],
            {
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A1",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>,
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A2",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                },
                {
                    <|
                        Aliquot -> True,
                        AliquotAmount -> Quantity[50., "Microliters"],
                        TargetConcentration -> Quantity[5, "Micromolar"],
                        AssayVolume -> Quantity[0.5, "Milliliters"],
                        AliquotContainer -> {1, ObjectP[Model[Container, Plate, "96-well 2mL Deep Well Plate"]]},
                        AssayBuffer -> LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]],
                        BufferDiluent -> Null,
                        BufferDilutionFactor -> Null,
                        ConcentratedBuffer -> Null,
                        DestinationWell -> "A3",
                        TargetConcentrationAnalyte -> ObjectP[Model[Molecule, Oligomer, "Six Monomer Test"]],
                        AliquotSampleLabel -> _String
                    |>
                }
            },
            Variables :> {transactions}
        ],
        Example[{Options, DestinationWell, "Set the DestinationWell option:"},
            options = ShipToUser[Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID],
                AliquotContainer -> Model[Container, Plate, "96-well 2mL Deep Well Plate"],
                DestinationWell -> "A2",
                Output -> Options
            ];
            Lookup[options, DestinationWell],
            "A2",
            Variables :> {options}
        ],
        Example[{Options, BufferDilutionFactor, "The dilution factor by which the concentrated buffer should be diluted by the BufferDiluent; the diluted version of the ConcentratedBuffer will then be added to any aliquot samples that require dilution, where the volume of this buffer added is the difference between the AliquotAmount and the total AssayVolume:"},
            options = ShipToUser[Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID],
                BufferDilutionFactor -> 10,
                ConcentratedBuffer -> Model[Sample, StockSolution, "10x UV buffer"],
                AliquotAmount -> .9 Milliliter,
                ShipmentVolume -> 1 Milliliter,
                Output -> Options,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[options, BufferDilutionFactor],
            10,
            EquivalenceFunction -> Equal,
            Variables :> {options}
        ],
        Example[{Options, ConcentratedBuffer, "The concentrated buffer which should be diluted by the BufferDilutionFactor with the BufferDiluent; the diluted version of the ConcentratedBuffer will then be added to any aliquot samples that require dilution, where the volume of this buffer added is the difference between the AliquotAmount and the total AssayVolume:"},
            options = ShipToUser[Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID],
                ConcentratedBuffer -> Model[Sample, StockSolution, "10x UV buffer"],
                BufferDilutionFactor -> 10,
                AliquotAmount -> .9 Milliliter,
                ShipmentVolume -> 1 Milliliter,
                Output -> Options,
                BufferDiluent -> Model[Sample, "Milli-Q water"]
            ];
            Lookup[options, ConcentratedBuffer],
            ObjectP[Model[Sample, StockSolution, "10x UV buffer"]],
            Variables :> {options}
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipToUser" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ShipToUser" <> $SessionUUID],
        $EmailEnabled = False
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},
            allObjs = {
                Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToUser" <> $SessionUUID],
                Object[User, "Test User for ShipToUser" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipToUser" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToUser" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipToUser" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipToUser" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipToUser" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToUser" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToUser" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipToUser" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipToUser" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipToUser" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipToUser" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipToUser" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipToUser" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipToUser" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];

        (* Shipping SITE MODEL *)
        Upload[<|
            Type -> Model[Container, Site],
            Name -> "Test Model Site for ShipToUser (1)" <> $SessionUUID,
            ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]],
            DeveloperObject -> True,
            (* This key was added recently and the dimensions come from ECL-2 *)
            Replace[Positions] -> {
                <|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> 105 Meter, MaxDepth -> 78 Meter, MaxHeight -> Null|>
            }
        |>];

        (* SITE 1 *)
        (* This is the only Site created outside the Block[] below. *)
        (* Below, a notebook is created and then designated as the $Notebook for the rest of this SymbolSetUp *)
        Upload[<|
            Type -> Object[Container, Site],
            Name -> "Test Site for ShipToUser (1)" <> $SessionUUID,
            Model -> Link[Model[Container, Site, "Test Model Site for ShipToUser (1)" <> $SessionUUID], Objects],
            DeveloperObject -> True
        |>];
        Upload[
            <|
                Object -> Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID],
                Site -> Link[Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID]]
            |>
        ];

        (* Financing team *)
        Upload[<|
            Type -> Object[Team, Financing],
            Name -> "Test Team for ShipToUser (1)" <> $SessionUUID,
            DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID]],
            DeveloperObject -> True,
            Replace[ExperimentSites] -> {Link[Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID], FinancingTeams]}
        |>];

        (* Laboratory notebook *)
        Upload[<|
            Type -> Object[LaboratoryNotebook],
            Name -> "Test Notebook for ShipToUser" <> $SessionUUID,
            Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID], NotebooksFinanced]},
            Replace[Editors] -> {Link[Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID], Notebooks]},
            DeveloperObject -> True
        |>];

        (* User *)
        Upload[<|
            Type -> Object[User],
            Name -> "Test User for ShipToUser" <> $SessionUUID,
            Replace[FinancingTeams] -> {Link[Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID], Members]},
            DeveloperObject -> True
        |>];

        Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ShipToUser" <> $SessionUUID], Object]},
            ClearDownload[];

            Module[{modelsPacketsToUpload, site2, site2Building1, site2Building1Shelf1, site2Plate1, site2Vessel1, site2Vessel2, site2Vessel3, site2Column1, site2Column2, site2Column3, site2Column4, site2Column5, site2Plate1Sample1, site2Plate1Sample2, site2Vessel1Sample1, site2Vessel2Sample1, site2Vessel3Sample1, site3, site3Building2, site3Building2Shelf2, site3Vessel1, site3Vessel1Sample1, site4, emptyPlate, noSitePlate, noSitePlateSample1, noNotebookSample, compositionUpdatePackets, statusUpdatePackets},

                (* --- Upload all MODELS --- *)
                modelsPacketsToUpload = {
                    (* Building Model *)
                    <|
                        Type -> Model[Container, Building],
                        DeveloperObject -> True,
                        Name -> "Test building model for ShipToUser" <> $SessionUUID,
                        Replace[Positions] -> {
                            <|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>
                        },
                        DefaultStorageCondition -> Link[Model[StorageCondition, "id:7X104vnR18vX"]](* "Ambient Storage" *)
                    |>,

                    (* Shelf Model *)
                    <|
                        Type -> Model[Container, Shelf],
                        DeveloperObject -> True,
                        Name -> "Test shelf model for ShipToUser" <> $SessionUUID,
                        Replace[Positions] -> {
                            <|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>
                        }
                    |>,

                    (* Plate Model *)
                    <|
                        Type -> Model[Container, Plate],
                        DeveloperObject -> True,
                        Name -> "Test place model for ShipToUser" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                        Replace[Positions] -> {
                            <|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>,
                            <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>,
                            <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>,
                            <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>,
                            <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>,
                            <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>
                        }
                    |>,

                    (* Vessel Model 1 *)
                    <|
                        Type -> Model[Container, Vessel],
                        DeveloperObject -> True,
                        Name -> "Test vessel model for ShipToUser" <> $SessionUUID, MaxVolume -> 10Milliliter,
                        Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                        Replace[Positions] -> {
                            <|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>
                        }
                    |>,

                    (* Vessel Model 2 (the 'large container model') *)
                    <|
                        Type -> Model[Container, Vessel],
                        DeveloperObject -> True,
                        Name -> "Large container model for ShipToUser" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                        Replace[Positions] -> {
                            <|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>
                        }
                    |>,

                    (* Column Model 1 *)
                    <|
                        Type -> Model[Item, Column],
                        DeveloperObject -> True,
                        Expires -> False,
                        Name -> "Test Model Column for ShipToUser" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}
                    |>,

                    (* Column Model 2 (large) *)
                    <|
                        Type -> Model[Item, Column],
                        DeveloperObject -> True,
                        Expires -> False,
                        Name -> "Test Model Column (large) for ShipToUser" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}
                    |>,

                    (* Column Model 3 (extra large) *)
                    <|
                        Type -> Model[Item, Column],
                        DeveloperObject -> True,
                        Expires -> False,
                        Name -> "Test Model Column (extra large) for ShipToUser" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}
                    |>,

                    (* Stock Solution Model 1 *)
                    <|
                        Type -> Model[Sample, StockSolution],
                        Name -> "Test Model StockSolution for ShipToUser" <> $SessionUUID,
                        DeveloperObject -> True,
                        Expires -> False
                    |>,

                    (* Stock Solution Model 2 *)
                    <|
                        Type -> Model[Sample, StockSolution],
                        DeveloperObject -> True,
                        Expires -> False,
                        Name -> "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID
                    |>,

                    (* Sample Model 1 ('Oligomer') *)
                    <|
                        Type -> Model[Sample],
                        DeveloperObject -> True,
                        Expires -> False,
                        Name -> "Test Model Oligomer for ShipToUser" <> $SessionUUID
                    |>
                };

                Upload[modelsPacketsToUpload];

                (* --- SITE 2 OBJECTS --- *)

                (* (Site2) *)
                site2 = Upload[
                    <|
                        Type -> Object[Container, Site],
                        Name -> "Test Site for ShipToUser (2)" <> $SessionUUID,
                        DeveloperObject -> True,
                        Model -> Link[Model[Container, Site, "Test Model Site for ShipToUser (1)" <> $SessionUUID], Objects]
                    |>
                ];
                Upload[
                    <|
                        Object -> Object[Container, Site, "Test Site for ShipToUser (2)" <> $SessionUUID],
                        Site -> Link[Object[Container, Site, "Test Site for ShipToUser (2)" <> $SessionUUID]]
                    |>
                ];

                (* (Site2, Building1) *)
                site2Building1 = UploadSample[
                    Model[Container, Building, "Test building model for ShipToUser" <> $SessionUUID],
                    {"Building Slot 1", Object[Container, Site,"Test Site for ShipToUser (2)" <> $SessionUUID]},
                    Name -> "Test building with contents (oligos and column shelf) for ShipToUser (1)" <> $SessionUUID,
                    FastTrack -> True
                ];

                (* (Site2, Building1, Shelf1) *)
                site2Building1Shelf1 = UploadSample[
                    Model[Container,Shelf,"Test shelf model for ShipToUser"<>$SessionUUID],
                    {"Slot 1", Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUser (1)"<>$SessionUUID]},
                    Name -> "Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID,
                    StorageCondition -> Link[Model[StorageCondition, "id:7X104vnR18vX"]](* "Ambient Storage" *)
                ];

                (* (Site2, Building1, Shelf1, all containers and columns on that shelf) *)
                {
                    (*1*)site2Plate1,
                    (*2*)site2Vessel1,
                    (*3*)site2Vessel2,
                    (*4*)site2Vessel3,
                    (*5*)site2Column1,
                    (*6*)site2Column2,
                    (*7*)site2Column3,
                    (*8*)site2Column4,
                    (*9*)site2Column5
                } = UploadSample[
                    {
                        (*1*)Model[Container, Plate, "Test place model for ShipToUser" <> $SessionUUID](* plate1 *),
                        (*2*)Model[Container, Vessel, "Test vessel model for ShipToUser" <> $SessionUUID](* vessel1 *),
                        (*3*)Model[Container, Vessel, "Large container model for ShipToUser" <> $SessionUUID],
                        (*4*)Model[Container, Vessel, "Large container model for ShipToUser" <> $SessionUUID],
                        (*5*)Model[Item, Column, "Test Model Column for ShipToUser" <> $SessionUUID](* column1 *),
                        (*6*)Model[Item, Column, "Test Model Column for ShipToUser" <> $SessionUUID],
                        (*7*)Model[Item, Column, "Test Model Column (large) for ShipToUser" <> $SessionUUID],
                        (*8*)Model[Item, Column, "Test Model Column (large) for ShipToUser" <> $SessionUUID],
                        (*9*)Model[Item, Column, "Test Model Column (extra large) for ShipToUser" <> $SessionUUID]
                    },
                    {
                        (*1*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*2*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*3*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*4*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*5*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*6*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*7*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*8*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]},
                        (*9*){"Slot 1", Object[Container,Shelf,"Test shelf with contents (oligos and column sample) for ShipToUser (1)"<>$SessionUUID]}
                    },
                    Name -> {
                        (*1*)"Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID(* plate1 *),
                        (*2*)"Test vessel with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID(* vessel1 *),
                        (*3*)"Test large vessel for ShipToUser (1)" <> $SessionUUID,
                        (*4*)"Test large vessel for ShipToUser (2)" <> $SessionUUID,
                        (*5*)"Test Column Sample for ShipToUser (1)" <> $SessionUUID(* column1 *),
                        (*6*)"Test Column Sample for ShipToUser (2)" <> $SessionUUID,
                        (*7*)"Test Column Sample for ShipToUser (large)" <> $SessionUUID,
                        (*8*)"Test Column Sample for ShipToUser (large 2)" <> $SessionUUID,
                        (*9*)"Test Column Sample for ShipToUser (extra large)" <> $SessionUUID
                    },
                    StorageCondition -> Link[Model[StorageCondition, "id:7X104vnR18vX"]](* "Ambient Storage" *)
                ];

                (* (Site2, Building1, Shelf1, all samples located in containers on that shelf) *)
                {
                    (*1*)site2Plate1Sample1,
                    (*2*)site2Plate1Sample2,
                    (*3*)site2Vessel1Sample1,
                    (*4*)site2Vessel2Sample1,
                    (*5*)site2Vessel3Sample1
                } = UploadSample[
                    {
                        (*1*)Model[Sample, "Test Model Oligomer for ShipToUser" <> $SessionUUID],
                        (*2*)Model[Sample, "Test Model Oligomer for ShipToUser" <> $SessionUUID],
                        (*3*)Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                        (*4*)Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                        (*5*)Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID]
                    },
                    {
                        (*1*){"A1", Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID]},
                        (*2*){"A2", Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID]},
                        (*3*){"A1", Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID]},
                        (*4*){"A1", Object[Container, Vessel, "Test large vessel for ShipToUser (1)" <> $SessionUUID]},
                        (*5*){"A1", Object[Container, Vessel, "Test large vessel for ShipToUser (2)" <> $SessionUUID]}
                    },
                    Name -> {
                        (*1*)"Test Oligo Sample for ShipToUser (1)" <> $SessionUUID,
                        (*2*)"Test Oligo Sample for ShipToUser (2)" <> $SessionUUID,
                        (*3*)"Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID,
                        (*4*)"Test StockSolution Sample for ShipToUser (in large container 1)" <> $SessionUUID,
                        (*5*)"Test StockSolution Sample for ShipToUser (in large container 2)" <> $SessionUUID
                    },
                    InitialAmount -> {
                        (*1*)1 Milliliter,
                        (*2*)1 Milliliter,
                        (*3*)1 Milliliter,
                        (*4*)1 Milliliter,
                        (*5*)1 Milliliter
                    },
                    StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]](* "Ambient Storage" *)
                ];

                (* --- SITE 3 OBJECTS --- *)

                (* (Site3) *)
                site3 = Upload[
                    <|
                        Type -> Object[Container, Site],
                        Name -> "Test Site for ShipToUser (3)" <> $SessionUUID,
                        DeveloperObject -> True,
                        Model -> Link[Model[Container, Site, "Test Model Site for ShipToUser (1)" <> $SessionUUID], Objects]
                    |>
                ];
                Upload[
                    <|
                        Object -> Object[Container, Site, "Test Site for ShipToUser (3)" <> $SessionUUID],
                        Site -> Link[Object[Container, Site, "Test Site for ShipToUser (3)" <> $SessionUUID]]
                    |>
                ];

                (* (Site3, Building2) *)
                site3Building2 = UploadSample[
                    Model[Container, Building, "Test building model for ShipToUser" <> $SessionUUID],
                    {"Building Slot 1", Object[Container, Site, "Test Site for ShipToUser (3)" <> $SessionUUID]},
                    Name -> "Test building with contents (stock solution shelf) for ShipToUser (2)" <> $SessionUUID,
                    FastTrack -> True
                ];

                (* (Site3, Building2, Shelf2) *)
                site3Building2Shelf2 = UploadSample[
                    Model[Container, Shelf, "Test shelf model for ShipToUser" <> $SessionUUID],
                    {"Slot 1", Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUser (2)" <> $SessionUUID]},
                    Name -> "Test shelf with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID,
                    StorageCondition -> Link[Model[StorageCondition, "id:7X104vnR18vX"]](* "Ambient Storage" *)
                ];

                (* (Site3, Building2, Shelf2, Vessel1) *)
                site3Vessel1 = UploadSample[
                    Model[Container, Vessel, "Test vessel model for ShipToUser" <> $SessionUUID],
                    {"Slot 1", Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID]},
                    Name -> "Test vessel with contents (stock solution sample) for ShipToUser" <> $SessionUUID,
                    StorageCondition -> Link[Model[StorageCondition, "id:7X104vnR18vX"]](* "Ambient Storage" *)
                ];

                (* (Site3, Building2, Shelf2, Vessel1, Sample1) *)
                site3Vessel1Sample1 = UploadSample[
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                    {"A1", Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser" <> $SessionUUID]},
                    Name -> "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID,
                    InitialAmount -> 1 Milliliter,
                    StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]](* "Ambient Storage" *)
                ];

                (* --- Heretofore-disconnected OBJECTS --- *)

                (* Site4 *)
                (* Note: this site was empty before the big ShipToUser SymbolSetUp fix; *)
                (* now it simply contains Object[Sample, "Test oligomer without notebook (public) for ShipToUser" <> $SessionUUID]  *)
                site4 = Upload[
                    <|
                        Type -> Object[Container, Site],
                        Name -> "Test Site for ShipToUser (4)" <> $SessionUUID,
                        DeveloperObject -> True,
                        Model -> Link[Model[Container, Site, "Test Model Site for ShipToUser (1)" <> $SessionUUID], Objects]
                    |>
                ];
                Upload[
                    <|
                        Object -> Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID],
                        Site -> Link[Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID]]
                    |>
                ];

                (* no-Site Plate, Sample1 *)
                noSitePlateSample1 = Upload[
                    <|
                        Type -> Object[Sample],
                        DeveloperObject -> True,
                        Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUser" <> $SessionUUID], Objects],
                        Name -> "Test Oligo Sample without site for ShipToUser" <> $SessionUUID
                    |>
                ];

                (* no-Site Plate *)
                noSitePlate = Upload[
                    <|
                        Type -> Object[Container, Plate],
                        DeveloperObject -> True,
                        Name -> "Test plate without site for ShipToUser" <> $SessionUUID,
                        Model -> Link[Model[Container, Plate, "Test place model for ShipToUser" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ShipToUser" <> $SessionUUID], Container]}}
                    |>
                ];

                (* empty Plate *)
                emptyPlate = Upload[
                    <|
                        Type -> Object[Container, Plate],
                        DeveloperObject -> True,
                        Name -> "Test plate with no contents for ShipToUser" <> $SessionUUID,
                        Model -> Link[Model[Container, Plate, "Test place model for ShipToUser" <> $SessionUUID], Objects]
                    |>
                ];

                (* no-Notebook Sample *)
                noNotebookSample = Upload[
                    <|
                        Type -> Object[Sample],
                        DeveloperObject -> True,
                        Name -> "Test oligomer without notebook (public) for ShipToUser" <> $SessionUUID,
                        Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUser" <> $SessionUUID], Objects],
                        Notebook -> Null,
                        Container -> Link[Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID], Contents, 2]
                    |>
                ];

                (* --- Field Update Packets --- *)
                compositionUpdatePackets = {
                    <|
                        Object -> Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                        Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}
                    |>,
                    <|
                        Object -> Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                        Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}
                    |>,
                    <|
                        Object -> Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID],
                        Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}
                    |>
                };

                statusUpdatePackets = {
                    <|
                        Object -> Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 1)" <> $SessionUUID],
                        Status -> Available
                    |>,
                    <|
                        Object -> Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 2)" <> $SessionUUID],
                        Status -> Available
                    |>
                };

                Upload[Flatten@{compositionUpdatePackets, statusUpdatePackets}];
            ];
        ]
    ),
    SymbolTearDown :> {
        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[
                Object[Notification],
                Recipients == (Object[User, "Test User for ShipToUser" <> $SessionUUID] | Object[User, Emerald, Developer, "hendrik"])
            ],
            Force -> True
        ];

        Module[{allObjs, existingObjs},
            allObjs = {
                Object[Team, Financing, "Test Team for ShipToUser (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToUser" <> $SessionUUID],
                Object[User, "Test User for ShipToUser" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipToUser" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToUser" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipToUser" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipToUser" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipToUser" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUser (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToUser" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToUser" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipToUser" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipToUser" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUser (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUser (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUser (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUser (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipToUser" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUser" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUser (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUser (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipToUser" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipToUser" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipToUser" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipToUser" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ]
    },
    TearDown :> {
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    }
];


(* ::Subsubsection::Closed:: *)
(*ShipToUserOptions*)


DefineTests[ShipToUserOptions,
    {
        Example[
            {Basic, "Returns resolved options for calling ShipToUser on a single sample:"},
            ShipToUserOptions[Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID]],
            Graphics_
        ],
        Example[
            {Basic, "Returns resolved options for calling ShipToUser on multiple samples:"},
            ShipToUserOptions[
                {Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID]}
            ],
            Graphics_
        ],
        Example[
            {Basic, "Returns resolved options for calling ShipToUser on container with samples:"},
            ShipToUserOptions[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserOptions" <> $SessionUUID]}
            ],
            Graphics_
        ],
        Example[
            {Basic, "Returns resolved options for calling ShipToUser on multiple samples with specified shipping conditions:"},
            ShipToUserOptions[
                {
                    Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUserOptions (2)" <> $SessionUUID]
                },
                ColdPacking -> {None, Ice, Ice, DryIce}
            ],
            Graphics_
        ],
        Test["Returned options do not contain any Automatic or $Failed entries:",
            ShipToUserOptions[
                {
                    Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID]
                },
                OutputFormat -> List
            ],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ],
        Example[
            {Options, OutputFormat, "Return the resolved options in a list:"},
            ShipToUserOptions[
                {Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID]},
                OutputFormat -> List
            ],
            {Rule[_Symbol, Except[Automatic | $Failed]]..}
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipToUserOptions" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ShipToUserOptions" <> $SessionUUID]
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},

            $CreatedObjects = {};

            allObjs = {
                Object[Team, Financing, "Test Team for ShipToUserOptions (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToUserOptions" <> $SessionUUID],
                Object[User, "Test User for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipToUserOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToUserOptions" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipToUserOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipToUserOptions" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipToUserOptions" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipToUserOptions" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];


        (* Shipping site model *)
        Upload[<|DeveloperObject -> True, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]], Type -> Model[Container, Site], Name -> "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID|>];

        (* Shipping site object *)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserOptions (1)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID], Objects]|>];

        (* Financing team *)
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ShipToUserOptions (1)" <> $SessionUUID, DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ShipToUserOptions (1)" <> $SessionUUID]]|>];

        (* Laboratory notebook *)
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ShipToUserOptions" <> $SessionUUID, Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ShipToUserOptions (1)" <> $SessionUUID], NotebooksFinanced]}|>];

        (* User *)
        Upload[<|DeveloperObject -> True, Type -> Object[User], Name -> "Test User for ShipToUserOptions" <> $SessionUUID, Replace[FinancingTeams] -> {Link[Object[Team, Financing, "Test Team for ShipToUserOptions (1)" <> $SessionUUID], Members]}|>];

        Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ShipToUserOptions" <> $SessionUUID], Object]},
            ClearDownload[];

            Module[
                {modelsPacketsToUpload, sampleObjectPacketsToUpload, containerObjectPacketsToUpload},

                (* Put together model packets to upload *)
                modelsPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test place model for ShipToUserOptions" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test vessel model for ShipToUserOptions" <> $SessionUUID, MaxVolume -> 10Milliliter,
                        Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Large container model for ShipToUserOptions" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Shelf], Name -> "Test shelf model for ShipToUserOptions" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Building], Name -> "Test building model for ShipToUserOptions" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ShipToUserOptions (2)" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column for ShipToUserOptions" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID, Type -> Model[Sample]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (large) for ShipToUserOptions" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (extra large) for ShipToUserOptions" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}|>
                };

                Upload[modelsPacketsToUpload];

                (* sample objects to upload *)
                sampleObjectPacketsToUpload = {
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserOptions (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserOptions (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserOptions (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserOptions (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserOptions (2)" <> $SessionUUID|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserOptions (large)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserOptions (large 2)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserOptions (extra large)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with no contents for ShipToUserOptions" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipToUserOptions" <> $SessionUUID], Objects]|>,

                    <|DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ShipToUserOptions" <> $SessionUUID|>,

                    <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ShipToUserOptions" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID], Objects], Notebook -> Null|>

                };

                Upload[sampleObjectPacketsToUpload];

                (* container objects to upload *)
                containerObjectPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents (2 oligomer samples) for ShipToUserOptions" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipToUserOptions" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserOptions (1)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserOptions (2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipToUserOptions (1)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipToUserOptions" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserOptions (in large container 1)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipToUserOptions (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipToUserOptions" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserOptions (in large container 2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate without site for ShipToUserOptions" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ShipToUserOptions" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test container without notebook (public) for ShipToUserOptions" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ShipToUserOptions" <> $SessionUUID], Container]}}, Notebook -> Null|>

                };

                Upload[containerObjectPacketsToUpload];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (oligos and column sample) for ShipToUserOptions (1)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserOptions" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ShipToUserOptions (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipToUserOptions (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipToUserOptions (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipToUserOptions (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipToUserOptions (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipToUserOptions (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ShipToUserOptions" <> $SessionUUID], Container]}}|>];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserOptions" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (oligos and column shelf) for ShipToUserOptions (1)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUserOptions (1)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (stock solution shelf) for ShipToUserOptions (2)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipToUserOptions" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserOptions (2)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUserOptions (1)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserOptions (3)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUserOptions (2)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserOptions (4)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID], Objects]|>];

            ];
        ]
    ),
    SymbolTearDown :> {
        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[Object[Notification], Recipients == (Object[User, "Test User for ShipToUserOptions" <> $SessionUUID] | Object[User, Emerald, Developer, "hendrik"])],
            Force -> True
        ];

        Module[{allObjs, existingObjs},
            allObjs = Cases[Flatten[{
                $CreatedObjects,
                Object[Team, Financing, "Test Team for ShipToUserOptions (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToUserOptions" <> $SessionUUID],
                Object[User, "Test User for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipToUserOptions" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipToUserOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserOptions (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToUserOptions" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToUserOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipToUserOptions" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipToUserOptions" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserOptions (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserOptions (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUserOptions (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserOptions (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipToUserOptions" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipToUserOptions" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipToUserOptions" <> $SessionUUID]
            }], ObjectP[]];
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            Unset[$CreatedObjects];
        ]
    },
    TearDown :> {
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    }
];


(* ::Subsubsection::Closed:: *)
(*ShipToUserPreview*)


DefineTests[ShipToUserPreview,
    {
        Example[
            {Basic, "Returns summary table for calling ShipToUser on a single sample:"},
            ShipToUserPreview[Object[Item, Column, "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID]],
            Pane_
        ],
        Example[
            {Basic, "Returns summary table for calling ShipToUser on multiple samples:"},
            ShipToUserPreview[
                {Object[Sample, "Test Oligo Sample for ShipToUserPreview (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserPreview (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID]}
            ],
            Pane_
        ],
        Example[
            {Basic, "Returns summary table for calling ShipToUser on container with samples:"},
            ShipToUserPreview[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserPreview" <> $SessionUUID]}
            ],
            Pane_
        ],
        Example[
            {Basic, "Returns summary table for calling ShipToUser on multiple samples listing the specified shipping conditions:"},
            ShipToUserPreview[
                {
                    Object[Item, Column, "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserPreview (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ShipToUserPreview (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ShipToUserPreview (2)" <> $SessionUUID]
                },
                ColdPacking -> {None, Ice, Ice, DryIce}
            ],
            Graphics_
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipToUserPreview" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ShipToUserPreview" <> $SessionUUID]
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},

            $CreatedObjects = {};

            allObjs = {
                Object[Team, Financing, "Test Team for ShipToUserPreview (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToUserPreview" <> $SessionUUID],
                Object[User, "Test User for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipToUserPreview" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToUserPreview" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipToUserPreview" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipToUserPreview" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipToUserPreview" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipToUserPreview" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];


        (* Shipping site model *)
        Upload[<|DeveloperObject -> True, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]], Type -> Model[Container, Site], Name -> "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID|>];

        (* Shipping site object *)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID], Objects]|>];

        (* Financing team *)
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ShipToUserPreview (1)" <> $SessionUUID, DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ShipToUserPreview (1)" <> $SessionUUID]]|>];

        (* Laboratory notebook *)
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ShipToUserPreview" <> $SessionUUID, Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ShipToUserPreview (1)" <> $SessionUUID], NotebooksFinanced]}|>];

        (* User *)
        Upload[<|DeveloperObject -> True, Type -> Object[User], Name -> "Test User for ShipToUserPreview" <> $SessionUUID, Replace[FinancingTeams] -> {Link[Object[Team, Financing, "Test Team for ShipToUserPreview (1)" <> $SessionUUID], Members]}|>];

        Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ShipToUserPreview" <> $SessionUUID], Object]},
            ClearDownload[];

            Module[
                {modelsPacketsToUpload, sampleObjectPacketsToUpload, containerObjectPacketsToUpload},

                (* Put together model packets to upload *)
                modelsPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test place model for ShipToUserPreview" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test vessel model for ShipToUserPreview" <> $SessionUUID, MaxVolume -> 10Milliliter,
                        Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Large container model for ShipToUserPreview" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Shelf], Name -> "Test shelf model for ShipToUserPreview" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Building], Name -> "Test building model for ShipToUserPreview" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ShipToUserPreview (2)" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column for ShipToUserPreview" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID, Type -> Model[Sample]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (large) for ShipToUserPreview" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (extra large) for ShipToUserPreview" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}|>
                };

                Upload[modelsPacketsToUpload];

                (* sample objects to upload *)
                sampleObjectPacketsToUpload = {
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipToUserPreview (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ShipToUserPreview (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserPreview (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserPreview (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserPreview (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ShipToUserPreview (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserPreview (2)" <> $SessionUUID|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserPreview (large)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserPreview (large 2)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Column Sample for ShipToUserPreview (extra large)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with no contents for ShipToUserPreview" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipToUserPreview" <> $SessionUUID], Objects]|>,

                    <|DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ShipToUserPreview" <> $SessionUUID|>,

                    <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ShipToUserPreview" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID], Objects], Notebook -> Null|>

                };

                Upload[sampleObjectPacketsToUpload];

                (* container objects to upload *)
                containerObjectPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents (2 oligomer samples) for ShipToUserPreview" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ShipToUserPreview (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ShipToUserPreview (2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipToUserPreview" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserPreview (1)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserPreview (2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipToUserPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipToUserPreview" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserPreview (in large container 1)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ShipToUserPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ShipToUserPreview" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ShipToUserPreview (in large container 2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate without site for ShipToUserPreview" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ShipToUserPreview" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test container without notebook (public) for ShipToUserPreview" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ShipToUserPreview" <> $SessionUUID], Container]}}, Notebook -> Null|>

                };

                Upload[containerObjectPacketsToUpload];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (oligos and column sample) for ShipToUserPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserPreview" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ShipToUserPreview (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipToUserPreview (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipToUserPreview (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ShipToUserPreview (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipToUserPreview (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ShipToUserPreview (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ShipToUserPreview" <> $SessionUUID], Container]}}|>];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserPreview" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (oligos and column shelf) for ShipToUserPreview (1)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUserPreview (1)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (stock solution shelf) for ShipToUserPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ShipToUserPreview" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserPreview (2)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUserPreview (1)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserPreview (3)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUserPreview (2)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ShipToUserPreview (4)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID], Objects]|>];

            ];
        ]
    ),
    SymbolTearDown :> {

        (* Erase all Notification objects that were created in the course of these tests *)
        EraseObject[
            Search[Object[Notification], Recipients == (Object[User, "Test User for ShipToUserPreview" <> $SessionUUID] | Object[User, Emerald, Developer, "hendrik"])],
            Force -> True
        ];

        Module[{allObjs, existingObjs},
            allObjs = Cases[Flatten[{
                $CreatedObjects,
                Object[Team, Financing, "Test Team for ShipToUserPreview (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToUserPreview" <> $SessionUUID],
                Object[User, "Test User for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ShipToUserPreview" <> $SessionUUID],
                Model[Container, Building, "Test building model for ShipToUserPreview" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToUserPreview (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToUserPreview" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToUserPreview" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ShipToUserPreview" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ShipToUserPreview" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ShipToUserPreview (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ShipToUserPreview (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ShipToUserPreview (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ShipToUserPreview (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ShipToUserPreview" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ShipToUserPreview" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ShipToUserPreview" <> $SessionUUID]
            }], ObjectP[]];
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            Unset[$CreatedObjects];
        ]
    },
    TearDown :> {
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    }
];


(* ::Subsubsection::Closed:: *)
(*ValidShipToUserQ*)


DefineTests[ValidShipToUserQ,
    {
        Example[
            {Basic, "Check the validity of calling ShipToUser on a single sample:"},
            ValidShipToUserQ[Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID]],
            True
        ],
        Example[
            {Basic, "Check the validity of calling ShipToUser on multiple samples:"},
            ValidShipToUserQ[
                {Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                    Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID]}
            ],
            True
        ],
        Example[
            {Basic, "Check the validity of calling ShipToUser on containers with sample objects:"},
            ValidShipToUserQ[
                {Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipToUserQ" <> $SessionUUID],
                    Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ" <> $SessionUUID]}
            ],
            True
        ],
        Example[
            {Basic, "Check the validity of calling ShipToUser on multiple samples listing the specified shipping conditions:"},
            ValidShipToUserQ[
                {
                    Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID]
                },
                ColdPacking -> {None, Ice, Ice, DryIce}
            ],
            True
        ],
        Example[{Options, OutputFormat, "Validate a ShipToUser call, returning an ECL Test Summary:"},
            ValidShipToUserQ[
                {
                    Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID]
                },
                OutputFormat -> TestSummary
            ],
            _EmeraldTestSummary
        ],
        Example[
            {Options, Verbose, "Validate an ShipToECL, printing a verbose summary of tests as they are run:"},
            ValidShipToUserQ[
                {
                    Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                    Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                    Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID]
                },
                Verbose -> True
            ],
            True
        ]
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ValidShipToUserQ" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test User for ValidShipToUserQ" <> $SessionUUID]
    },
    SymbolSetUp :> (
        Module[{allObjs, existingObjs},

            $CreatedObjects = {};

            allObjs = {
                Object[Team, Financing, "Test Team for ValidShipToUserQ (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ValidShipToUserQ" <> $SessionUUID],
                Object[User, "Test User for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Building, "Test building model for ValidShipToUserQ" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ValidShipToUserQ" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ValidShipToUserQ" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ValidShipToUserQ" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ValidShipToUserQ" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ValidShipToUserQ" <> $SessionUUID]
            };
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False]
        ];


        (* Shipping site model *)
        Upload[<|DeveloperObject -> True, ShippingModel -> Link[Model[Maintenance, Shipping, "Maintenance shipping for ECL-2"]], Type -> Model[Container, Site], Name -> "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID|>];

        (* Shipping site object *)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipToUserQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID], Objects]|>];

        (* Financing team *)
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ValidShipToUserQ (1)" <> $SessionUUID, DefaultMailingAddress -> Link[Object[Container, Site, "Test Site for ValidShipToUserQ (1)" <> $SessionUUID]]|>];

        (* Laboratory notebook *)
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ValidShipToUserQ" <> $SessionUUID, Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ValidShipToUserQ (1)" <> $SessionUUID], NotebooksFinanced]}|>];

        (* User *)
        Upload[<|DeveloperObject -> True, Type -> Object[User], Name -> "Test User for ValidShipToUserQ" <> $SessionUUID, Replace[FinancingTeams] -> {Link[Object[Team, Financing, "Test Team for ValidShipToUserQ (1)" <> $SessionUUID], Members]}|>];

        Block[{$Notebook = Download[Object[LaboratoryNotebook, "Test Notebook for ValidShipToUserQ" <> $SessionUUID], Object]},
            ClearDownload[];

            Module[
                {modelsPacketsToUpload, sampleObjectPacketsToUpload, containerObjectPacketsToUpload},

                (* Put together model packets to upload *)
                modelsPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test place model for ValidShipToUserQ" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[0.1276, "Meters"], Quantity[0.0855, "Meters"], Quantity[0.0444, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test vessel model for ValidShipToUserQ" <> $SessionUUID, MaxVolume -> 10Milliliter,
                        Replace[Dimensions] -> {Quantity[0.012, "Meters"], Quantity[0.012, "Meters"], Quantity[0.032, "Meters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Large container model for ValidShipToUserQ" <> $SessionUUID,
                        Replace[Dimensions] -> {Quantity[203.2, "Millimeters"], Quantity[169.333, "Millimeters"], Quantity[135.467, "Millimeters"]},
                        Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Shelf], Name -> "Test shelf model for ValidShipToUserQ" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[0.8128, "Meters"], MaxDepth -> Quantity[0.762, "Meters"], MaxHeight -> Null|>}|>,

                    <|DeveloperObject -> True, Type -> Model[Container, Building], Name -> "Test building model for ValidShipToUserQ" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8581, "Meters"], MaxDepth -> Quantity[30.4928, "Meters"], MaxHeight -> Null|>}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model StockSolution for ValidShipToUserQ (2)" <> $SessionUUID, Type -> Model[Sample, StockSolution]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column for ValidShipToUserQ" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.2032, "Meters"], Quantity[0.2032, "Meters"], Quantity[0.0762, "Meters"]}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID, Type -> Model[Sample]|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (large) for ValidShipToUserQ" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[0.3, "Meters"], Quantity[0.3, "Meters"], Quantity[0.3, "Meters"]}|>,

                    <|DeveloperObject -> True, Expires -> False, Name -> "Test Model Column (extra large) for ValidShipToUserQ" <> $SessionUUID, Type -> Model[Item, Column], Replace[Dimensions] -> {Quantity[400, "Millimeters"], Quantity[400., "Millimeters"], Quantity[400, "Millimeters"]}|>
                };

                Upload[modelsPacketsToUpload];

                (* sample objects to upload *)
                sampleObjectPacketsToUpload = {
                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipToUserQ (1)" <> $SessionUUID, Replace[Composition] -> {{50 Micromolar, Link[Model[Molecule, Oligomer, "id:O81aEBZnjv6D"]]}}|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipToUserQ (in large container 1)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|Volume -> 1Milliliter, DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test StockSolution Sample for ValidShipToUserQ (in large container 2)" <> $SessionUUID, Status -> Available, StorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]]|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipToUserQ (2)" <> $SessionUUID|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipToUserQ (large)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (large) for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipToUserQ (large 2)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Item, Column], Model -> Link[Model[Item, Column, "Test Model Column (extra large) for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Column Sample for ValidShipToUserQ (extra large)" <> $SessionUUID, Status -> Available|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with no contents for ValidShipToUserQ" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ValidShipToUserQ" <> $SessionUUID], Objects]|>,

                    <|DeveloperObject -> True, Type -> Object[Sample], Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID], Objects], Name -> "Test Oligo Sample without site for ValidShipToUserQ" <> $SessionUUID|>,

                    <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test oligomer without notebook (public) for ValidShipToUserQ" <> $SessionUUID, Model -> Link[Model[Sample, "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID], Objects], Notebook -> Null|>

                };

                Upload[sampleObjectPacketsToUpload];

                (* container objects to upload *)
                containerObjectPacketsToUpload = {
                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents (2 oligomer samples) for ValidShipToUserQ" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ValidShipToUserQ" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (1)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ValidShipToUserQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ValidShipToUserQ" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (in large container 1)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test large vessel for ValidShipToUserQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Large container model for ValidShipToUserQ" <> $SessionUUID], Objects],
                        Replace[Contents] -> {{"A1", Link[Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (in large container 2)" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate without site for ValidShipToUserQ" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test place model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Oligo Sample without site for ValidShipToUserQ" <> $SessionUUID], Container]}}|>,

                    <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test container without notebook (public) for ValidShipToUserQ" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test oligomer without notebook (public) for ValidShipToUserQ" <> $SessionUUID], Container]}}, Notebook -> Null|>

                };

                Upload[containerObjectPacketsToUpload];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (oligos and column sample) for ValidShipToUserQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipToUserQ" <> $SessionUUID], Container]}, {"Slot 2", Link[Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Item, Column, "Test Column Sample for ValidShipToUserQ (2)" <> $SessionUUID], Container]}, {"Slot 3", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ValidShipToUserQ (large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ValidShipToUserQ (large 2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Item, Column, "Test Column Sample for ValidShipToUserQ (extra large)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ValidShipToUserQ (1)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test large vessel for ValidShipToUserQ (2)" <> $SessionUUID], Container]}, {"Slot 1", Link[Object[Container, Vessel, "Test container without notebook (public) for ValidShipToUserQ" <> $SessionUUID], Container]}}|>];


                Upload[<|DeveloperObject -> True, Type -> Object[Container, Shelf], Name -> "Test shelf with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Shelf, "Test shelf model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (oligos and column shelf) for ValidShipToUserQ (1)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ValidShipToUserQ (1)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Building], Name -> "Test building with contents (stock solution shelf) for ValidShipToUserQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Building, "Test building model for ValidShipToUserQ" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipToUserQ (2)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (oligos and column shelf) for ValidShipToUserQ (1)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipToUserQ (3)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID], Objects], Replace[Contents] -> {{"Slot 1", Link[Object[Container, Building, "Test building with contents (stock solution shelf) for ValidShipToUserQ (2)" <> $SessionUUID], Container]}}|>];

                Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for ValidShipToUserQ (4)" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID], Objects]|>];

            ];
        ]
    ),
    SymbolTearDown :> {
        Module[{allObjs, existingObjs},
            allObjs = Cases[Flatten[{
                $CreatedObjects,
                Object[Team, Financing, "Test Team for ValidShipToUserQ (1)" <> $SessionUUID],
                Model[Container, Site, "Test Model Site for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ValidShipToUserQ" <> $SessionUUID],
                Object[User, "Test User for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Plate, "Test place model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Vessel, "Large container model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Shelf, "Test shelf model for ValidShipToUserQ" <> $SessionUUID],
                Model[Container, Building, "Test building model for ValidShipToUserQ" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ValidShipToUserQ (2)" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ValidShipToUserQ" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ValidShipToUserQ" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (large) for ValidShipToUserQ" <> $SessionUUID],
                Model[Item, Column, "Test Model Column (extra large) for ValidShipToUserQ" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (in large container 1)" <> $SessionUUID],
                Object[Sample, "Test StockSolution Sample for ValidShipToUserQ (in large container 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (large)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (large 2)" <> $SessionUUID],
                Object[Item, Column, "Test Column Sample for ValidShipToUserQ (extra large)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with no contents for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents (2 oligomer samples) for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Vessel, "Test large vessel for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (oligos and column sample) for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Shelf, "Test shelf with contents (stock solution sample) for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (oligos and column shelf) for ValidShipToUserQ (1)" <> $SessionUUID],
                Object[Container, Building, "Test building with contents (stock solution shelf) for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (2)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (3)" <> $SessionUUID],
                Object[Container, Site, "Test Site for ValidShipToUserQ (4)" <> $SessionUUID],
                Object[Sample, "Test Oligo Sample without site for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Plate, "Test plate without site for ValidShipToUserQ" <> $SessionUUID],
                Object[Sample, "Test oligomer without notebook (public) for ValidShipToUserQ" <> $SessionUUID],
                Object[Container, Vessel, "Test container without notebook (public) for ValidShipToUserQ" <> $SessionUUID]
            }], ObjectP[]];
            existingObjs = PickList[allObjs, DatabaseMemberQ[allObjs]];
            EraseObject[existingObjs, Force -> True, Verbose -> False];

            Unset[$CreatedObjects];
        ];
    }
];


(* ::Subsection::Closed:: *)
(*ShipToECL*)


(* ::Subsubsection::Closed:: *)
(*ShipToECL*)


DefineTests[ShipToECL,
    {
        Example[
            {Basic, "Generate a transaction to ship samples to ECL:"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[], "my new column" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Automatic},
                Position -> {Automatic, "B1", Automatic},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID], Null},
                Volume -> {2Liter, 1Milliliter, None},
                NumberOfUses -> {None, None, 0},
                Product -> {None, None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Basic, "Update shipping info for transaction objects:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                TrackingNumber -> {"123456", {"654321", "9009882"}},
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]},
                DateShipped -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, {TrackingNumbers, Shipper, DateShipped}],
            {
                {{"123456"},
                    LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions],
                    _DateObject
                },
                {{"654321", "9009882"},
                    LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions],
                    _DateObject
                }
            }
        ],

        Example[{Basic, "When given an empty list, returns an empty list:"},
            ShipToECL[{}],
            {}
        ],

        (* ---------------- *)
        (* -- Additional -- *)
        (* ---------------- *)

        Example[{Additional, "Generate Transactions", "Accepts single input (1 sample in a vessel):"},
            transaction = ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts single input (1 sample in a plate):"},
            transaction = ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                "my new plate" <> CreateUUID[],
                ContainerModel -> Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> "A2",
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts single input (item):"},
            transaction = ShipToECL[
                Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID],
                "my new column" <> CreateUUID[],
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts semi-listed input (samples in vessels):"},
            transaction = ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[]},
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts listed input (samples in vessels):"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "If the same container name and model are specified, the samples will be put into the same container:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter,
                Position -> {"A1", "A2"}
            ];
            Download[transaction, ReceivedSamples[Container][Name]],
            {{"my new plate" <> uuid, "my new plate" <> uuid}},
            Variables :> {transaction, uuid}
        ],

        Example[{Additional, "Generate Transactions", "If the different container names are specified,the samples will be put into different containers:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> uuid, "my new bottle 2" <> uuid},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter,
                Position -> {"A1", "A1"}
            ];
            Download[transaction, ReceivedSamples[Container][Name]],
            {{"my new bottle" <> uuid, "my new bottle 2" <> uuid}},
            Variables :> {transaction, uuid}
        ],

        Example[{Additional, "Generate Transactions", "Accepts semi-listed input:"},
            transaction = ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A2", "A3"},
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts listed input (samples in plates):"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A2", "A3"},
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts semi-listed input (items):"},
            transaction = ShipToECL[
                Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID],
                {"my consumable 1" <> CreateUUID[], "my consumable 2" <> CreateUUID[]},
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Accepts listed input (items):"},
            transaction = ShipToECL[
                {Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my consumable 1" <> CreateUUID[], "my consumable 2" <> CreateUUID[]},
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "A new sample is generated for each input:"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new bottle" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Automatic},
                CoverModel -> {Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID], Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], Null},
                Position -> {"A1", Automatic, Automatic},
                Volume -> {1Milliliter, 1Milliliter, None},
                Product -> {None, None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples],
            {{LinkP[Object[Sample]], LinkP[Object[Sample]], LinkP[Object[Item, Consumable]]}},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Samples have the specified positions:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A1", "A2"},
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedContainers[Contents]],
            {
                {
                    {
                        {"A1", LinkP[Object[Sample]]},
                        {"A2", LinkP[Object[Sample]]}
                    }
                }
            },
            Variables :> {transaction, uuid}
        ],

        Example[{Additional, "Generate Transactions", "If position is not specified for a single-position container, the single position of the container will be used:"},
            transaction = ShipToECL[Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedContainers[Contents]],
            {{{{"A1", LinkP[Object[Sample]]}}}},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "If the same container name and model is used for a plate, samples will be put into the same plate:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid, "my new plate 2" <> uuid},
                Position -> {"A1", "A2", "A3"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedSamples[Container][Name]],
            {{"my new plate" <> uuid, "my new plate" <> uuid, "my new plate 2" <> uuid}},
            Variables :> {transaction, uuid}
        ],

        Example[{Additional, "Generate Transactions", "If model containers are specified, new containers are made with the specified names and samples are put into the correct containers:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Oligomer for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Cells for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> uuid, "my new bottle 2" <> uuid, "my new plate" <> uuid, "my new plate" <> uuid, "my new plate 2" <> uuid},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                Position -> {Automatic, Automatic, "A2", "B2", "A2"},
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1 Milliliter];
            Download[transaction, {ReceivedContainers[Model], ReceivedContainers[Name], ReceivedContainers[Contents][[All, 1]], ReceivedContainers[Contents][[All, 2]][Model]}],
            {
                {
                    {
                        LinkP[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]],
                        LinkP[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]],
                        LinkP[Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]],
                        LinkP[Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]]
                    },
                    {"my new bottle" <> uuid, "my new bottle 2" <> uuid, "my new plate" <> uuid, "my new plate 2" <> uuid},
                    {{"A1"}, {"A1"}, {"A2", "B2"}, {"A2"}},
                    {
                        {LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]]},
                        {LinkP[Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]]},
                        {LinkP[Model[Sample, "Test Model Oligomer for ShipToECL" <> $SessionUUID]], LinkP[Model[Sample, "Test Model Cells for ShipToECL" <> $SessionUUID]]},
                        {LinkP[Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]]}
                    }
                }},
            Variables :> {transaction, uuid}
        ],

        Example[{Additional, "Generate Transactions", "The samples and input containers get the status Transit:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A1", "A2"},
                Volume -> 1Milliliter
            ];
            {Download[transaction, ReceivedSamples[Status]], Download[transaction, ReceivedContainers[Status]]},
            {{{Transit, Transit}}, {{Transit}}},
            Variables :> {transaction, uuid}
        ],

        Example[{Additional, "Generate Transactions", "The samples get the destination:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A1", "A2"},
                Volume -> 1Milliliter
            ];
            {Download[transaction, ReceivedSamples[Destination]]},
            {{{LinkP[$Site], LinkP[$Site]}}},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "Items inherit the source site as their container:"},
            transaction = ShipToECL[Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID], "my new item" <> CreateUUID[],
                Product -> {Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples[Container][Object]],
            {{Download[Object[Container, Site, "Test source site for ShipToECL" <> $SessionUUID], Object]}},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "The logged in user is specified as the Creator of the Transaction object:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter,
                Position -> {"A1", "A2"}
            ];
            Download[transaction, Creator],
            {LinkP[Object[User, "id:n0k9mG8AXZP6"]]},
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "The source of the new samples (and any new containers) is the transaction object created to track their shipment:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[], "my new bottle 2" <> CreateUUID[], "my new plate 2" <> CreateUUID[]},
                Position -> {Automatic, "A1", Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                TrackingNumber -> {"123456", "123456", "7890", "7890"},
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ];
            Download[transaction, {ReceivedSamples[Source], ReceivedContainers[Source]}],
            {
                {{LinkP[transaction[[1]]], LinkP[transaction[[1]]]}, {LinkP[transaction[[1]]], LinkP[transaction[[1]]]}},
                {{LinkP[transaction[[2]]], LinkP[transaction[[2]]]}, {LinkP[transaction[[2]]], LinkP[transaction[[2]]]}}
            },
            Variables :> {transaction}
        ],

        Example[{Additional, "Generate Transactions", "The transaction status is updated by the currently logged in user when creating a transaction:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A1", "A2"},
                Volume -> 1Milliliter,
                DateShipped -> DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            Download[transaction, {StatusLog}],
            {{{{_DateObject, Shipped, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}},
            Variables :> {transaction}
        ],

        Example[{Additional, "Update Transactions", "The transaction status is updated by the currently logged in user when updating a transaction without a DateShipped:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, {StatusLog}],
            {{{{_?DateObjectQ, Pending, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}, {{{_?DateObjectQ, Pending, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}},
            SetUp :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Replace[StatusLog] -> {}, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Replace[StatusLog] -> {}, DateShipped -> Null|>
                    }
                ];
            ),
            TearDown :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Replace[StatusLog] -> {}|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Replace[StatusLog] -> {}|>
                    }
                ]
            )
        ],

        Example[{Additional, "Update Transactions", "The transaction status is updated by the currently logged in user when updating a transaction with a DateShipped:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                DateShipped -> DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, {StatusLog}],
            {{{{_DateObject, Shipped, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}, {{{_DateObject, Shipped, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}},
            SetUp :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Replace[StatusLog] -> {}|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Replace[StatusLog] -> {}|>
                    }
                ];
            ),
            TearDown :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Replace[StatusLog] -> {}|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Replace[StatusLog] -> {}|>
                    }
                ]
            )
        ],

        Example[{Additional, "Update Transactions", "Update shipping info for a single transaction object:"},
            ShipToECL[
                Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID],
                TrackingNumber -> "123456",
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID],
                DateShipped -> DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ],
            Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID][Object]
        ],

        (* ------------- *)
        (* -- Options -- *)
        (* ------------- *)


        Example[{Options, ContainerModel, "ContainerModel may be specified for some inputs and not others:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], None},
                Volume -> {0.5 Milliliter, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples[Container]],
            {{LinkP[Object[Container, Vessel]], LinkP[Object[Container, Site]]}},
            Variables :> {transaction}
        ],
        Example[{Options, CoverModel, "CoverModel may be specified for some inputs and not others:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], None},
                Volume -> {0.5 Milliliter, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples[Container][Cover]],
            {{LinkP[Object[Item, Cap]], Null}},
            Variables :> {transaction}
        ],
        Example[{Options, CoverModel, "CoverModel will be automatically resolved to a placeholder model:"},
            transaction = ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                Volume -> 1 Milliliter
            ];
            Download[transaction,
                {
                    ReceivedContainers[Cover],
                    ReceivedCovers
                }
            ],
            {{
                {LinkP[Object[Item, Cap]]},
                {LinkP[Object[Item, Cap]]}
            }},
            Variables :> {transaction}
        ],
        Example[{Options, CoverModel, "CoverModel will correctly resolve to Null in cases where the ContainerModel is self covering:"},
            transaction = ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[], "my new bottle 3" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "id:dORYzZn0ooaG"],
                    Model[Container, Vessel, "id:01G6nvwRj84A"]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Automatic,
                    Automatic
                },
                Position -> "A1",
                Volume -> 1 Milliliter
            ];
            Download[transaction,
                {
                    ReceivedContainers[Cover],
                    ReceivedCovers
                }
            ],
            {{
                {ObjectP[Object[Item, Cap]], Null, Null},
                {ObjectP[Object[Item, Cap]]}
            }},
            Variables :> {transaction}
        ],
        Example[{Options, CoverModel, "CoverModel can be specified as Null in cases where the container is self covering:"},
            transaction = ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[], "my new bottle 3" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "id:dORYzZn0ooaG"],
                    Model[Container, Vessel, "id:01G6nvwRj84A"]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    None,
                    None
                },
                Position -> "A1",
                Volume -> 1 Milliliter
            ];
            Download[transaction,
                {
                    ReceivedContainers[Cover],
                    ReceivedCovers
                }
            ],
            {{
                {ObjectP[Object[Item, Cap]], Null, Null},
                {ObjectP[Object[Item, Cap]]}
            }},
            Variables :> {transaction},
            Messages :> {}
        ],

        Example[{Options, ShippedRack, "Populate ShippedRack when the shipment includes a rack to hold the other shipped items:"},
            options = ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "id:01G6nvwRj84A"],
                    Model[Container, Vessel, "id:dORYzZn0ooaG"]
                },
                ShippedRack -> {Null, Model[Container, Rack, "Multi-Position Utility Rack"]},
                Position -> "A1",
                Volume -> 1 Milliliter,
                Output -> Options
            ];
            Lookup[options, ShippedRack],
            {Null, ObjectP[Model[Container, Rack]]},
            Variables :> {options}
        ],
        Example[{Options, ShippedRack, "A rack object is created for every ShippedRack:"},
            trans = ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "id:01G6nvwRj84A"],
                    Model[Container, Vessel, "id:dORYzZn0ooaG"]
                },
                ShippedRack -> {Null, Model[Container, Rack, "Multi-Position Utility Rack"]},
                Position -> "A1",
                Volume -> 1 Milliliter
            ];
            Download[Cases[trans, ObjectP[Object[Transaction, ShipToECL]]], ShippedRacks],
            {{Null, ObjectP[Object[Container, Rack]]}},
            Variables :> {trans}
        ],

        Example[{Options, Position, "Position may be specified for some inputs and not others:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate 2" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Position -> {Automatic, "A2"},
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedContainers[Contents]],
            {{{{"A1", LinkP[Object[Sample]]}}, {{"A2", LinkP[Object[Sample]]}}}},
            Variables :> {transaction}
        ],

        Example[{Options, Source, "If not specified, the source of the Transaction object is pulled from the site of the financer of the notebook where the function is called from:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                Position -> {"A1", "A2"}
            ];
            Download[transaction, Source],
            {LinkP[Object[Container, Site, "Test source site for ShipToECL" <> $SessionUUID]]},
            Variables :> {transaction}
        ],

        Example[{Options, Name, "Update the name of existing transactions:"},
            uuid = CreateUUID[];
            Download[ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                Name -> "My transaction" <> uuid
            ], Name],
            {"My transaction" <> uuid <> "_1", "My transaction" <> uuid <> "_2"},
            TearDown :> (
                If[
                    MatchQ[DatabaseMemberQ[{Object[Transaction, ShipToECL, "My transaction" <> uuid <> "_1"], Object[Transaction, ShipToECL, "My transaction" <> uuid <> "_2"]}], {True, True}],
                    Upload[
                        {
                            <|Object -> Object[Transaction, ShipToECL, "My transaction" <> uuid <> "_1"], Name -> "Test transaction for ShipToECL (1)" <> $SessionUUID|>,
                            <|Object -> Object[Transaction, ShipToECL, "My transaction" <> uuid <> "_2"], Name -> "Test transaction for ShipToECL (2)" <> $SessionUUID|>
                        }
                    ]
                ]
            ),
            Variables :> {uuid}
        ],

        Example[{Options, Name, "Name the transaction being created:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Position -> {"A1", "A2"},
                Volume -> 1Milliliter,
                Name -> "My new transaction" <> uuid
            ];
            Download[transaction, Name],
            {"My new transaction" <> uuid},
            Variables :> {transaction, uuid}
        ],

        Example[{Options, Name, "If multiple transactions are generated, an index is appended to the name:"},
            uuid = CreateUUID[];
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> uuid, "my new plate" <> uuid},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Position -> {Automatic, "A2"},
                Name -> "My new transaction" <> uuid,
                Volume -> 1Milliliter,
                DateShipped -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 29, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];
            Download[transaction, Name],
            {"My new transaction" <> uuid <> "_1", "My new transaction" <> uuid <> "_2"},
            Variables :> {transaction, uuid}
        ],

        Example[{Options, StorageCondition, "If StorageCondition is not specified, the new samples inherit the DefaultStorageCondition of the model:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter
            ];
            {Download[transaction, ReceivedSamples[StorageCondition]], Download[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]}, DefaultStorageCondition]},
            {{{ObjectP[Model[StorageCondition, "Refrigerator"]], ObjectP[Model[StorageCondition, "Ambient Storage"]]}}, {ObjectP[Model[StorageCondition, "Refrigerator"]], ObjectP[Model[StorageCondition, "Ambient Storage"]]}},
            Variables :> {transaction}
        ],

        Example[{Options, StorageCondition, "Specify StorageCondition to be the same for all samples:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                StorageCondition -> AmbientStorage,
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedSamples[StorageCondition]],
            {{LinkP[Model[StorageCondition, "Ambient Storage"]], LinkP[Model[StorageCondition, "Ambient Storage"]]}},
            Variables :> {transaction}
        ],

        Example[{Options, StorageCondition, "Specify a StorageCondition for each sample:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                StorageCondition -> {Freezer, DeepFreezer},
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedSamples[StorageCondition]],
            {{LinkP[Model[StorageCondition, "Freezer"]], LinkP[Model[StorageCondition, "Deep Freezer"]]}},
            Variables :> {transaction}
        ],

        Example[{Options, StorageCondition, "Specify a StorageCondition some samples, and let other samples default from the model:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                StorageCondition -> {Freezer, Automatic},
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivedSamples[StorageCondition]],
            {{LinkP[Model[StorageCondition, "Freezer"]], LinkP[Model[StorageCondition, "Refrigerator"]]}},
            Variables :> {transaction}
        ],

        Example[{Options, Destination, "Specify the destination where the samples will be sent:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Destination -> Object[Container, Site, "Test destination site for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ];
            Download[transaction, Destination],
            {LinkP[Object[Container, Site, "Test destination site for ShipToECL" <> $SessionUUID]]},
            Variables :> {transaction}
        ],

        Example[{Options, Volume, "Specify a different volume for each sample:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                Volume -> {0.5 Milliliter, 1 Milliliter}
            ];
            Download[transaction, ReceivedSamples[{Volume, VolumeLog}]],
            {{
                {Quantity[0.0005`, "Liters"], {{_?DateObjectQ, Quantity[0.0005`, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}}},
                {Quantity[0.001`, "Liters"], {{_?DateObjectQ, Quantity[0.001`, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Volume, "Specify the same volume for all the samples:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                Volume -> 0.5 Milliliter
            ];
            Download[transaction, ReceivedSamples[{Volume, VolumeLog}]],
            {{
                {Quantity[0.0005`, "Liters"], {{_?DateObjectQ, Quantity[0.0005`, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}}},
                {Quantity[0.0005`, "Liters"], {{_?DateObjectQ, Quantity[0.0005`, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Volume, "Specify a volume for some but not all of the samples:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new item" <> CreateUUID[]},
                Position -> {"A1", None},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    None
                },
                Volume -> {0.5 Milliliter, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples[{Volume, VolumeLog}]],
            {{
                {Quantity[0.0005`, "Liters"], {{_?DateObjectQ, Quantity[0.0005`, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}}},
                {Null, {}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Volume, "If mass is provided and density is known, the volume is calculated:"},
            transaction = ShipToECL[Model[Sample, "Test Model Chemical with density for ShipToECL" <> $SessionUUID], "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Mass -> 95Gram
            ];
            Download[transaction, ReceivedSamples[{Volume, VolumeLog, Mass, MassLog}]],
            {{{
                Quantity[0.1, "Liters"],
                {{_?DateObjectQ, Quantity[0.1, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}},
                Quantity[95., "Grams"],
                {{_?DateObjectQ, Quantity[95., "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerWeight}}
            }}},
            Variables :> {transaction}
        ],
        Example[{Options, Source, "Specify the site where the samples are being shipped from:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Null},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], Null},
                Source -> Object[Container, Site, "Test secondary source site for ShipToECL" <> $SessionUUID],
                Volume -> {1Milliliter, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, Source],
            {LinkP[Object[Container, Site, "Test secondary source site for ShipToECL" <> $SessionUUID]]},
            Variables :> {transaction}
        ],

        Example[{Options, NumberOfUses, "Specify a different NumberOfUses for each sample:"},
            transaction = ShipToECL[
                {Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID], Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID]},
                {"new column 1", "new column 2"},
                NumberOfUses -> {3, 15},
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID
                ]
            ];
            Download[transaction, ReceivedSamples[NumberOfUses]],
            {{3, 15}},
            Variables :> {transaction, newID1, newID2}
        ],

        Example[{Options, NumberOfUses, "Specify the same NumberOfUses for all the samples:"},
            transaction = ShipToECL[
                {Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID], Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID]},
                {"new column 1", "new column 2"},
                NumberOfUses -> 5,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ];
            Download[transaction, ReceivedSamples[NumberOfUses]],
            {{5, 5}},
            Variables :> {transaction}
        ],

        Example[{Options, NumberOfUses, "Specify a NumberOfUses for some but not all of the samples:"},
            transaction = ShipToECL[
                {Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID], Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    None
                },
                Position -> {"A1", None},
                NumberOfUses -> {None, 4},
                Volume -> {1Milliliter, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Quiet[Download[transaction, ReceivedSamples[NumberOfUses]], Download::FieldDoesntExist],
            {{$Failed, 4}},
            Variables :> {transaction}
        ],
        Example[{Options, Product, "Specify a different Product for each sample:"},
            transaction = ShipToECL[
                {Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                Position -> {"A1", "A2"},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Product -> {Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID], Object[Product, "Test product for ShipToECL (2)" <> $SessionUUID]},
                Volume -> 0.3Milliliter
            ];
            Download[transaction, ReceivedSamples[Product]],
            {{LinkP[Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]], LinkP[Object[Product, "Test product for ShipToECL (2)" <> $SessionUUID]]}},
            Variables :> {transaction}
        ],

        Example[{Options, Product, "Specify the same Product for all the samples:"},
            transaction = ShipToECL[
                {Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Position -> {"A1", "A2"},
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID],
                Volume -> 0.3Milliliter
            ];
            Download[transaction, ReceivedSamples[Product]],
            {{LinkP[Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]], LinkP[Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]]}},
            Variables :> {transaction}
        ],

        Example[{Options, Product, "Specify a Product for some but not all of the samples:"},
            transaction = ShipToECL[
                {Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new item" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {None, Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    None,
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Position -> {None, "A2"},
                Product -> {Object[Product, "Test product for ShipToECL (2)" <> $SessionUUID], None},
                Volume -> {None, 0.3Milliliter}
            ];
            Download[transaction, ReceivedSamples[Product]],
            {{LinkP[Object[Product, "Test product for ShipToECL (2)" <> $SessionUUID]], Null}},
            Variables :> {transaction}
        ],

        Example[{Options, Count, "Specify a different count for each sample:"},
            transaction = ShipToECL[
                {Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]
                },
                Count -> {5, 10}
            ];
            Download[transaction, ReceivedSamples[{Count, CountLog}]],
            {{
                {5, {{_?DateObjectQ, 5, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}},
                {10, {{_?DateObjectQ, 10, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Count, "Specify the same count for all the samples:"},
            transaction = ShipToECL[
                {Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]
                },
                Count -> 20
            ];
            Download[transaction, ReceivedSamples[{Count, CountLog}]],
            {{
                {20, {{_?DateObjectQ, 20, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}},
                {20, {{_?DateObjectQ, 20, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Count, "Specify a count for some but not all of the samples:"},
            transaction = ShipToECL[
                {Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    None
                },
                Count -> {20, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples[{Count, CountLog}]],
            {{
                {20, {{_?DateObjectQ, 20, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}}},
                {Null, {}}
            }},
            Variables :> {transaction}
        ],
        Example[{Options, Count, "If mass is provided and tablet weight is known, the count is calculated (rounding to the nearest whole number):"},
            transaction = ShipToECL[
                Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Mass -> 20.2Gram
            ];
            Download[transaction, ReceivedSamples[{Count, CountLog, Mass, MassLog}]],
            {{{
                20,
                {{_?DateObjectQ, 20, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}},
                Quantity[20.2, "Grams"],
                {{_?DateObjectQ, Quantity[20.2, "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerWeight}}
            }}},
            Variables :> {transaction}
        ],

        Example[{Options, Mass, "Specify a different mass for each sample:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Mass -> {0.5 Gram, 1 Gram}];
            Download[transaction, ReceivedSamples[{Mass, MassLog}]],
            {{
                {Quantity[0.5, "Grams"], {{_?DateObjectQ, Quantity[0.5, "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], WeightMeasurementStatusP}}},
                {Quantity[1., "Grams"], {{_?DateObjectQ, Quantity[1., "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], WeightMeasurementStatusP}}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Mass, "Specify the same mass for all the samples:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Mass -> 0.5 Gram];
            Download[transaction, ReceivedSamples[{Mass, MassLog}]],
            {{
                {Quantity[0.5, "Grams"], {{_?DateObjectQ, Quantity[0.5, "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], WeightMeasurementStatusP}}},
                {Quantity[0.5, "Grams"], {{_?DateObjectQ, Quantity[0.5, "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], WeightMeasurementStatusP}}}
            }},
            Variables :> {transaction}
        ],

        Example[{Options, Mass, "Specify a mass for some but not all of the samples:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new item" <> CreateUUID[]},
                Position -> {"A1", None},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    None
                },
                Mass -> {0.5 Gram, None},
                Product -> {None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]}
            ];
            Download[transaction, ReceivedSamples[{Mass, MassLog}]],
            {{
                {Quantity[0.5, "Grams"], {{_?DateObjectQ, Quantity[0.5, "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], WeightMeasurementStatusP}}},
                {Null, {}}
            }},
            Variables :> {transaction}
        ],
        Example[{Options, Mass, "If volume is provided and density is known, the mass is calculated:"},
            transaction = ShipToECL[
                Model[Sample, "Test Model Chemical with density for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 0.1Liter
            ];
            Download[transaction, ReceivedSamples[{Volume, VolumeLog, Mass, MassLog}]],
            {{{
                Quantity[0.1, "Liters"],
                {{_?DateObjectQ, Quantity[0.1, "Liters"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerVolume}},
                Quantity[95., "Grams"],
                {{_?DateObjectQ, Quantity[95., "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerWeight}}
            }}},
            Variables :> {transaction}
        ],
        Example[{Options, Mass, "If count is provided and tablet weight is known, the mass is calculated:"},
            transaction = ShipToECL[
                Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Count -> 20
            ];
            Download[transaction, ReceivedSamples[{Count, CountLog, Mass, MassLog}]],
            {{{
                20,
                {{_?DateObjectQ, 20, LinkP[Object[User, "id:n0k9mG8AXZP6"]]}},
                Quantity[20., "Grams"],
                {{_?DateObjectQ, Quantity[20., "Grams"], LinkP[Object[User, "id:n0k9mG8AXZP6"]], InitialManufacturerWeight}}
            }}},
            Variables :> {transaction}
        ],
        Example[{Options, ExpectedDeliveryDate, "Specify an expected delivery date when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                ExpectedDeliveryDate -> DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, DateExpected],
            {_DateObject, _DateObject}
        ],

        Example[{Options, ExpectedDeliveryDate, "Specify an expected delivery date for each object when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                ExpectedDeliveryDate -> {DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 4, 5, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
                }
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, DateExpected],
            {_DateObject, _DateObject}
        ],

        Example[{Options, ExpectedDeliveryDate, "Specify an expected delivery date for some but not all of the objects when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                ExpectedDeliveryDate -> {DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`], None}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, DateExpected],
            {_DateObject, Null}
        ],
        Example[{Options, ExpectedDeliveryDate, "When updating shipping information, Automatic ExpectedDeliveryDate will leave the existing date expected in place, None will clear the existing date expected, and a new date expected will overwrite the old date expected:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                ExpectedDeliveryDate -> DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                ExpectedDeliveryDate -> {Automatic, None, DateObject[List[2018, 4, 8, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]}, DateExpected],
            {_DateObject, Null, _DateObject},
            SetUp :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], DateExpected -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], DateExpected -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID], DateExpected -> Null|>
                    }
                ];
            ),
            TearDown :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], DateExpected -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], DateExpected -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID], DateExpected -> Null|>
                    }
                ]
            )
        ],
        Example[{Options, Shipper, "Specify a shipper when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions]}
        ],

        Example[{Options, Shipper, "Specify a shipper for each object when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], LinkP[Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID], Transactions]}
        ],

        Example[{Options, Shipper, "Specify a shipper for some but not all of the objects when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], None},
                TrackingNumber -> {"12345", None}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], Null}
        ],
        Example[{Options, Shipper, "When updating shipping information, Automatic Shipper will leave the existing Shipper in place, None will clear the existing Shipper, and a new Shipper will overwrite the old Shipper:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ];
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                Shipper -> {Automatic, None, Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], Null, LinkP[Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID], Transactions]},
            SetUp :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Shipper -> Link[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], Replace[TrackingNumbers] -> {}, Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                            Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null,
                            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                        |>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                            Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null,
                            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                        |>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID], Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                            Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null,
                            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                        |>
                    }
                ];
            ),
            TearDown :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Shipper -> Link[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], Replace[TrackingNumbers] -> {}, Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                            Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null,
                            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                        |>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                            Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null,
                            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                        |>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID], Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                            Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null,
                            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                        |>
                    }
                ]
            )
        ],

        Example[{Options, TrackingNumber, "Specify a tracking number when updating shipping information. (Shipper must also be provided, or must already be populated in the transaction object):"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                TrackingNumber -> "123456",
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID]
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, TrackingNumbers],
            {{"123456"}, {"123456"}}
        ],

        Example[{Options, TrackingNumber, "Specify a tracking number for each object when updating shipping information. (Shipper must also be provided, or must already be populated in the transaction object):"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                TrackingNumber -> {"123456", "654321"},
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, TrackingNumbers],
            {{"123456"}, {"654321"}}
        ],

        Example[{Options, TrackingNumber, "Specify a tracking number for some but not all of the objects when updating shipping information. (Shipper must also be provided, or must already be populated in the transaction object):"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID],
                    Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                TrackingNumber -> {"123456", None},
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Automatic}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, TrackingNumbers],
            {{"123456"}, {}}
        ],
        Example[{Options, TrackingNumber, "When updating shipping information, Automatic TrackingNumber will leave the existing tracking number in place, None will clear the existing tracking number, and a new tracking number will overwrite the old tracking number:"},
            Upload[<|Object -> #, Replace[TrackingNumbers] -> {"123456"}, Shipper -> Link[Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID], Transactions]|>& /@
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]}
            ];
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                TrackingNumber -> {Automatic, None, {"98765", "33457"}}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]}, TrackingNumbers],
            {{"123456"}, {}, {"98765", "33457"}}
        ],

        Example[{Options, DateShipped, "Specify a date shipped when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                DateShipped -> DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, DateShipped],
            {_DateObject, _DateObject}
        ],

        Example[{Options, DateShipped, "Specify a date shipped for each object when updating shipping information:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                DateShipped -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]}, DateShipped],
            {_DateObject, _DateObject}
        ],

        Example[{Options, DateShipped, "When updating shipping information, Automatic DateShipped will leave the existing date shipped in place, None will clear the existing date shipped and revert the transaction status to Pending, and a new date shipped will overwrite the old date shipped:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                DateShipped -> DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                DateShipped -> {Automatic, None, DateObject[List[2018, 4, 8, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];

            (* check that the fields were properly updated*)
            Download[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID]},
                {DateShipped, Status, StatusLog}],
            {
                {
                    _DateObject,
                    Shipped,
                    {
                        {_DateObject, Shipped, LinkP[Object[User]]},
                        {_?DateObjectQ, Shipped, LinkP[Object[User]]}
                    }
                },
                {
                    _DateObject,
                    Pending,
                    {
                        {_DateObject, Shipped, LinkP[Object[User]]},
                        {_?DateObjectQ, Pending, LinkP[Object[User]]}}
                },
                {
                    _DateObject,
                    Shipped,
                    {
                        {_DateObject, Shipped, LinkP[Object[User]]},
                        {_DateObject, Shipped, LinkP[Object[User]]}}
                }
            },
            SetUp :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>
                    }
                ];
            ),
            TearDown :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>
                    }
                ]
            )
        ],


        Example[{Options, DateShipped, "Specify a date shipped when generating a transaction:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                DateShipped -> DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            Download[transaction, DateShipped],
            {_DateObject},
            Variables :> {transaction}
        ],

        Example[{Options, DateShipped, "Specify a date shipped for each object when generating a transaction. Samples different with dates shipped are put into separate transactions:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                DateShipped -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 29, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];
            Download[transaction, DateShipped],
            {_DateObject, _DateObject},
            Variables :> {transaction}
        ],

        Example[{Options, DateShipped, "Specify a date shipped for some but not all of the objects when generating a transaction. If DateShipped is specified, Status is Shipped; otherwise, Status is Pending:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                DateShipped -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], None}
            ];
            Download[transaction, {DateShipped, Status}],
            {{_DateObject, Shipped}, {Null, Pending}},
            Variables :> {transaction}
        ],

        Example[{Options, ExpectedDeliveryDate, "Specify an expected delivery date when generating a transaction:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                ExpectedDeliveryDate -> DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]
            ];
            Download[transaction, DateExpected],
            {_DateObject},
            Variables :> {transaction}
        ],

        Example[{Options, ExpectedDeliveryDate, "Specify an expected delivery date for each object when generating a transaction. Samples with different dates shipped are put into separate transactions:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                ExpectedDeliveryDate -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 29, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ];
            Download[transaction, DateExpected],
            {_DateObject, _DateObject},
            Variables :> {transaction}
        ],

        Example[{Options, ExpectedDeliveryDate, "Specify an expected delivery date for some but not all of the objects when generating a transaction.:"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                ExpectedDeliveryDate -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], None}
            ];
            Download[transaction, DateExpected],
            {_DateObject, Null},
            Variables :> {transaction}
        ],

        Example[{Options, TrackingNumber, "Specify a tracking number when generating a transaction. (Shipper must be provided along with tracking number):"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                TrackingNumber -> "123456",
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ];
            Download[transaction, TrackingNumbers],
            {{"123456"}},
            Variables :> {transaction}
        ],

        Example[{Options, TrackingNumber, "Specify a tracking number for each object when generating a transaction. Samples with different dates shipped are put into separate transactions. (Shipper must be provided along with tracking number):"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                TrackingNumber -> {"123456", "654321"},
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ];
            Download[transaction, TrackingNumbers],
            {{"123456"}, {"654321"}},
            Variables :> {transaction}
        ],

        Example[{Options, TrackingNumber, "Specify a tracking number for some but not all of the objects when generating a transaction. (TrackingNumber and Shipper must be provided together.):"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                TrackingNumber -> {"123456", None},
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], None}
            ];
            Download[transaction, TrackingNumbers],
            {{"123456"}, {}},
            Variables :> {transaction}
        ],

        Example[{Options, Shipper, "Specify a shipper when generating a transaction. (TrackingNumber and Shipper must be provided together.):"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID],
                TrackingNumber -> "123321-0"
            ];
            Download[transaction, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions]},
            Variables :> {transaction}
        ],

        Example[{Options, Shipper, "Specify a shipper for each object when generating a transaction. Samples with different dates shipped are put into separate transactions. (TrackingNumber and Shipper must be provided together.):"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID]},
                TrackingNumber -> {"1233-0421-33", "5666-009ghgt"}
            ];
            Download[transaction, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], LinkP[Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID], Transactions]},
            Variables :> {transaction}
        ],

        Example[{Options, Shipper, "Specify a shipper for some but not all of the objects when generating a transaction. (TrackingNumber and Shipper must be provided together.):"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                Shipper -> {Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], None},
                TrackingNumber -> {"56yy-09o99-pp95", None}
            ];
            Download[transaction, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions], Null},
            Variables :> {transaction}
        ],

        Example[{Options, ContainerOut, "Specify that all samples should be transferred to a different container upon arrival:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> {1Milliliter, 1Milliliter},
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ];
            Download[transaction, {TransferSamples, TransferContainers}],
            {
                {
                    {
                        LinkP[Object[Sample]],
                        LinkP[Object[Sample]]
                    },
                    {
                        LinkP[Model[Container, Vessel, "50mL Tube"]],
                        LinkP[Model[Container, Vessel, "50mL Tube"]]
                    }
                }
            },
            Variables :> {transaction}
        ],
        Example[{Options, EmptyContainers, "Specify empty containers to be used for parameterization:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> {1Milliliter, 1Milliliter},
                EmptyContainers -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                EmptyContainerCovers -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]}
            ];
            Download[transaction, EmptyContainers[Model]],
            {{LinkP[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]]}},
            Variables :> {transaction}
        ],

        (* Note: keep EmptyContainers 2 models long, and expect 2 different objects out in EmptyContainers *)
        Example[{Options, EmptyContainers, "If provided Model(s), Object(s) will be generated to represent the empty containers being shipped:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> {1Milliliter, 1Milliliter},
                EmptyContainers -> {Model[Container, Vessel, "Test ShipToECL EmptyContainer Model" <> $SessionUUID], Model[Container, Vessel, "Test ShipToECL EmptyContainer Model" <> $SessionUUID]},
                EmptyContainerCovers -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]}
            ];
            Download[transaction, EmptyContainers],
            {{LinkP[Object[Container, Vessel]], LinkP[Object[Container, Vessel]]}}, (* Length of EmptyContainers is 2 models so we expect 2 objects *)
            Variables :> {transaction}
        ],

        Example[{Options, ContainerOut, "Specify that some samples should be transferred to a different container upon arrival:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID], Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[], "my new item" <> CreateUUID[]},
                Position -> {Automatic, "A2", None},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    None
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    None
                },
                NumberOfUses -> {None, None, 4},
                Volume -> {1Milliliter, 1Milliliter, None},
                Product -> {None, None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]},
                ContainerOut -> {Model[Container, Vessel, "50mL Tube"], Model[Container, Vessel, "1L Glass Bottle"], None}
            ];
            Download[transaction, {TransferSamples, TransferContainers}],
            {
                {
                    {
                        LinkP[Object[Sample]],
                        LinkP[Object[Sample]]
                    },
                    {
                        LinkP[Model[Container, Vessel, "50mL Tube"]],
                        LinkP[Model[Container, Vessel, "1L Glass Bottle"]]
                    }
                }
            },
            Variables :> {transaction}
        ],

        Example[{Options, ReceivingTolerance, "Specify the allowable difference between received amount and expected amount for any ordered samples:"},
            transaction = ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ReceivingTolerance -> 2 * Percent,
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter
            ];
            Download[transaction, ReceivingTolerance],
            {2.` * Percent},
            Variables :> {transaction}
        ],

        (* -------------- *)
        (* -- Messages -- *)
        (* -------------- *)

        Example[{Messages, "CountNotRequired", "If count is provided but the sample is not a tablet, throws an error:"},
            ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Count -> 20,
                Volume -> 0.1Liter
            ],
            $Failed,
            Messages :> {Error::CountNotRequired, Error::InvalidOption}
        ],
        Example[{Messages, "ContainerOutNotValidated", "Give a warning if it cannot be determined whether the specified container out is large enough to hold the sample:"},
            ShipToECL[
                Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Mass -> 5Gram,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Messages :> {Warning::ContainerOutNotValidated},
            Variables :> {transaction}
        ],
        Example[{Messages, "VolumeExceedsContainerOut", "If ContainerOut is too small to hold the sample volume, give a message and fail:"},
            ShipToECL[
                Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID],
                "my new bottle" <> CreateUUID[],
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Volume -> 1Liter,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ],
            $Failed,
            Messages :> {Error::VolumeExceedsContainerOut, Error::InvalidOption}
        ],

        Example[{Messages, "ContainerModelNotRequired", "If ContainerModel is specified for an item, give a message and fail:"},
            ShipToECL[
                Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID],
                "my new item" <> CreateUUID[],
                NumberOfUses -> 4,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID],
                ContainerModel -> Model[Container, Vessel, "50mL Tube"]
            ],
            $Failed,
            Messages :> {Error::ContainerModelNotRequired, Error::InvalidOption}
        ],

        Example[{Messages, "PositionNotRequired", "If Position is specified for an item, give a message and fail:"},
            ShipToECL[
                Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID],
                "my new item" <> CreateUUID[],
                NumberOfUses -> 4,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID],
                Position -> "A1"
            ],
            $Failed,
            Messages :> {Error::PositionNotRequired, Error::InvalidOption}
        ],


        Example[{Messages, "ContainerOutNotRequired", "If ContainerOut is specified for an item, give a message and fail:"},
            ShipToECL[
                Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID],
                "my new item" <> CreateUUID[],
                NumberOfUses -> 4,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID],
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ],
            $Failed,
            Messages :> {Error::ContainerOutNotRequired, Error::InvalidOption}
        ],

        Example[{Messages, "NameInUse", "If a name is already in use, give a message and fail:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my existing bottle for ShipToECL" <> $SessionUUID, "my new bottle" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::NameInUse, Error::InvalidInput}
        ],

        Example[{Messages, "NameInUse", "If a name is already in use, give a message and fail:"},
            ShipToECL[
                Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID],
                "my existing column for ShipToECL" <> $SessionUUID,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::NameInUse, Error::InvalidInput}
        ],

        Example[{Messages, Name, "If the name is already in use, throws an error and fails:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A1", "A2"},
                Volume -> 1Milliliter,
                Name -> "My existing transaction for ShipToECL" <> $SessionUUID
            ],
            $Failed,
            Variables :> {transaction},
            Messages :> {Error::NonUniqueName, Error::InvalidOption}
        ],
        Example[{Messages, Name, "If the name is already in use, throws an error and fails:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID]},
                Name -> "My existing transaction for ShipToECL" <> $SessionUUID
            ],
            $Failed,
            Messages :> {Error::NonUniqueName, Error::InvalidOption}
        ],

        Example[{Messages, "ShipToECLDuplicateName", "Gives a message and returns $Failed if any of the input names are used more than once for the same item type:"},
            uuid = CreateUUID[];
            ShipToECL[
                {Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID], Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID]},
                {"my column" <> uuid, "my column" <> uuid},
                NumberOfUses -> {3, 15},
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::ShipToECLDuplicateName, Error::InvalidInput},
            Variables :> {uuid}
        ],
        Example[
            {Messages, "ShipToECLDuplicateName", "Gives a message and returns $Failed if any of the input names are used more than once for the same vessel model:"},
            uuid = CreateUUID[];
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> uuid, "my new bottle" <> uuid},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]
                },
                Volume -> {1Milliliter, 1Milliliter}
            ],
            $Failed,
            Messages :> {Error::ShipToECLDuplicateName, Error::ReusedPosition, Error::InvalidInput, Error::InvalidOption},
            Variables :> {uuid}
        ],

        Example[{Messages, "ShipToECLDuplicateName", "Gives a message and returns $Failed if any of the input names are used more than once for different plate models:"},
            uuid = CreateUUID[];
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                ContainerModel -> {
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL (2)" <> $SessionUUID]
                },
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {"A1", "A2"},
                Volume -> {1Milliliter, 1Milliliter}
            ],
            $Failed,
            Messages :> {Error::ShipToECLDuplicateName, Error::InvalidInput},
            Variables :> {uuid}
        ],

        Example[{Messages, "InvalidPosition", "Errors if a position is specified that doesn't exist in the container model:"},
            ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                "my new plate" <> CreateUUID[],
                ContainerModel -> Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> "A131",
                Volume -> 1Milliliter
            ],
            $Failed,
            Messages :> {Error::InvalidPosition, Error::InvalidOption}
        ],

        Example[{Messages, "NoNotebook", "Gives a message and returns $Failed if not called from a notebook:"},
            ShipToECL[
                Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID],
                "my column" <> CreateUUID[],
                NumberOfUses -> 3,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::NoNotebook},
            Stubs :> {$Notebook = Null}
        ],

        Example[{Messages, "NumberOfUsesNotRequired", "NumberOfUses may not be specified for non-column samples:"},
            transaction = ShipToECL[
                {Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new item" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {None, Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {None, Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]},
                Position -> {None, "A2"},
                NumberOfUses -> 5,
                Volume -> {None, 0.3Milliliter},
                Product -> {Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID], None},
                Upload -> False
            ],
            $Failed,
            Variables :> {transaction},
            Messages :> {Error::NumberOfUsesNotRequired, Error::InvalidOption}
        ],

        Example[{Messages, "OptionRequired", "Product must be specified for {Object[Item,Column],Object[Item,Gel],Object[Sample],Object[Item,Consumable],Object[Item,Cap],Object[Item,Tips]} samples:"},
            ShipToECL[Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID], "my new item" <> CreateUUID[],
                Upload -> False
            ],
            $Failed,
            Messages :> {Error::OptionRequired, Error::InvalidOption}
        ],

        Example[{Messages, "PositionRequired", "If position is not specified for a multi-position container, returns $Failed:"},
            ShipToECL[
                {Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> {Automatic, "A2"},
                Volume -> 1.5 Milliliter
            ],
            $Failed,
            Messages :> {Error::PositionRequired, Error::InvalidOption}
        ],

        Example[{Messages, "ContainerModelRequired", "If container model is not specified for a sample, returns $Failed:"},
            ShipToECL[
                Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID],
                "my new sample",
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Position -> "A2",
                Volume -> 1.5 Milliliter
            ],
            $Failed,
            Messages :> {Error::ContainerModelRequired, Error::InvalidOption}
        ],
        Example[{Messages, "NoCompatibleRack", "If there is no Model[Container, Rack] in the database that can hold the ContainerModel upright based on its Footprint and dimensions, return an error:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "id:dORYzZn0ooaG"]},
                ShippedRack -> {Null},
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::NoCompatibleRack, Error::InvalidOption},
            Stubs :> {rackFootprintsAndDimensions[] := {}}
        ],

        Example[{Messages, "AmountNotRequired", "If Volume or Mass are specified for any items, a message is thrown and the amount is disregarded for those items:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]},
                {"my new item" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], None},
                CoverModel -> {Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID], None},
                Position -> {"A1", None},
                Volume -> 5 Milliliter,
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::AmountNotRequired, Error::InvalidOption}
        ],

        Example[{Messages, "ReusedPosition", "If two inputs point to the same location, return $Failed:"},
            testuuid = CreateUUID[];
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> testuuid, "my new plate" <> testuuid},
                Position -> {"A1", "A1"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ],
            $Failed,
            Messages :> {Error::ReusedPosition, Error::InvalidOption},
            Variables :> {transaction, testuuid}
        ],

        Example[{Messages, "ReusedPosition", "Two inputs may point to the same position in different plates:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate 2" <> CreateUUID[]},
                Position -> {"A1", "A1"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Variables :> {transaction}
        ],

        Example[{Messages, "InputLengthMismatch", "If a listed option does not match the length of the inputs, give a message and return $Failed:"},
            ShipToECL[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                "my new plate" <> CreateUUID[],
                Position -> "A1",
                ContainerModel -> Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> {0.5 Milliliter, 0.3 Milliliter, 1 Milliliter}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch},
            Variables :> {transaction}
        ],

        Example[{Messages, "AmountWillBeMeasured", "If mass or volume is not specified for samples, a message is given indicating that the amount will be measured upon arrival:"},
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> {None, 1Milliliter}
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Messages :> {Warning::AmountWillBeMeasured},
            Variables :> {transaction}
        ],

        Example[{Messages, "InputLengthMismatch", "If a listed option does not match the length of the transaction object inputs, give a message and return $Failed:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                ExpectedDeliveryDate -> {DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`], None, DateObject[List[2018, 4, 2, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],

        Example[{Messages, "InvalidDates", "If DateShipped is after ExpectedDeliveryDate when updating transactions, give a message and return $Failed:"},
            ShipToECL[
                {Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},

                DateShipped -> {DateObject[List[2018, 4, 1, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]},
                ExpectedDeliveryDate -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 4, 1, 14, 17, 52.`], "Instant", "Gregorian", -7.`]}
            ],
            $Failed,
            Messages :> {Error::InvalidDates, Error::InvalidOption}
        ],

        Example[{Messages, "InvalidDates", "If DateShipped is after ExpectedDeliveryDate when generating transactions, give a message and return $Failed:"},
            ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                DateShipped -> {DateObject[List[2018, 4, 1, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`]},
                ExpectedDeliveryDate -> {DateObject[List[2018, 3, 30, 14, 17, 52.`], "Instant", "Gregorian", -7.`], DateObject[List[2018, 4, 1, 14, 17, 52.`], "Instant", "Gregorian", -7.`]},
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::InvalidDates, Error::InvalidOption}
        ],

        Example[{Messages, "ContainersMayNotSpanShipments", "When generating transaction objects, if different shipping info is specified for the same container, give a message and return $Failed:"},
            uuid = CreateUUID[];
            ShipToECL[{Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                Position -> {"A1", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter,
                TrackingNumber -> {"123456", "654321"},
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::ContainersMayNotSpanShipments, Error::InvalidInput},
            Variables :> {uuid}
        ],

        Example[{Messages, "ContainersMayNotSpanShipments", "When generating transaction objects, if different shipping info is specified for the same container, give a message and return $Failed:"},
            uuid = CreateUUID[];
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new plate" <> uuid, "my new plate" <> uuid},
                Position -> {"B2", "A2"},
                ContainerModel -> {Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]},
                CoverModel -> Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Volume -> 1Milliliter,
                TrackingNumber -> {"123456", "654321"},
                Shipper -> Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::ContainersMayNotSpanShipments, Error::InvalidInput},
            Variables :> {uuid}
        ],
        Example[{Messages, "TrackingNumberAndShipperRequiredTogether", "TrackingNumber and Shipper must be provided together when generating a transaction:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1Milliliter,
                TrackingNumber -> {"56yy-09o99-pp95", None}
            ],
            $Failed,
            Messages :> {Error::TrackingNumberAndShipperRequiredTogether, Error::InvalidOption}
        ],

        Example[{Messages, "TrackingNumberAndShipperRequiredTogether", "TrackingNumber and Shipper must be provided together when updating a transaction:"},
            ShipToECL[{Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID], Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID]},
                TrackingNumber -> {"123456", "654321"},
                Shipper -> {None, None}
            ],
            $Failed,
            Messages :> {Error::TrackingNumberAndShipperRequiredTogether, Error::InvalidOption}
        ],
        Example[{Messages, "CoverModelNotRequired", "Cover cannot be specified for Item inputs:"},
            ShipToECL[Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID],
                "my test item 1",
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ],
            $Failed,
            Messages :> {Error::CoverModelNotRequired, Error::InvalidOption}
        ],
        Example[{Messages, "CoverModelRequired", "Cover must be specified for all Sample inputs that are not in self covering containers:"},
            ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new plate 1" <> CreateUUID[], "my new plate 2" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Automatic,
                    None
                },
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::CoverModelRequired, Error::InvalidOption}
        ],
        Example[{Messages, "IncompatibleCoverModel", "Cover must not be specified for all Sample inputs in self covering containers:"},
            ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new bottle 2" <> CreateUUID[], "my new bottle 3" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Vessel, "id:dORYzZn0ooaG"],
                    Model[Container, Vessel, "id:01G6nvwRj84A"]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]
                },
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::IncompatibleCoverModel, Error::InvalidOption}
        ],

        Example[{Messages, "IncompatibleCoverModelType", "CoverModel and ContainerModel must be compatible with eachother:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {Model[Item, Lid, "Test lid model for ShipToECL" <> $SessionUUID]},
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::IncompatibleCoverModelType, Error::InvalidOption}
        ],
        Example[{Messages, "MissingEmptyContainerCover", "A warning is shown when EmptyContainers are provided with a matching None entry in EmptyContainerCovers:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]},
                EmptyContainers -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                EmptyContainerCovers -> {None},
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            {ObjectP[Object[Transaction, ShipToECL]]},
            Messages :> {Warning::MissingEmptyContainerCover}
        ],
        Example[{Messages, "UnusedEmptyContainerCover", "Cover must not be specified for all EmptyContainers that are sealed or have built in covers:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "id:01G6nvwRj84A"]},
                CoverModel -> {None},
                EmptyContainers -> {Model[Container, Vessel, "id:01G6nvwRj84A"]},
                EmptyContainerCovers -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]},
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::UnusedEmptyContainerCover, Error::InvalidOption}
        ],
        Example[{Messages, "IncompatibleEmptyContainerCover", "EmptyContainerCovers and EmptyContainers must be compatible with eachother:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]},
                EmptyContainers -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                EmptyContainerCovers -> {Model[Item, Lid, "Test lid model for ShipToECL" <> $SessionUUID]},
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::IncompatibleEmptyContainerCover, Error::InvalidOption}
        ],
        Example[{Messages, "EmptyContainerCoverLengthMismatch", "The length of the EmptyContainers and EmptyContainerCovers must match:"},
            ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[]},
                ContainerModel -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                CoverModel -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]},
                EmptyContainers -> {Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID]},
                EmptyContainerCovers -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID], Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]},
                Position -> "A1",
                Volume -> 1 Milliliter
            ],
            $Failed,
            Messages :> {Error::EmptyContainerCoverLengthMismatch}
        ],

        Example[{Messages, "EmptyContainerAbsent", "When using an unverified container, an empty container must be sent for parameterization:"},
            ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test ShipToECL Unverified Model" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1 Milliliter,
                Position -> "A1"
            ],
            $Failed,
            Messages :> {Error::EmptyContainerAbsent, Error::InvalidOption}
        ],

        (* ----------- *)
        (* -- Tests -- *)
        (* ----------- *)
        Test["Object created for EmptyContainers is uploaded properly and has a Model, required for printing stickers:",
            transaction = ShipToECL[
                {Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID], Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID]},
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                Position -> {Automatic, "A2"},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> {1Milliliter, 1Milliliter},
                EmptyContainers -> {Model[Container, Vessel, "Test ShipToECL EmptyContainer Model" <> $SessionUUID]},
                EmptyContainerCovers -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]}
            ];
            Download[transaction, EmptyContainers[Model]],
            {{LinkP[Model[Container, Vessel, "Test ShipToECL EmptyContainer Model" <> $SessionUUID]]}},
            Variables :> {transaction}
        ],
        Test["When an empty container is included with the use of an unverified container, there are no errors:",
            ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[], "my new item" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test ShipToECL Unverified Model" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    None
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                    None
                },
                Volume -> {1 Milliliter, 1 Milliliter, None},
                Position -> {"A1", "A1", Null},
                Product -> {None, None, Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]},
                EmptyContainers -> {Model[Container, Vessel, "Test ShipToECL Unverified Model" <> $SessionUUID]},
                EmptyContainerCovers -> {Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID]}
            ],
            {ObjectP[Object[Transaction, ShipToECL]]}
        ],
        Test["CoverModel accepts Model[Item, Cap] for vessels and Model[Item, Lid] or Model[Item, PlateSeal] for plates:",
            transaction = ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new plate 1" <> CreateUUID[], "my new plate 2" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, Lid, "Test lid model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Position -> "A1",
                Volume -> 0.5 Milliliter
            ];
            Download[transaction,
                {
                    ReceivedContainers[Cover],
                    ReceivedCovers
                }
            ],
            {{
                {LinkP[Object[Item, Cap]], LinkP[Object[Item, Lid]], LinkP[Object[Item, PlateSeal]]},
                {LinkP[Object[Item, Cap]], LinkP[Object[Item, Lid]], LinkP[Object[Item, PlateSeal]]}
            }},
            Variables :> {transaction}
        ],
        Test["NumberOfUses doesn't have to be specified for columns and will default to 0:",
            columnShipToECL = ShipToECL[
                Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID],
                "my new item" <> CreateUUID[],
                Product -> Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID]
            ];
            Flatten@Download[columnShipToECL, ReceivedSamples[NumberOfUses]],
            {0}
        ],
        Test["Sending empty containers for already verified models does not cause errors:",
            ShipToECL[
                {
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                    Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID]
                },
                {"my new bottle" <> CreateUUID[], "my new plate" <> CreateUUID[]},
                ContainerModel -> {
                    Model[Container, Vessel, "Test ShipToECL Unverified Model" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                CoverModel -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                },
                Volume -> 1 Milliliter,
                Position -> "A1",
                EmptyContainers -> {
                    Model[Container, Vessel, "Test ShipToECL Unverified Model" <> $SessionUUID],
                    Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID]
                },
                EmptyContainerCovers -> {
                    Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                    Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID]
                }
            ],
            {ObjectP[Object[Transaction, ShipToECL]]}
        ]
    },
    SymbolSetUp :> {
        With[{toErase = Flatten[
            {
                Object[Transaction, ShipToECL, "My existing transaction for ShipToECL" <> $SessionUUID],
                Object[Maintenance, ReceiveInventory, "Test maintenance for ShipToECL" <> $SessionUUID],
                Model[Container, Site, "Test site model for ShipToECL" <> $SessionUUID],
                Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID],
                Model[Container, Plate, "Test plate model for ShipToECL (2)" <> $SessionUUID],
                Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID],
                Model[Container, Vessel, "Test ShipToECL dimensionless container model" <> $SessionUUID],
                Model[Item, Cap, "Test cap model for ShipToECL" <> $SessionUUID],
                Model[Item, Lid, "Test lid model for ShipToECL" <> $SessionUUID],
                Model[Item, PlateSeal, "Test plate seal model for ShipToECL" <> $SessionUUID],
                Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID],
                Object[Sample, "Test Sample for ShipToECL (2)" <> $SessionUUID],
                Object[Container, Plate, "Test plate with contents for ShipToECL" <> $SessionUUID],
                Object[Container, Plate, "Test plate for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel at Destination for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel at secondary source for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "Test unparameterized vessel for ShipToECL" <> $SessionUUID],
                Object[Container, Site, "Test source site for ShipToECL" <> $SessionUUID],
                Object[Team, Financing, "Test Team for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "my existing bottle for ShipToECL" <> $SessionUUID],
                Object[Item, Consumable, "my existing column for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "Test vessel for ShipToECL (2)" <> $SessionUUID],
                Model[Sample, "Test Model Oligomer for ShipToECL" <> $SessionUUID],
                Model[Item, Consumable, "Test Model Consumable for ShipToECL" <> $SessionUUID],
                Object[Container, Site, "Test secondary source site for ShipToECL" <> $SessionUUID],
                Object[LaboratoryNotebook, "Test Notebook for ShipToECL" <> $SessionUUID],
                Model[Sample, "Test Model Chemical for ShipToECL" <> $SessionUUID],
                Model[Sample, "Test Model Chemical with density for ShipToECL" <> $SessionUUID],
                Model[Sample, "Test Model Tablet for ShipToECL" <> $SessionUUID],
                Object[Container, Site, "Test destination site for ShipToECL" <> $SessionUUID],
                Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID],
                Object[Company, Shipper, "Test shipper for ShipToECL (2)" <> $SessionUUID],
                Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID],
                Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID],
                Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID],
                Model[Sample, "Test Model Cells for ShipToECL" <> $SessionUUID],
                Object[Product, "Test product for ShipToECL (1)" <> $SessionUUID],
                Object[Product, "Test product for ShipToECL (2)" <> $SessionUUID],
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECL" <> $SessionUUID],
                Model[Item, Column, "Test Model Column for ShipToECL" <> $SessionUUID],
                Object[Container, Vessel, "Test ShipToECL EmptyContainer" <> $SessionUUID],
                Model[Container, Vessel, "Test ShipToECL EmptyContainer Model" <> $SessionUUID],
                Model[Container, Vessel, "Test ShipToECL Unverified Model" <> $SessionUUID]
            }]},
            EraseObject[PickList[toErase, DatabaseMemberQ[toErase]], Force -> True]
        ];

        ClearDownload[];

        $CreatedObjects = {};

        If[!DatabaseMemberQ[Object[Transaction, ShipToECL, "My existing transaction for ShipToECL" <> $SessionUUID]], Upload[<|Type -> Object[Transaction, ShipToECL], Name -> "My existing transaction for ShipToECL" <> $SessionUUID, DeveloperObject -> True|>]];

        (* -- Model Uploads -- *)

        Upload[
            {
                (* Model[Contaienr, Site] *)
                <|DeveloperObject -> True, Type -> Model[Container, Site], Name -> "Test site model for ShipToECL" <> $SessionUUID, Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>,

                (* Model[Sample] *)
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Name -> "Test Model Oligomer for ShipToECL" <> $SessionUUID, Type -> Model[Sample], State -> Liquid|>,
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:6V0npvmE09vG"]], Expires -> False, Name -> "Test Model Cells for ShipToECL" <> $SessionUUID, Type -> Model[Sample]|>,
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Name -> "Test Model StockSolution for ShipToECL" <> $SessionUUID, Type -> Model[Sample, StockSolution], State -> Liquid|>,
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Chemical for ShipToECL" <> $SessionUUID, Type -> Model[Sample], State -> Liquid|>,
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Chemical with density for ShipToECL" <> $SessionUUID, Type -> Model[Sample], State -> Liquid, Density -> 0.95Gram / Milliliter|>,
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Tablet for ShipToECL" <> $SessionUUID, Type -> Model[Sample], State -> Solid, Tablet -> True, TabletWeight -> 1Gram|>,

                (* Model[Item] *)
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Name -> "Test Model Consumable for ShipToECL" <> $SessionUUID, Type -> Model[Item, Consumable]|>,
                <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Column for ShipToECL" <> $SessionUUID, Type -> Model[Item, Column]|>,

                (* Model[Container] *)
                <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test plate model for ShipToECL" <> $SessionUUID, Replace[CoverFootprints] -> {LidSBSUniversal}, Replace[Dimensions] -> {0.013 Meter, 0.013 Meter, 0.04 Meter}, Footprint -> Conical50mLTube, SelfStanding -> True, Replace[CoverTypes] -> {Place, Seal}, VerifiedContainerModel -> True, Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Plate], Name -> "Test plate model for ShipToECL (2)" <> $SessionUUID, Replace[Dimensions] -> {0.013 Meter, 0.013 Meter, 0.04 Meter}, Footprint -> Plate, SelfStanding -> True, Replace[CoverFootprints] -> {LidSBSUniversal}, Replace[CoverTypes] -> {Place, Seal}, VerifiedContainerModel -> True, Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test vessel model for ShipToECL" <> $SessionUUID, Replace[Dimensions] -> {0.013 Meter, 0.013 Meter, 0.04 Meter}, Footprint -> Conical50mLTube, SelfStanding -> True, Replace[CoverFootprints] -> {CapScrewVial40x44}, Replace[CoverTypes] -> {Screw}, VerifiedContainerModel -> True, Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test ShipToECL Unverified Model" <> $SessionUUID, Replace[Dimensions] -> {0.013 Meter, 0.013 Meter, 0.04 Meter}, Footprint -> Conical50mLTube, SelfStanding -> True, Replace[CoverFootprints] -> {CapScrewVial40x44}, Replace[CoverTypes] -> {Screw}, VerifiedContainerModel -> False, Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
                <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test ShipToECL EmptyContainer Model" <> $SessionUUID, Replace[CoverFootprints] -> {CapScrewVial40x44}, Replace[CoverTypes] -> {Screw}, Replace[Dimensions] -> {0.013 Meter, 0.013 Meter, 0.04 Meter}, Footprint -> Conical50mLTube, SelfStanding -> False|>,
                <|DeveloperObject -> True, Type -> Model[Container, Vessel], Name -> "Test ShipToECL dimensionless container model" <> $SessionUUID, Replace[CoverFootprints] -> {CapScrewVial40x44}, Replace[CoverTypes] -> {Screw}, Footprint -> Null, SelfStanding -> False, Replace[Positions] -> {<|Name -> "A1", Footprint -> Open, MaxWidth -> Quantity[0.03`, "Meters"], MaxDepth -> Quantity[0.03`, "Meters"], MaxHeight -> Null|>}|>,

                (*Object[Product]*)
                <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product for ShipToECL (1)" <> $SessionUUID|>,
                <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product for ShipToECL (2)" <> $SessionUUID|>,

                (* Model[Item, <COVERS>] *)
                <|DeveloperObject -> True, Type -> Model[Item, Cap], Name -> "Test cap model for ShipToECL" <> $SessionUUID, CoverType -> Screw, CoverFootprint -> CapScrewVial40x44, VerifiedCoverModel -> True|>,
                <|DeveloperObject -> True, Type -> Model[Item, Lid], Name -> "Test lid model for ShipToECL" <> $SessionUUID, CoverType -> Place, CoverFootprint -> LidSBSUniversal, VerifiedCoverModel -> True|>,
                <|DeveloperObject -> True, Type -> Model[Item, PlateSeal], Name -> "Test plate seal model for ShipToECL" <> $SessionUUID, CoverType -> Seal, CoverFootprint -> LidSBSUniversal, VerifiedCoverModel -> True|>
            }
        ];

        (* -- Object Uploads -- *)

        (* independant object uploads *)
        Upload[
            {
                (* Object[Maintenance] *)
                <|DeveloperObject -> True, Type -> Object[Maintenance, ReceiveInventory], Name -> "Test maintenance for ShipToECL" <> $SessionUUID|>,

                (*Object[Sample]*)
                <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test Sample for ShipToECL (1)" <> $SessionUUID|>,
                <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test Sample for ShipToECL (2)" <> $SessionUUID|>,

                (*Object[Container]*)
                <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Objects]|>,
                <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel at Destination for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Objects]|>,
                <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test unparameterized vessel for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test ShipToECL dimensionless container model" <> $SessionUUID], Objects]|>,
                <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel at secondary source for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Objects]|>,
                <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test ShipToECL EmptyContainer" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test ShipToECL EmptyContainer Model" <> $SessionUUID], Objects]|>,
                <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Objects]|>,
                <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel for ShipToECL (2)" <> $SessionUUID, Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECL" <> $SessionUUID], Objects]|>,

                (*Object[Company]*)
                <|DeveloperObject -> True, Type -> Object[Company, Shipper], Name -> "Test shipper for ShipToECL" <> $SessionUUID|>,
                <|DeveloperObject -> True, Type -> Object[Company, Shipper], Name -> "Test shipper for ShipToECL (2)" <> $SessionUUID|>
            }
        ];

        (* Other Dependant Object uploads *)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Plate, "Test plate model for ShipToECL" <> $SessionUUID], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID], Container]}, {"A2", Link[Object[Sample, "Test Sample for ShipToECL (2)" <> $SessionUUID], Container]}}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test source site for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test site model for ShipToECL" <> $SessionUUID], Objects], Replace[Contents] -> {
            {"A1", Link[Object[Container, Plate, "Test plate for ShipToECL" <> $SessionUUID], Container]}, {"A2", Link[Object[Container, Plate, "Test plate with contents for ShipToECL" <> $SessionUUID], Container]}}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ShipToECL" <> $SessionUUID, DefaultMailingAddress -> Link[Object[Container, Site, "Test source site for ShipToECL" <> $SessionUUID]]|>];
        If[!DatabaseMemberQ[Object[Container, Vessel, "my existing bottle for ShipToECL" <> $SessionUUID]], Upload[<|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "my existing bottle for ShipToECL" <> $SessionUUID|>]];
        If[!DatabaseMemberQ[Object[Item, Consumable, "my existing column for ShipToECL" <> $SessionUUID]], Upload[<|DeveloperObject -> True, Type -> Object[Item, Consumable], Name -> "my existing column for ShipToECL" <> $SessionUUID|>]];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test secondary source site for ShipToECL" <> $SessionUUID, Model -> Link[Model[Container, Site, "Test site model for ShipToECL" <> $SessionUUID], Objects], Replace[Contents] -> {
            {"A1", Link[Object[Container, Vessel, "Test vessel at secondary source for ShipToECL" <> $SessionUUID], Container]}}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ShipToECL" <> $SessionUUID, Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ShipToECL" <> $SessionUUID], NotebooksFinanced]}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test destination site for ShipToECL" <> $SessionUUID, Replace[Contents] -> {{"A1", Link[Object[Container, Vessel, "Test vessel at Destination for ShipToECL" <> $SessionUUID], Container]}}|>];

        (* Object[Transaction, ShipToECL] *)
        Upload[
            {
                <|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Name -> "Test transaction for ShipToECL (1)" <> $SessionUUID,
                    Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]}, Shipper -> Link[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions]|>,
                <|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Name -> "Test transaction for ShipToECL (2)" <> $SessionUUID,
                    Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]}|>,
                <|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Name -> "Test transaction for ShipToECL (3)" <> $SessionUUID,
                    Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]}|>
            }
        ];
    },
    SetUp :> {
        Upload[
            {
                <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (1)" <> $SessionUUID],
                    Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]}, Shipper -> Link[Object[Company, Shipper, "Test shipper for ShipToECL" <> $SessionUUID], Transactions],
                    Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null, Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                |>,
                <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (2)" <> $SessionUUID],
                    Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                    Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null, Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                |>,
                <|Object -> Object[Transaction, ShipToECL, "Test transaction for ShipToECL (3)" <> $SessionUUID],
                    Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECL (1)" <> $SessionUUID]]},
                    Shipper -> Null, Replace[TrackingNumbers] -> {}, Replace[ReceivedContainers] -> Null, Replace[ReceivedCovers] -> Null, Replace[TransferSamples] -> Null, Replace[TransferContainers] -> Null, Replace[EmptyContainers] -> Null, Destination -> Null, Source -> Null, ReceivingTolerance -> Null
                |>
            }
        ]
    },
    SymbolTearDown :> {
        ClearDownload[];
        EraseObject[PickList[$CreatedObjects, DatabaseMemberQ[$CreatedObjects]], Force -> True, Verbose -> False];
        Unset[$CreatedObjects];
        EraseObject[PickList[{Object[Transaction, ShipToECL, "My transaction_1"], Object[Transaction, ShipToECL, "My transaction_2"]}, DatabaseMemberQ[{Object[Transaction, ShipToECL, "My transaction_1"], Object[Transaction, ShipToECL, "My transaction_2"]}]], Verbose -> False, Force -> True];
        Notifications`Private`eraseTestNotifications[];
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipToECL" <> $SessionUUID],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test user for notebook-less test protocols"]
    }
];


(* ::Subsubsection::Closed:: *)
(*ShipToECLOptions*)


DefineTests[ShipToECLOptions,
    {
        Example[
            {Basic, "Generate a table of resolved options for a ShipToECL using a model sample input:"},
            ShipToECLOptions[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECLOptions"],
                "my new bottle (ShipToECLOptions)",
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECLOptions"],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECLOptions"],
                Volume -> 1 Milliliter
            ],
            Graphics_
        ],
        Example[
            {Basic, "Generate a table of resolved options for a ShipToECL using a transaction input:"},
            ShipToECLOptions[Object[Transaction, ShipToECL, "Test transaction for ShipToECLOptions (1)"]],
            Graphics_
        ],

        Example[
            {Options, OutputFormat, "Generate a resolved list of options for an ShipToECL:"},
            ShipToECLOptions[
                Model[Sample, StockSolution, "Test Model StockSolution for ShipToECLOptions"],
                "my new bottle (ShipToECLOptions)",
                ContainerModel -> Model[Container, Vessel, "Test vessel model for ShipToECLOptions"],
                CoverModel -> Model[Item, Cap, "Test cap model for ShipToECLOptions"],
                Volume -> 1 Milliliter,
                OutputFormat -> List
            ],
            {_Rule ..}
        ]
    },
    SetUp :> {

        EraseObject[PickList[$CreatedObjects, DatabaseMemberQ[$CreatedObjects]], Force -> True, Verbose -> False];

        ClearDownload[];

        $CreatedObjects = {};

        If[!DatabaseMemberQ[Object[Transaction, ShipToECL, "My existing transaction"]], Upload[<|Type -> Object[Transaction, ShipToECL], Name -> "My existing transaction", DeveloperObject -> True|>]];

        (*models and other standalone uploads*)
        Upload[{
            <|DeveloperObject -> True, Type -> Object[Maintenance, ReceiveInventory], Name -> "Test maintenance for ShipToECLOptions"|>,
            <|DeveloperObject -> True, Type -> Model[Container, Site], Name -> "Test site model for ShipToECLOptions", Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>,
            <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Plate], SelfStanding -> True, TransportStable -> True, Name -> "Test plate model for ShipToECLOptions", Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
            <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Plate], SelfStanding -> True, TransportStable -> True, Name -> "Test plate model for ShipToECLOptions (2)", Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "A3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B2", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>, <|Name -> "B3", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}|>,
            <|DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], DeveloperObject -> True, Type -> Model[Container, Vessel], TransportStable -> True, Name -> "Test vessel model for ShipToECLOptions", Replace[CoverFootprints] -> {CapScrewVial40x44}, Replace[CoverTypes] -> {Screw}, VerifiedContainerModel -> True, Replace[Positions] -> {<|Name -> "A1", Footprint -> Null, MaxWidth -> Quantity[0.00825`, "Meters"], MaxDepth -> Quantity[0.00825`, "Meters"], MaxHeight -> Quantity[0.0374`, "Meters"]|>}, Footprint -> Conical50mLTube, Replace[Dimensions] -> {0.013 Meter, 0.013 Meter, 0.04 Meter}, SelfStanding -> True|>,
            <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test Sample for ShipToECLOptions (1)"|>,
            <|DeveloperObject -> True, Type -> Object[Sample], Name -> "Test Sample for ShipToECLOptions (2)"|>,
            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Name -> "Test Model Oligomer for ShipToECLOptions", Type -> Model[Sample], State -> Liquid|>,
            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Name -> "Test Model Consumable for ShipToECLOptions", Type -> Model[Item, Consumable]|>,
            <|DeveloperObject -> True, Type -> Object[Company, Shipper], Name -> "Test shipper for ShipToECLOptions"|>,
            <|DeveloperObject -> True, Type -> Object[Company, Shipper], Name -> "Test shipper for ShipToECLOptions (2)"|>,
            <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product for ShipToECLOptions (1)"|>,
            <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product for ShipToECLOptions (2)"|>,
            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:6V0npvmE09vG"]], Expires -> False, Name -> "Test Model Cells for ShipToECLOptions", Type -> Model[Sample]|>,
            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Name -> "Test Model StockSolution for ShipToECLOptions", Type -> Model[Sample, StockSolution], State -> Liquid|>,
            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Column for ShipToECLOptions", Type -> Model[Item, Column]|>,
            <|DeveloperObject -> True, Type -> Model[Item, Cap], Name -> "Test cap model for ShipToECLOptions", CoverType -> Screw, CoverFootprint -> CapScrewVial40x44, VerifiedCoverModel -> True|>
        }];

        (*container object uploads*)
        Upload[{
            <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate with contents for ShipToECLOptions", Model -> Link[Model[Container, Plate, "Test plate model for ShipToECLOptions"], Objects], Replace[Contents] -> {{"A1", Link[Object[Sample, "Test Sample for ShipToECLOptions (1)"], Container]}, {"A2", Link[Object[Sample, "Test Sample for ShipToECLOptions (2)"], Container]}}|>,
            <|DeveloperObject -> True, Type -> Object[Container, Plate], Name -> "Test plate for ShipToECLOptions", Model -> Link[Model[Container, Plate, "Test plate model for ShipToECLOptions"], Objects]|>,
            <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel at Destination for ShipToECLOptions", Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECLOptions"], Objects]|>,
            <|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel at secondary source for ShipToECLOptions", Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECLOptions"], Objects]|>
        }];

        (*other uploads*)
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test source site for ShipToECLOptions", Model -> Link[Model[Container, Site, "Test site model for ShipToECLOptions"], Objects], Replace[Contents] -> {
            {"A1", Link[Object[Container, Plate, "Test plate for ShipToECLOptions"], Container]}, {"A2", Link[Object[Container, Plate, "Test plate with contents for ShipToECLOptions"], Container]}}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], Name -> "Test Team for ShipToECLOptions", DefaultMailingAddress -> Link[Object[Container, Site, "Test source site for ShipToECLOptions"]]|>];
        If[!DatabaseMemberQ[Object[Container, Vessel, "my existing bottle"]], Upload[<|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "my existing bottle"|>]];
        If[!DatabaseMemberQ[Object[Item, Consumable, "my existing column"]], Upload[<|DeveloperObject -> True, Type -> Object[Item, Consumable], Name -> "my existing column"|>]];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel for ShipToECLOptions", Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECLOptions"], Objects]|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Vessel], Name -> "Test vessel for ShipToECLOptions (2)", Model -> Link[Model[Container, Vessel, "Test vessel model for ShipToECLOptions"], Objects]|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test secondary source site for ShipToECLOptions", Model -> Link[Model[Container, Site, "Test site model for ShipToECLOptions"], Objects], Replace[Contents] -> {
            {"A1", Link[Object[Container, Vessel, "Test vessel at secondary source for ShipToECLOptions"], Container]}}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Name -> "Test Notebook for ShipToECLOptions", Replace[Financers] -> {Link[Object[Team, Financing, "Test Team for ShipToECLOptions"], NotebooksFinanced]}|>];
        Upload[<|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Chemical for ShipToECLOptions", Type -> Model[Sample], State -> Liquid|>];
        Upload[<|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Chemical with density for ShipToECLOptions", Type -> Model[Sample], State -> Liquid, Density -> 0.95Gram / Milliliter|>];
        Upload[<|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], Expires -> False, Name -> "Test Model Tablet for ShipToECLOptions", Type -> Model[Sample], State -> Solid, Tablet -> True, TabletWeight -> 1Gram|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test destination site for ShipToECLOptions", Replace[Contents] -> {{"A1", Link[Object[Container, Vessel, "Test vessel at Destination for ShipToECLOptions"], Container]}}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Name -> "Test transaction for ShipToECLOptions (1)",
            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECLOptions (1)"]]}, Shipper -> Link[Object[Company, Shipper, "Test shipper for ShipToECLOptions"], Transactions]|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Name -> "Test transaction for ShipToECLOptions (2)",
            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECLOptions (1)"]]}|>];
        Upload[<|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Name -> "Test transaction for ShipToECLOptions (3)",
            Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated], Replace[ReceivedSamples] -> {Link[Object[Sample, "Test Sample for ShipToECLOptions (1)"]]}|>];
    },
    TearDown :> {
        ClearDownload[];
        EraseObject[PickList[$CreatedObjects, DatabaseMemberQ[$CreatedObjects]], Force -> True, Verbose -> False];
        Unset[$CreatedObjects];
    },
    Stubs :> {
        $Notebook = Object[LaboratoryNotebook, "Test Notebook for ShipToECLOptions"],
        $TimeZone = -7.,
        $PersonID = Object[User, "Test user for notebook-less test protocols"]
    }
];


(* ::Subsubsection::Closed:: *)
(*ShipToECLPreview*)


DefineTests[ShipToECLPreview,
    {
        Module[{id, originalNotebook, model, plate, plateModel, siteModel, site, notebook, team},
            Example[
                {Basic, "Returns Null when using model sample input input:"},
                ShipToECLPreview[
                    model,
                    "my plate",
                    ContainerModel -> Model[Container, Vessel, "id:3em6Zv9NjjN8"],
                    CoverModel -> Model[Item, Cap, "id:wqW9BP4Y06aR"],
                    Position -> "A1",
                    Volume -> 1 Milliliter
                ],
                Null,
                SetUp :> {
                    originalNotebook = $Notebook;
                    siteModel = Upload[<|DeveloperObject -> True, Type -> Model[Container, Site], Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>];
                    site = Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Model -> Link[siteModel, Objects]|>];
                    team = Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], DefaultMailingAddress -> Link[site]|>];
                    {model, notebook} = Upload[
                        {
                            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Type -> Model[Sample, StockSolution], State -> Liquid|>,
                            <|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Replace[Financers] -> {Link[team, NotebooksFinanced]}|>
                        }
                    ];
                    $Notebook = notebook
                },
                TearDown :> {
                    EraseObject[{model, plate, plateModel, notebook, siteModel, site, team}, Force -> True];
                    $Notebook = originalNotebook
                }
            ]
        ],
        Module[{transaction, site, team, sample, siteModel, originalNotebook, notebook, creator},
            Example[
                {Basic, "Returns Null when using transaction input:"},
                ShipToECLPreview[transaction],
                Null,
                SetUp :> {
                    originalNotebook = $Notebook;
                    sample = Upload[<|DeveloperObject -> True, Type -> Object[Sample]|>];
                    siteModel = Upload[<|DeveloperObject -> True, Type -> Model[Container, Site], Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>];
                    site = Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Model -> Link[siteModel, Objects]|>];
                    team = Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], DefaultMailingAddress -> Link[site]|>];
                    notebook = Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Replace[Financers] -> {Link[team, NotebooksFinanced]}|>];
                    creator = Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated];
                    transaction = Upload[<|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Replace[ReceivedSamples] -> {Link[sample]}|>];
                    $Notebook = notebook
                },
                TearDown :> {
                    EraseObject[{notebook, siteModel, site, team}, Force -> True];
                    $Notebook = originalNotebook
                }
            ]
        ],
        Module[{id, transaction, sample, originalNotebook, model, plate, plateModel, siteModel, site, notebook, team},
            Example[
                {Basic, "If given an empty list, will return an empty list:"},
                ShipToECLPreview[{}], {}
            ]
        ]
    }
];


(* ::Subsubsection::Closed:: *)
(*ValidShipToECLQ*)


DefineTests[ValidShipToECLQ,
    {
        Module[{id, originalNotebook, model, plate, plateModel, siteModel, site, notebook, team},
            Example[
                {Basic, "Validate a ShipToECL call using a model sample input:"},
                ValidShipToECLQ[
                    model,
                    "my container",
                    ContainerModel -> Model[Container, Vessel, "id:3em6Zv9NjjN8"],
                    CoverModel -> Model[Item, Cap, "id:wqW9BP4Y06aR"],
                    Position -> "A1",
                    Volume -> 1 Milliliter
                ],
                True,
                Stubs :> {$Notebook = notebook},
                SetUp :> {
                    siteModel = Upload[<|DeveloperObject -> True, Type -> Model[Container, Site], Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>];
                    site = Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Model -> Link[siteModel, Objects]|>];
                    team = Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], DefaultMailingAddress -> Link[site]|>];
                    {model, notebook} = Upload[
                        {
                            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Type -> Model[Sample, StockSolution], State -> Liquid|>,
                            <|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Replace[Financers] -> {Link[team, NotebooksFinanced]}|>
                        }
                    ];
                },
                TearDown :> {
                    EraseObject[{model, plate, plateModel, notebook, siteModel, site, team}, Force -> True];
                }
            ]
        ],
        Module[{transaction, site, team, sample, siteModel, originalNotebook, notebook, creator},
            Example[
                {Basic, "Validate a ShipToECL call using a transaction input:"},
                ValidShipToECLQ[transaction],
                True,
                Stubs :> {$Notebook = notebook},
                SetUp :> {
                    originalNotebook = $Notebook;
                    sample = Upload[<|DeveloperObject -> True, Type -> Object[Sample]|>];
                    siteModel = Upload[<|DeveloperObject -> True, Type -> Model[Container, Site], Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>];
                    site = Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Model -> Link[siteModel, Objects]|>];
                    team = Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], DefaultMailingAddress -> Link[site]|>];
                    notebook = Upload[<|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Replace[Financers] -> {Link[team, NotebooksFinanced]}|>];
                    creator = Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated];
                    transaction = Upload[<|DeveloperObject -> True, Type -> Object[Transaction, ShipToECL], Replace[ReceivedSamples] -> {Link[sample]}|>];
                    $Notebook = notebook
                },
                TearDown :> {
                    EraseObject[{notebook, siteModel, site, team}, Force -> True];
                    $Notebook = originalNotebook
                }
            ]
        ],
        Module[{id, transaction, sample, originalNotebook, model, plate, plateModel, siteModel, site, notebook, team},
            Example[
                {Basic, "If given an empty list, will return an empty list:"},
                ValidShipToECLQ[
                    {},
                    Volume -> 1 Milliliter
                ],
                {}
            ]
        ],
        Module[{id, originalNotebook, model, plate, plateModel, siteModel, site, notebook, team},
            Example[
                {Options, OutputFormat, "Validate a ShipToECL call, returning an ECL Test Summary:"},
                ValidShipToECLQ[
                    model,
                    "my container 2",
                    ContainerModel -> Model[Container, Vessel, "id:3em6Zv9NjjN8"],
                    CoverModel -> Model[Item, Cap, "id:wqW9BP4Y06aR"],
                    Position -> "A1",
                    Volume -> 1 Milliliter,
                    OutputFormat -> TestSummary
                ],
                _EmeraldTestSummary,
                SetUp :> {
                    siteModel = Upload[<|DeveloperObject -> True, Type -> Model[Container, Site], Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>];
                    site = Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Model -> Link[siteModel, Objects]|>];
                    team = Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], DefaultMailingAddress -> Link[site]|>];
                    {model, notebook} = Upload[
                        {
                            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Type -> Model[Sample, StockSolution], State -> Liquid|>,
                            <|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Replace[Financers] -> {Link[team, NotebooksFinanced]}|>
                        }
                    ];
                },
                TearDown :> {
                    EraseObject[{model, plate, plateModel, notebook, siteModel, site, team}, Force -> True];
                }
            ]
        ],
        Module[{id, originalNotebook, model, plate, plateModel, siteModel, site, notebook, team},
            Example[
                {Options, Verbose, "Validate an ShipToECL, printing a verbose summary of tests as they are run:"},
                ValidShipToECLQ[
                    model,
                    "my container 3",
                    ContainerModel -> Model[Container, Vessel, "id:3em6Zv9NjjN8"],
                    CoverModel -> Model[Item, Cap, "id:wqW9BP4Y06aR"],
                    Position -> "A1",
                    Volume -> 1 Milliliter,
                    Verbose -> True
                ],
                True,
                Stubs :> {$Notebook = notebook},
                SetUp :> {
                    siteModel = Upload[<|DeveloperObject -> True, Type -> Model[Container, Site], Replace[Positions] -> {<|Name -> "Building Slot 1", Footprint -> Open, MaxWidth -> Quantity[33.8580984`, "Meters"], MaxDepth -> Quantity[30.492801600000004`, "Meters"], MaxHeight -> Null|>}|>];
                    site = Upload[<|DeveloperObject -> True, Type -> Object[Container, Site], Model -> Link[siteModel, Objects]|>];
                    team = Upload[<|DeveloperObject -> True, Type -> Object[Team, Financing], DefaultMailingAddress -> Link[site]|>];
                    {model, notebook} = Upload[
                        {
                            <|DeveloperObject -> True, DefaultStorageCondition -> Link[Model[StorageCondition, "id:N80DNj1r04jW"]], Expires -> False, Type -> Model[Sample, StockSolution], State -> Liquid|>,
                            <|DeveloperObject -> True, Type -> Object[LaboratoryNotebook], Replace[Financers] -> {Link[team, NotebooksFinanced]}|>
                        }
                    ];
                },
                TearDown :> {
                    EraseObject[{model, plate, plateModel, notebook, siteModel, site, team}, Force -> True];
                }
            ]
        ]
    }
];


(* ::Subsection::Closed:: *)
(*DropShipSamples*)


(* ::Subsubsection::Closed:: *)
(*DropShipSamples*)


DefineTests[DropShipSamples,
    {
        Example[
            {Basic, "Generates transaction objects to track sample models that were ordered by the user from a service company:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                },
                "404478943",
                Quantity -> {2, 3, 5},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {ProductDocumentation, None, None}
            ],
            {ObjectP[Object[Transaction, DropShipping]]},
            Variables :> {transactions}
        ],
        Example[
            {Basic, "Generates transaction objects to track products that were ordered by the user from a supplier:"},
            transactions = DropShipSamples[
                {
                    Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (solid) for DropShipSamples (1)"]
                },
                "404478943",
                Quantity -> {2, 3}
            ],
            {ObjectP[Object[Transaction, DropShipping]]},
            Variables :> {transactions}
        ],
        Example[
            {Basic, "The DateCreated and DateOrdered of a transaction created by DropShipSamples are the same:"},
            transactions = DropShipSamples[
                {
                    Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (solid) for DropShipSamples (1)"]
                },
                "404478943",
                Quantity -> {2, 3}
            ];
            SameQ @@ Flatten[Download[transactions, {DateCreated, DateOrdered}]],
            True,
            Variables :> {transactions}
        ],
        Example[
            {Basic, "Generates transaction objects to track sample models and products that were ordered by the user from a supplier or service company:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (solid) for DropShipSamples (1)"]
                },
                {"404478943", "404478943", "404478943", "89995463", "89995463"},
                Quantity -> {2, 3, 5, 1, 2},
                Provider -> {Object[Company, Service, "Test service provider for DropShipSamples (1)"], Object[Company, Service, "Test service provider for DropShipSamples (1)"], Object[Company, Service, "Test service provider for DropShipSamples (1)"], Null, Null},
                Volume -> {ProductDocumentation, None, None, Null, Null}
            ],
            {ObjectP[Object[Transaction, DropShipping]], ObjectP[Object[Transaction, DropShipping]]},
            Variables :> {transactions}
        ],
        Example[
            {Basic, "Generates transaction object when ordering from a product that consists of a kit:"},
            transactions = DropShipSamples[
                {Object[Product, "Fake kit product with plates"]},
                {"kitProduct222222"},
                Quantity -> {1}
            ],
            {ObjectP[Object[Transaction, DropShipping]]},
            Variables :> {transactions}
        ],
        Example[
            {Additional, "Amounts are pulled from products:"},
            transactions = DropShipSamples[
                {
                    Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (solid) for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (tablet) for DropShipSamples (1)"]
                },
                "404478943",
                Quantity -> {2, 3, 1}
            ];
            Download[transactions, {Mass, Volume, Count}],
            {{{Quantity[0., "Grams"], Quantity[100., "Grams"], Quantity[100., "Grams"]}, {Quantity[0.1, "Liters"], Quantity[0., "Liters"], Quantity[0., "Liters"]}, {0, 0, 50}}},
            Variables :> {transactions}
        ],

        Example[
            {Additional, "If a single order number is specified, uses that order number for all of the transactions:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "11-npz-3327",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> ProductDocumentation
            ];
            Download[transactions, OrderNumber],
            {"11-npz-3327"},
            Variables :> {transactions}
        ],
        Example[
            {Additional, "Samples with the same provider, order number, and shipping information (if provided) are grouped into the same transaction:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                },
                {
                    "11-npz-3327",
                    "11-npz-3327",
                    "2234532",
                    "313345",
                    "40454356",
                    "40454356",
                    "40454356"
                },
                Provider -> {
                    Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                    Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                    Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                    Object[Company, Service, "Test service provider for DropShipSamples (3)"],
                    Object[Company, Service, "Test service provider for DropShipSamples (4)"],
                    Object[Company, Service, "Test service provider for DropShipSamples (4)"],
                    Object[Company, Service, "Test service provider for DropShipSamples (4)"]
                },
                TrackingNumber -> {None, None, None, None, "499543", "499543", "55699851"},
                Volume -> {ProductDocumentation, None, None, None, ProductDocumentation, ProductDocumentation, None},
                Mass -> {None, ProductDocumentation, None, ProductDocumentation, None, None, ProductDocumentation}
            ];
            Download[transactions, {OrderedItems, Provider, OrderNumber, TrackingNumbers}],
            {
                {
                    {LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]], LinkP[Model[Sample, "Test model oligo for DropShipSamples (1)"]]},
                    LinkP[Object[Company, Service, "Test service provider for DropShipSamples (1)"]],
                    "11-npz-3327",
                    {}
                }, {
                {LinkP[Model[Item, Column, "Test model column for DropShipSamples (1)"]]},
                LinkP[Object[Company, Service, "Test service provider for DropShipSamples (1)"]],
                "2234532",
                {}
            }, {
                {LinkP[Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"]]},
                LinkP[Object[Company, Service, "Test service provider for DropShipSamples (3)"]],
                "313345",
                {}
            }, {
                {LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]],
                    LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]]},
                LinkP[Object[Company, Service, "Test service provider for DropShipSamples (4)"]],
                "40454356",
                {"499543"}
            }, {
                {LinkP[Model[Sample, "Test model oligo for DropShipSamples (1)"]]},
                LinkP[Object[Company, Service, "Test service provider for DropShipSamples (4)"]],
                "40454356",
                {"55699851"}}
            },
            Variables :> {transactions}
        ],

        Example[
            {Basic, "Update shipping information for a transaction object:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                Shipper -> {Object[Company, Shipper, "Test shipper for DropShipSamples"], Object[Company, Shipper, "Test shipper for DropShipSamples (2)"]},
                TrackingNumber -> {"12345", {"67890", "09987"}},
                DateShipped -> Now
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, {Shipper, TrackingNumbers, DateShipped}],
            {{LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], {"12345"}, _?DateObjectQ}, {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples (2)"], Transactions], {"67890", "09987"}, _?DateObjectQ}}
        ],
        Example[
            {Issues, "Works on single inputs:"},
            transactions = DropShipSamples[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], "11-npz-3327", Quantity -> 2, Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"], Volume -> ProductDocumentation],
            {ObjectP[Object[Transaction, DropShipping]]},
            Variables :> {transactions}
        ],
        Example[
            {Options, Provider, "Provider must be specified for models. If provider is specified for products, it must match the supplier of the product:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"],
                    Object[Product, "Test product chemical (solid) for DropShipSamples (1)"]
                },
                {"404478943", "404478943", "404478943", "89995463", "89995463"},
                Quantity -> {2, 3, 5, 1, 2},
                Provider -> {Object[Company, Service, "Test service provider for DropShipSamples (1)"], Object[Company, Service, "Test service provider for DropShipSamples (1)"], Object[Company, Service, "Test service provider for DropShipSamples (1)"], Null, Null},
                Volume -> {ProductDocumentation, None, None, Null, Null}
            ],
            {ObjectP[Object[Transaction, DropShipping]], ObjectP[Object[Transaction, DropShipping]]},
            Variables :> {transactions}
        ],
        Example[
            {Options, ContainerOut, "Specify that all samples should be transferred into a specified container upon arrival:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"]},
                "1340493",
                Quantity -> {1, 3},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                Volume -> 25Milliliter
            ];
            Download[transactions, {TransferModels, TransferContainers}],
            {
                {
                    {
                        LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]],
                        LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"]]
                    },
                    {
                        LinkP[Model[Container, Vessel, "50mL Tube"]],
                        LinkP[Model[Container, Vessel, "50mL Tube"]]
                    }
                }
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, ContainerOut, "Specify that some samples should be transferred into a specified container upon arrival:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"], Model[Item, Column, "Test model column for DropShipSamples (1)"]},
                "1340493",
                Quantity -> {1, 3, 2},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ContainerOut -> {Model[Container, Vessel, "50mL Tube"], Model[Container, Vessel, "1L Glass Bottle"], None},
                Volume -> {1Milliliter, 1Milliliter, None}
            ];
            Download[transactions, {TransferModels, TransferContainers}],
            {
                {
                    {
                        LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]],
                        LinkP[Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"]]
                    },
                    {
                        LinkP[Model[Container, Vessel, "50mL Tube"]],
                        LinkP[Model[Container, Vessel, "1L Glass Bottle"]]
                    }
                }
            },
            Variables :> {transactions}
        ],

        Example[
            {Messages, "ContainerOutNotValidated", "Give a warning if it cannot be determined whether the specified container out is large enough to hold the sample:"},
            transactions = DropShipSamples[
                Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                "1340493",
                Quantity -> 2,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                Mass -> 5 Gram
            ],
            {ObjectP[Object[Transaction, DropShipping]]},
            Messages :> {Warning::ContainerOutNotValidated},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "VolumeExceedsContainerOut", "If ContainerOut is too small to hold the sample volume, give a message and fail:"},
            DropShipSamples[
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                "1340493",
                Quantity -> 2,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                Volume -> 1Liter
            ],
            $Failed,
            Messages :> {Error::VolumeExceedsContainerOut, Error::InvalidOption}
        ],


        Example[
            {Messages, "OptionNotRequired", "If ContainerOut is specified for an item, give a message and fail:"},
            DropShipSamples[
                Model[Item, Column, "Test model column for DropShipSamples (1)"],
                "1340493",
                Quantity -> 2,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]],
            $Failed,
            Messages :> {Error::OptionNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "OptionNotRequired", "If ContainerOut is specified for a kit product, give a message and fail:"},
            DropShipSamples[
                Object[Product, "Fake kit product with plates"],
                "kitProduct222222",
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]],
            $Failed,
            Messages :> {Error::OptionNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "CompanyRequiredForModelInputs", "Provider is required for model (i.e., non-product) inputs:"},
            DropShipSamples[
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                "1340493",
                Volume -> 1Liter
            ],
            $Failed,
            Messages :> {Error::CompanyRequiredForModelInputs, Error::InvalidOption}
        ],
        Example[
            {Messages, "CompanyRequiredForModelInputs", "Provider must be a Service company for model (i.e., non-product) inputs:"},
            DropShipSamples[
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                "1340493",
                Volume -> 1Liter,
                Provider -> Object[Company, Supplier, "Test supplier for DropShipSamples"]
            ],
            $Failed,
            Messages :> {Error::CompanyRequiredForModelInputs, Error::InvalidOption}
        ],
        Example[
            {Messages, "ProductSupplierConflict", "If a provider is provided that disagrees with the known supplier of the product, throws an error::"},
            DropShipSamples[
                Object[Product, "Test product chemical (solid) for DropShipSamples (1)"],
                "404478943",
                Quantity -> 2,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"]
            ],
            $Failed,
            Messages :> {Error::ProductSupplierConflict, Error::InvalidOption}
        ],
        Example[
            {Messages, "MassDiscrepancy", "If a mass if provided that disagrees with the known mass of the product, throws an error::"},
            DropShipSamples[
                Object[Product, "Test product chemical (solid) for DropShipSamples (1)"],
                "404478943",
                Quantity -> 2,
                Mass -> 1Gram
            ],
            $Failed,
            Messages :> {Error::MassDiscrepancy, Error::InvalidOption}
        ],
        Example[
            {Messages, "MassDiscrepancy", "If Mass is specified for a kit product, throws an error:"},
            transactions = DropShipSamples[
                {Object[Product, "Fake kit product with plates"]},
                {"kitProduct222222"},
                Mass -> {4 * Gram}
            ],
            $Failed,
            Messages :> {Error::MassDiscrepancy, Error::InvalidOption},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "CountDiscrepancy", "If a count if provided that disagrees with the known count of the product, throws an error::"},
            DropShipSamples[
                Object[Product, "Test product chemical (tablet) for DropShipSamples (1)"],
                "404478943",
                Quantity -> 2,
                Count -> 20
            ],
            $Failed,
            Messages :> {Error::CountDiscrepancy, Error::InvalidOption}
        ],
        Example[
            {Messages, "CountDiscrepancy", "If Count is specified for a kit product, throws an error:"},
            transactions = DropShipSamples[
                {Object[Product, "Fake kit product with plates"]},
                {"kitProduct222222"},
                Count -> {4}
            ],
            $Failed,
            Messages :> {Error::CountDiscrepancy, Error::InvalidOption},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "VolumeDiscrepancy", "If a volume if provided that disagrees with the known volume of the product, throws an error::"},
            DropShipSamples[
                Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"],
                "404478943",
                Quantity -> 2,
                Volume -> 1Liter
            ],
            $Failed,
            Messages :> {Error::VolumeDiscrepancy, Error::InvalidOption}
        ],
        Example[
            {Messages, "VolumeDiscrepancy", "If Volume is specified for a kit product, throws an error:"},
            transactions = DropShipSamples[
                {Object[Product, "Fake kit product with plates"]},
                {"kitProduct222222"},
                Volume -> {4 * Milliliter}
            ],
            $Failed,
            Messages :> {Error::VolumeDiscrepancy, Error::InvalidOption},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "ContainerOutInconsistent", "If different ContainerOut is specified for the same model, give a message and fail:"},
            DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "1340493",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ContainerOut -> {Model[Container, Vessel, "50mL Tube"], Model[Container, Vessel, "1L Glass Bottle"]},
                Volume -> 25 Milliliter],
            $Failed,
            Messages :> {Error::ContainerOutInconsistent, Error::InvalidOption}
        ],

        Example[
            {Issues, "InputLengthMismatch", "If the inputs don't match in length, give a message and return $Failed:"},
            DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]}, {"12221"}, Quantity -> {1, 2}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[
            {Messages, "ModelsHaveConflictingVolume", "When generating a transaction, if the same model is specified with differing amount options, give a message and return $Failed:"},
            DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Item, Column, "Test model column for DropShipSamples (1)"]},
                "404478943",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {1 Liter, 2 Liter, None}
            ],
            $Failed,
            Messages :> {Error::ModelsHaveConflictingVolume, Error::InvalidOption}
        ],
        Example[
            {Messages, "ModelsHaveConflictingVolume", "When updating a transaction, if the same model within a transaction is specified with differing amount options, give a message and return $Failed:"},
            DropShipSamples[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"]},
                Volume -> {1Liter, 4Liter, 3Liter, 3Liter, Automatic, Automatic, Automatic, Automatic, Automatic, Automatic, 2Liter, 2Liter, Automatic, Automatic}
            ],
            $Failed,
            Messages :> {Error::ModelsHaveConflictingVolume, Error::InvalidOption}
        ],
        Example[
            {Messages, "ModelsHaveConflictingCount", "When generating a transaction, if the same model is specified with differing count options, give a message and return $Failed:"},
            DropShipSamples[
                {Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"], Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"], Model[Item, Column, "Test model column for DropShipSamples (1)"]},
                "404478943",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> {10, 20, None}
            ],
            $Failed,
            Messages :> {Error::ModelsHaveConflictingCount, Error::ModelsHaveConflictingMass, Error::InvalidOption}
        ],
        Example[
            {Messages, "ModelsHaveConflictingCount", "When updating a transaction, if the same model within a transaction is specified with differing count options, give a message and return $Failed:"},
            DropShipSamples[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"]},
                Count -> {5, 10, None, None, None, None, None, None, None, None}
            ],
            $Failed,
            Messages :> {Error::ModelsHaveConflictingCount, Error::InvalidOption}
        ],
        Example[
            {Messages, "ModelsHaveConflictingMass", "When generating a transaction, if the same model is specified with differing mass options, give a message and return $Failed:"},
            DropShipSamples[
                {Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Item, Column, "Test model column for DropShipSamples (1)"]},
                "404478943",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> {10Gram, 20Gram, None}
            ],
            $Failed,
            Messages :> {Error::ModelsHaveConflictingMass, Error::InvalidOption}
        ],
        Example[
            {Messages, "ModelsHaveConflictingMass", "When updating a transaction, if the same model within a transaction is specified with differing mass options, give a message and return $Failed:"},
            DropShipSamples[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"]},
                Mass -> {None, None, None, None, None, None, 10Gram, 10Gram, 20Gram, 10Gram}
            ],
            $Failed,
            Messages :> {Error::ModelsHaveConflictingMass, Error::InvalidOption}
        ],
        Example[
            {Messages, "OptionLengthMismatch", "If any listed options don't match the length of the inputs, give a message and return $Failed:"},
            DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"];
                DateShipped -> {DateObject[Round[AbsoluteTime[Now - 1 Day]]], DateObject[Round[AbsoluteTime[Now]]], DateObject[Round[AbsoluteTime[Now - 1 Day]]]},
                Volume -> ProductDocumentation
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[
            {Messages, "InvalidDates", "If DateShipped is after ExpectedDeliveryDate, give a message and return $Failed:"},
            DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {1, 1, 2, 3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                DateShipped -> {DateObject[Round[AbsoluteTime[Now]]], DateObject[Round[AbsoluteTime[Now - 1 Day]]], DateObject[Round[AbsoluteTime[Now + 1 Day]]], DateObject[Round[AbsoluteTime[Now - 1 Day]]], None},
                ExpectedDeliveryDate -> {DateObject[Round[AbsoluteTime[Now - 1 Day]]], DateObject[Round[AbsoluteTime[Now]]], DateObject[Round[AbsoluteTime[Now - 2 Day]]], None, DateObject[Round[AbsoluteTime[Now - 1 Day]]]},
                Volume -> ProductDocumentation
            ],
            $Failed,
            Messages :> {Error::InvalidDates, Error::InvalidOption}
        ],

        Example[
            {Messages, "NewServiceProviderForModel", "If the specified service provider is not recorded for the specified model, give a message that the model will be updated:"},
            DropShipSamples[{Model[Sample, "Test model oligo for DropShipSamples (2)"]},
                "98763213",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (2)"]
            ],
            {ObjectP[Object[Transaction, DropShipping]]},
            Messages :> {Warning::NewServiceProviderForModel}
        ],

        Example[
            {Additional, "If the specified service provider is not recorded for the specified model, update the model with the service provider:"},
            DropShipSamples[{Model[Sample, "Test model oligo for DropShipSamples (2)"]},
                "98763213",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (2)"]
            ];
            Download[Model[Sample, "Test model oligo for DropShipSamples (2)"], ServiceProviders],
            {LinkP[Object[Company, Service, "Test service provider for DropShipSamples (1)"]], LinkP[Object[Company, Service, "Test service provider for DropShipSamples (2)"]]},
            Messages :> {Warning::NewServiceProviderForModel}
        ],


        Example[
            {Additional, "If DateShipped is specified, the transaction Status is Shipped, DateShipped is populated, and DateOrdered remains blank; If DateShipped is not specified, the transaction Status is Ordered, DateOrdered is populated, and DateShipped remains blank:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "11-npz-3327",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                DateShipped -> {now, None},
                Volume -> ProductDocumentation
            ];
            Download[transactions, {Status, DateShipped, DateOrdered}],
            {{Shipped, EqualP[now], Null}, {Ordered, Null, _?DateObjectQ}},
            Variables :> {transactions, now}
        ],

        Example[
            {Options, Destination, "Specify the destination where the samples will be sent:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Destination -> Object[Container, Site, "Test Site for DropShipSamples"],
                Volume -> ProductDocumentation
            ];
            Download[transactions, Destination],
            {LinkP[Object[Container, Site, "Test Site for DropShipSamples"]]},
            Variables :> {transactions}
        ],

        Example[
            {Options, DateShipped, "Specify a date shipped when generating a transaction:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                DateShipped -> now,
                Volume -> ProductDocumentation
            ];
            Download[transactions, DateShipped],
            {EqualP[now]},
            Variables :> {transactions, now}
        ],

        Example[
            {Options, DateShipped, "Specify a date shipped for each object when generating a transaction:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            now4 = DateObject[Round[AbsoluteTime[Now - 2 Day]]];
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                DateShipped -> {now, now4},
                Volume -> ProductDocumentation
            ];
            Download[transactions, DateShipped],
            {EqualP[now], EqualP[now4]},
            Variables :> {transactions, now, now4}
        ],

        Example[
            {Options, DateShipped, "Specify a date shipped for some but not all of the models when generating a transaction.:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                DateShipped -> {now, None},
                Volume -> ProductDocumentation
            ];
            Download[transactions, DateShipped],
            {EqualP[now], Null},
            Variables :> {transactions, now}
        ],

        Example[
            {Options, ExpectedDeliveryDate, "Specify an expected delivery date when generating a transaction:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ExpectedDeliveryDate -> now,
                Volume -> ProductDocumentation
            ];
            Download[transactions, DateExpected],
            {EqualP[now]},
            Variables :> {transactions, now}
        ],

        Example[
            {Options, ExpectedDeliveryDate, "Specify an expected delivery date for each object when generating a transaction:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            now4 = DateObject[Round[AbsoluteTime[Now - 2 Day]]];
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ExpectedDeliveryDate -> {now, now4},
                Volume -> ProductDocumentation
            ];
            Download[transactions, DateExpected],
            {EqualP[now], EqualP[now4]},
            Variables :> {transactions, now, now4}
        ],

        Example[
            {Options, ExpectedDeliveryDate, "Specify an expected delivery date for some but not all of the models when generating a transaction.:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                ExpectedDeliveryDate -> {now, None},
                Volume -> ProductDocumentation
            ];
            Download[transactions, DateExpected],
            {EqualP[now], Null},
            Variables :> {transactions, now}
        ],


        Example[
            {Options, TrackingNumber, "Specify a tracking number when generating a transaction:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                TrackingNumber -> "123456",
                Volume -> ProductDocumentation
            ];
            Download[transactions, TrackingNumbers],
            {{"123456"}},
            Variables :> {transactions}
        ],

        Example[
            {Options, TrackingNumber, "Specify a tracking number for each model when generating a transaction:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                TrackingNumber -> {"123456", "654321"},
                Volume -> ProductDocumentation
            ];
            Download[transactions, TrackingNumbers],
            {{"123456"}, {"654321"}},
            Variables :> {transactions}
        ],

        Example[
            {Options, TrackingNumber, "Specify a tracking number for some but not all of the models when generating a transaction.:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                TrackingNumber -> {"123456", None},
                Volume -> ProductDocumentation
            ];
            Download[transactions, TrackingNumbers],
            {{"123456"}, {}},
            Variables :> {transactions}
        ],

        Example[
            {Options, Shipper, "Specify a shipper when generating a transaction:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Shipper -> Object[Company, Shipper, "Test shipper for DropShipSamples"],
                Volume -> ProductDocumentation
            ];
            Download[transactions, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions]},
            Variables :> {transactions}
        ],

        Example[
            {Options, Shipper, "Specify a shipper for each object when generating a transaction:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Shipper -> {Object[Company, Shipper, "Test shipper for DropShipSamples"], Object[Company, Shipper, "Test shipper for DropShipSamples (2)"]},
                Volume -> ProductDocumentation
            ];
            Download[transactions, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples (2)"], Transactions]},
            Variables :> {transactions}
        ],

        Example[
            {Options, Shipper, "Specify a shipper for some but not all of the models when generating a transaction.:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Shipper -> {Object[Company, Shipper, "Test shipper for DropShipSamples"], None},
                Volume -> ProductDocumentation
            ];
            Download[transactions, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], Null},
            Variables :> {transactions}
        ],


        Example[
            {Options, ExpectedDeliveryDate, "Specify an expected delivery date when updating shipping information:"},
            now5 = DateObject[Round[AbsoluteTime[Now + 3 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                ExpectedDeliveryDate -> now5
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, DateExpected],
            {EqualP[now5], EqualP[now5]},
            Variables :> {now5}
        ],

        Example[
            {Options, ExpectedDeliveryDate, "Specify an expected delivery date for each object when updating shipping information:"},
            now5 = DateObject[Round[AbsoluteTime[Now + 3 Day]]];
            now6 = DateObject[Round[AbsoluteTime[Now + 5 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                ExpectedDeliveryDate -> {now5, now6}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, DateExpected],
            {EqualP[now5], EqualP[now6]},
            Variables :> {now5}
        ],

        Example[
            {Options, ExpectedDeliveryDate, "Specify an expected delivery date for some but not all of the objects when updating shipping information:"},
            now5 = DateObject[Round[AbsoluteTime[Now + 3 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                ExpectedDeliveryDate -> {now5, None}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, DateExpected],
            {EqualP[now5], Null},
            Variables :> {now5}
        ],
        Example[
            {Options, Name, "Specify a name for the transaction:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                },
                "404478943",
                Quantity -> {2, 3, 5},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {ProductDocumentation, None, None},
                Name -> "my drop ship transaction"
            ];
            Download[transactions, Name],
            {"my drop ship transaction"},
            Variables :> {transactions}
        ],
        Example[
            {Options, Name, "If multiple transactions are generated, an index is added to the name:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                },
                {"404478943", "8898875", "404478943"},
                Quantity -> {2, 3, 5},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {ProductDocumentation, None, None},
                Name -> "my drop ship transaction"
            ];
            Download[transactions, Name],
            {"my drop ship transaction_1", "my drop ship transaction_2"},
            Variables :> {transactions}
        ],

        Example[
            {Options, Name, "Update the name of existing transactions:"},
            Download[DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"],
                    Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                Name -> "My transaction"
            ], Name],
            {"My transaction_1", "My transaction_2"}
        ],

        Example[
            {Messages, Name, "If the name is already in use, throws an error and fails:"},
            DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                },
                "404478943",
                Quantity -> {2, 3, 5},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {ProductDocumentation, None, None},
                Name -> "My existing transaction"
            ],
            $Failed,
            Messages :> {Error::NonUniqueName, Error::InvalidOption}
        ],
        Example[
            {Messages, Name, "If the name is already in use, throws an error and fails:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"],
                Name -> "My existing transaction"
            ],
            $Failed,
            Messages :> {Error::NonUniqueName, Error::InvalidOption}
        ],

        Example[
            {Messages, "InputLengthMismatch", "If a listed option does not match the length of the transaction object inputs, give a message and return $Failed:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                ExpectedDeliveryDate -> {DateObject[Round[AbsoluteTime[Now + 3 Day]]], None, DateObject[Round[AbsoluteTime[Now + 3 Day]]]}
            ],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],

        Example[
            {Messages, "OptionMustMatchModelsInTransactions", "If a listed option does not match the length of the models in the transaction object inputs, give a message and return $Failed:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                Mass -> {5Gram, 3Gram}
            ],
            $Failed,
            Messages :> {Error::OptionMustMatchModelsInTransactions, Error::InvalidOption}
        ],

        Example[
            {Options, Shipper, "Specify a shipper when updating shipping information:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                Shipper -> Object[Company, Shipper, "Test shipper for DropShipSamples"]
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions]}
        ],

        Example[
            {Options, Shipper, "Specify a shipper for each object when updating shipping information:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                Shipper -> {Object[Company, Shipper, "Test shipper for DropShipSamples"], Object[Company, Shipper, "Test shipper for DropShipSamples (2)"]}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples (2)"], Transactions]}
        ],

        Example[
            {Options, Shipper, "Specify a shipper for some but not all of the objects when updating shipping information:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                Shipper -> {Object[Company, Shipper, "Test shipper for DropShipSamples"], None}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], Null}
        ],


        Example[
            {Options, TrackingNumber, "Specify a tracking number when updating shipping information:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                TrackingNumber -> "123456"
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, TrackingNumbers],
            {{"123456"}, {"123456"}}
        ],

        Example[
            {Options, TrackingNumber, "Specify tracking numbers for each transaction when updating shipping information:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                TrackingNumber -> {{"123456", "654321"}, {"90999"}}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, TrackingNumbers],
            {{"123456", "654321"}, {"90999"}}
        ],

        Example[
            {Options, TrackingNumber, "Specify tracking numbers for some but not all of the transactions when updating shipping information:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                TrackingNumber -> {"123456", None}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, TrackingNumbers],
            {{"123456"}, {}}
        ],

        Example[
            {Options, DateShipped, "Specify a date shipped when updating shipping information:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                DateShipped -> now
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, DateShipped],
            {EqualP[now], EqualP[now]},
            Variables :> {now}
        ],

        Example[
            {Options, DateShipped, "Specify a date shipped for each object when updating shipping information:"},
            now = DateObject[Round[AbsoluteTime[Now - 1 Day]]];
            now4 = DateObject[Round[AbsoluteTime[Now - 2 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]},
                DateShipped -> {now, now4}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"]}, DateShipped],
            {EqualP[now], EqualP[now4]},
            Variables :> {now, now4}
        ],

        Example[
            {Options, Volume, "Specify the volume of the samples that will be sent:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> 1.5Milliliter
            ];
            Download[transactions, {Volume, VolumeSource}],
            {{{Quantity[0.0015`, "Liters"], Quantity[0.0015`, "Liters"]}, {UserSpecified, UserSpecified}}},
            Variables :> {transactions}
        ],
        Example[
            {Options, Volume, "Specify that the volume of the sent samples should be found on the documentation that arrives with the sample:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> ProductDocumentation
            ];
            Download[transactions, {Volume, VolumeSource}],
            {{{Quantity[0.`, "Liters"], Quantity[0.`, "Liters"]}, {ProductDocumentation, ProductDocumentation}}},
            Variables :> {transactions}
        ],
        Example[
            {Options, Volume, "Specify that the volume of the sent samples should be measured upon arrival:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> ExperimentallyMeasure
            ];
            Download[transactions, {Volume, VolumeSource}],
            {{{Quantity[0.`, "Liters"], Quantity[0.`, "Liters"]}, {ExperimentallyMeasure, ExperimentallyMeasure}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Volume, "Specify different volume options for each input:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"], Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"]},
                "11-npz-3327",
                Quantity -> {3, 1, 2},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {ProductDocumentation, 1.5 Milliliter, None},
                Mass -> {None, None, ProductDocumentation}
            ];
            Download[transactions, {Volume, VolumeSource}],
            {{{Quantity[0.`, "Liters"], Quantity[0.0015`, "Liters"], Quantity[0.`, "Liters"]}, {ProductDocumentation, UserSpecified, None}}},
            Variables :> {transactions}
        ],

        Example[
            {Options, Volume, "VolumeSource automatically resolves to ExperimentallyMeasure for liquid model input and to None for all other samples. Volume initializes to 0 gram for all of these case:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"]
                },
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> Automatic
            ];
            Download[transactions, {Volume, VolumeSource}],
            {{{Quantity[0.`, "Liters"], Quantity[0.`, "Liters"], Quantity[0.`, "Liters"]},
                {ExperimentallyMeasure, None, None}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],

        Example[
            {Options, Mass, "MassSource automatically resolves to ExperimentallyMeasure for solid model input and to None for all other samples. Mass initializes to 0 gram for all of these cases:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"]
                },
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> Automatic
            ];
            Download[transactions, {Mass, MassSource}],
            {
                {
                    {Quantity[0.`, "Grams"], Quantity[0.`, "Grams"], Quantity[0.`, "Grams"]},
                    {ExperimentallyMeasure, None, None}}
            },
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Mass, "Specify the mass of the samples that will be sent:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> {5Gram, 100Gram},
                Volume -> {None, ProductDocumentation}
            ];
            Download[transactions, {Mass, MassSource}],
            {{{Quantity[5.`, "Grams"], Quantity[100.`, "Grams"]}, {UserSpecified, UserSpecified}}},
            Variables :> {transactions}
        ],
        Example[
            {Options, Mass, "Specify that the mass of the sent samples should be found on the documentation that arrives with the sample:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> ProductDocumentation,
                Volume -> {None, ProductDocumentation}
            ];
            Download[transactions, {Mass, MassSource}],
            {{{Quantity[0.`, "Grams"], Quantity[0.`, "Grams"]}, {ProductDocumentation, ProductDocumentation}}},
            Variables :> {transactions}
        ],
        Example[
            {Options, Mass, "Specify that the mass of the sent samples should be measured upon arrival:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> ExperimentallyMeasure
            ];
            Download[transactions, {Mass, MassSource}],
            {{{Quantity[0.`, "Grams"], Quantity[0.`, "Grams"]}, {ExperimentallyMeasure, ExperimentallyMeasure}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Mass, "Specify different mass options for each input:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"]},
                "98763213",
                Quantity -> {3, 1, 2},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> {ProductDocumentation, None, 40Gram},
                Volume -> {None, ProductDocumentation, None}
            ];
            Download[transactions, {Mass, MassSource}],
            {{{Quantity[0.`, "Grams"], Quantity[0.`, "Grams"], Quantity[40.`, "Grams"]}, {ProductDocumentation, None, UserSpecified}}},
            Variables :> {transactions}
        ],


        Example[
            {Options, Mass, "Update the mass of models in an existing transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"],
                Mass -> {None, None, 5Gram, 5Gram}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], {Mass, MassSource}],
            {{Quantity[0., "Grams"], Quantity[0., "Grams"], Quantity[5., "Grams"], Quantity[5., "Grams"]},
                {None, None, UserSpecified, UserSpecified}}
        ],
        Example[
            {Options, Count, "CountSource automatically resolves to ExperimentallyMeasure for tablet model input and to None for all other samples. Count initializes to 0 for all of these cases:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"]
                },
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> Automatic
            ];
            Download[transactions, {Count, CountSource}],
            {{{0, 0, 0}, {None, ExperimentallyMeasure, None}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Count, "If Mass is given and TabletWeight is known, Count is calculated to resolve automatics:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"]
                },
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> Automatic,
                Mass -> {100Gram, 100Gram, None}
            ];
            Download[transactions, {Count, CountSource}],
            {{{0, 50, 0}, {None, UserSpecified, None}}},
            Variables :> {transactions}
        ],
        Example[
            {Options, Mass, "If Count is given and TabletWeight is known, Mass is calculated to resolve automatics:"},
            transactions = DropShipSamples[
                {
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"]
                },
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> {Automatic, 50, Automatic},
                Mass -> Automatic
            ];
            Download[transactions, {Mass, MassSource}],
            {{{Quantity[0., "Grams"], Quantity[100., "Grams"], Quantity[0., "Grams"]}, {ExperimentallyMeasure, UserSpecified, None}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Quantity, "If no quantities are specified, assumes one of each input:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> ProductDocumentation
            ];
            Download[transactions, OrderQuantities],
            {{1, 1}},
            Variables :> {transactions}
        ],
        Example[
            {Options, Quantity, "Specify the quantity of the samples that will be sent:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> {5, None},
                Mass -> {10Gram, 100Gram}
            ];
            Download[transactions, OrderQuantities],
            {{3, 1}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Issues, Quantity, "Update the quantity of objects in an existing transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"],
                Quantity -> {5, 4, 3, 2, 1, 10, 9, 8, 7, 6}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"], OrderQuantities],
            {5, 4, 3, 2, 1, 10, 9, 8, 7, 6}
        ], Example[
        {Options, Count, "Specify the count of the samples that will be sent:"},
        transactions = DropShipSamples[
            {Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
            "98763213",
            Quantity -> {3, 1},
            Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
            Count -> {5, None},
            Mass -> {10Gram, 100Gram}
        ];
        Download[transactions, {Count, CountSource}],
        {{{5, 0}, {UserSpecified, None}}},
        Variables :> {transactions},
        Messages :> {Warning::MeasurementMayRequireTransfer}
    ],
        Example[
            {Options, Count, "Specify that the count of the sent samples should be found on the documentation that arrives with the sample:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> {ProductDocumentation, None},
                Volume -> {None, ProductDocumentation}
            ];
            Download[transactions, {Count, CountSource}],
            {{{0, 0}, {ProductDocumentation, None}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Count, "Specify that the count of the sent samples should be measured upon arrival:"},
            transactions = DropShipSamples[
                Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
                "98763213",
                Quantity -> 2,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> ExperimentallyMeasure
            ];
            Download[transactions, {Count, CountSource}],
            {{{0}, {ExperimentallyMeasure}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],
        Example[
            {Options, Count, "Update the count of objects in an existing transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"],
                Count -> {20, 20, None, None, None, None, None, None, None, None}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"], {Count, CountSource}],
            {{20, 20, 0, 0, 0, 0, 0, 0, 0, 0},
                {UserSpecified, UserSpecified, None, None, None, None, None, None, None, None}}
        ],
        Example[
            {Messages, "MassCountDisagree", "If Mass and Count are both given and disagree based on the TabletWeight throw an error:"},
            DropShipSamples[
                {
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"]
                },
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> 20,
                Mass -> 100Gram
            ],
            $Failed,
            Messages :> {Error::MassCountDisagree, Error::InvalidOption}
        ],
        Example[
            {Options, Volume, "Update the volume of models in an existing transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"],
                Volume -> {ProductDocumentation, ProductDocumentation, Automatic, Automatic}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], {Volume, VolumeSource}],
            {{Quantity[0., "Liters"], Quantity[0., "Liters"], Quantity[0., "Liters"], Quantity[0., "Liters"]},
                {ProductDocumentation, ProductDocumentation, None, None}}
        ],
        Example[
            {Options, ReceivingTolerance, "Specify the allowable difference between received amount and expected amount for any ordered samples:"},
            transactions = DropShipSamples[{Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"], Model[Sample, "Test model oligo for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                ReceivingTolerance -> 2 * Percent,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Shipper -> Object[Company, Shipper, "Test shipper for DropShipSamples"],
                Volume -> ProductDocumentation
            ];
            Download[transactions, ReceivingTolerance],
            {2.` * Percent},
            Variables :> {transactions}
        ],
        Example[
            {Messages, "VolumeNotRequired", "Specifying a volume for items will throw an error when generating a transaction:"},
            transactions = DropShipSamples[
                {Model[Item, Column, "Test model column for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> {5Milliliter, 4Liter}
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::VolumeNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "MassNotRequired", "Specifying a mass for items will throw an error when generating a transaction:"},
            transactions = DropShipSamples[
                {Model[Item, Column, "Test model column for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> {5Gram, 4Gram},
                Volume -> {None, 4.1Milliliter}
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::MassNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "CountNotRequired", "Specifying a count for non-tablets will throw an error when generating a transaction:"},
            transactions = DropShipSamples[
                {Model[Item, Column, "Test model column for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Count -> 5,
                Volume -> {None, 4.1Milliliter}
            ],
            $Failed,
            Variables :> {transactions},
            Messages :> {Error::CountNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "VolumeNotRequired", "Specifying a volume for items will throw a warning and not populate any volume-related fields for those models when updating a transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"],
                Volume -> {5Milliliter}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"], {Volume, VolumeSource}],
            {{Quantity[0., "Liters"]}, {None}},
            Messages :> {Error::VolumeNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "MassNotRequired", "Specifying a mass for items will throw a warning and not populate any mass-related fields for those models when updating a transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"],
                Mass -> {5Gram}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"], {Mass, MassSource}],
            {{Quantity[0., "Grams"]}, {None}},
            Messages :> {Error::MassNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "CountNotRequired", "Specifying a count for items will throw a warning and not populate any count-related fields for those models when updating a transaction:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"],
                Count -> {5}
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"], {Count, CountSource}],
            {{0}, {None}},
            Messages :> {Error::CountNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "MeasurementMayRequireTransfer", "When generating a transaction, if mass or volume is specified as ExperimentallyMeasure, throw a warning that the samples may be transferred to a different container:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"], Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]},
                "98763213",
                Quantity -> {3, 1},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Mass -> ExperimentallyMeasure
            ];
            Download[transactions, {Mass, MassSource}],
            {{{Quantity[0.`, "Grams"], Quantity[0.`, "Grams"]}, {ExperimentallyMeasure, ExperimentallyMeasure}}},
            Variables :> {transactions},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],

        Example[
            {Messages, "MeasurementMayRequireTransfer", "When updating a transaction, if mass or volume is specified as ExperimentallyMeasure, throw a warning that the samples may be transferred to a different container:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"],
                Mass -> ExperimentallyMeasure
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], {Mass, MassSource}],
            {{Quantity[0.`, "Grams"], Quantity[0.`, "Grams"], Quantity[0.`, "Grams"], Quantity[0.`, "Grams"]},
                {ExperimentallyMeasure, ExperimentallyMeasure, ExperimentallyMeasure, ExperimentallyMeasure}},
            Messages :> {Warning::MeasurementMayRequireTransfer}
        ],

        Example[
            {Messages, "SampleMayBeTransferred", "When generating a transaction, if volume is specified for a liquid model but the model does not have density, give a warning that the samples may still be transferred depending on the container it arrives in:"},
            transactions = DropShipSamples[
                {Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"]},
                "11-npz-3327",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Volume -> 2Milliliter
            ];
            Download[transactions, {Volume, VolumeSource}],
            {{{Quantity[0.002`, "Liters"]}, {UserSpecified}}},
            Variables :> {transactions},
            Messages :> {Warning::SampleMayBeTransferred}
        ],


        (* rack related errors *)
        Example[{Messages, "IncompatibleProvidedRackModel", "When the ShippedRack is not capable of supporting the container in which the product arrives (or if the ordered item is a container), an error is shown indicating incompatability:"},
            DropShipSamples[
                {Object[Product, "Test water product for DropShipSamples test 2" <> $SessionUUID]},
                "123456789",
                ShippedRack -> {Model[Container, Rack, "Cork ring for 200-500 mL round bottom flasks"]},
                Mass -> 5 Gram
            ],
            $Failed,
            Messages :> {Error::IncompatibleProvidedRackModel, Error::InvalidOption}
        ],
        Example[{Messages, "NoCompatibleRack", "If there is no Model[Container, Rack] in the database that can hold the recieved container upright based on its Footprint and Dimensions, return an error:"},
            DropShipSamples[
                {Object[Product, "Test water product for DropShipSamples test 2" <> $SessionUUID]},
                "123456789",
                Mass -> 5 Gram
            ],
            $Failed,
            Messages :> {Error::NoCompatibleRack, Error::InvalidOption},
            Stubs :> {rackFootprintsAndDimensions[] := {}}
        ],
        Example[{Options, ShippedRack, "Use the ShippedRack option to indicate that a rack will be shipped as part of the order. The compatibility of the rack will also be assessed:"},
            transaction = FirstCase[
                DropShipSamples[
                    {Object[Product, "Test water product for DropShipSamples test 2" <> $SessionUUID]},
                    "123456789",
                    ShippedRack -> {Model[Container, Rack, "25 Position 50mL Tube Rack"]},
                    Mass -> 5 Gram
                ],
                ObjectP[Object[Transaction, DropShipping]
                ]
            ];
            Download[transaction, ShippedRacks],
            {ObjectP[Model[Container, Rack]]},
            Variables :> {transaction}
        ],


        Example[
            {Messages, "SampleMayBeTransferred", "When updating a transaction, if volume is specified for a liquid model but the model does not have density, give a warning that the samples may still be transferred depending on the container it arrives in:"},
            DropShipSamples[
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (4)"],
                Volume -> 2Milliliter
            ];
            Download[Object[Transaction, DropShipping, "Test transaction for DropShipSamples (4)"], {Volume, VolumeSource}],
            {{Quantity[0.002`, "Liters"]}, {UserSpecified}},
            Messages :> {Warning::SampleMayBeTransferred}
        ],

        Example[
            {Options, ExpectedDeliveryDate, "When updating shipping information, Automatic ExpectedDeliveryDate will leave the existing date expected in place, None will clear the existing date expected, and a new date expected will overwrite the old date expected:"},
            now3 = DateObject[Round[AbsoluteTime[Now + 1 Day]]];
            now7 = DateObject[Round[AbsoluteTime[Now + 7 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                ExpectedDeliveryDate -> now3
            ];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                ExpectedDeliveryDate -> {Automatic, None, now7}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]}, DateExpected],
            {EqualP[now3], Null, EqualP[now7]},
            Variables :> {now3, now7}
        ],

        Example[
            {Options, Shipper, "When updating shipping information, Automatic Shipper will leave the existing Shipper in place, None will clear the existing Shipper, and a new Shipper will overwrite the old Shipper:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                Shipper -> Object[Company, Shipper, "Test shipper for DropShipSamples"]
            ];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                Shipper -> {Automatic, None, Object[Company, Shipper, "Test shipper for DropShipSamples (2)"]}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]}, Shipper],
            {LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples"], Transactions], Null, LinkP[Object[Company, Shipper, "Test shipper for DropShipSamples (2)"], Transactions]}
        ],

        Example[
            {Options, TrackingNumber, "When updating shipping information, Automatic TrackingNumber will leave the existing tracking number in place, Null will clear the existing tracking number, and a new tracking number will overwrite the old tracking number:"},
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                TrackingNumber -> "123456"
            ];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                TrackingNumber -> {Automatic, None, "98765"}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]}, TrackingNumbers],
            {{"123456"}, {}, {"98765"}}
        ],

        Example[
            {Options, DateShipped, "When updating shipping information, Automatic DateShipped will leave the existing date shipped in place, Null will clear the existing date shipped and revert the transaction status to Pending, and a new date shipped will overwrite the old date shipped:"},
            now3 = DateObject[Round[AbsoluteTime[Now + 1 Day]]];
            now7 = DateObject[Round[AbsoluteTime[Now + 7 Day]]];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                DateShipped -> now3
            ];
            DropShipSamples[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                DateShipped -> {Automatic, None, now7}
            ];
            Download[{Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"], Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"]},
                {DateShipped, Status, StatusLog}],
            {
                {
                    EqualP[now3],
                    Shipped,
                    {
                        {EqualP[now3], Shipped, LinkP[Object[User]]},
                        {_?DateObjectQ, Shipped, LinkP[Object[User]]}
                    }
                },
                {
                    EqualP[now3],
                    Ordered,
                    {
                        {EqualP[now3], Shipped, LinkP[Object[User]]},
                        {_?DateObjectQ, Ordered, LinkP[Object[User]]}}
                },
                {
                    EqualP[now7],
                    Shipped,
                    {
                        {EqualP[now3], Shipped, LinkP[Object[User]]},
                        {EqualP[now7], Shipped, LinkP[Object[User]]}}
                }
            },
            Variables :> {now3, now7},
            SetUp :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for DropShipSamples (1)"], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for DropShipSamples (2)"], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for DropShipSamples (3)"], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>
                    }
                ];
            ),
            TearDown :> (
                Upload[
                    {
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for DropShipSamples (1)"], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for DropShipSamples (2)"], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>,
                        <|Object -> Object[Transaction, ShipToECL, "Test transaction for DropShipSamples (3)"], Replace[StatusLog] -> {}, Status -> Null, DateShipped -> Null|>
                    }
                ]
            )
        ]
    },


    SymbolSetUp :> {
        Module[{testObjects, existingObjects},
            testObjects = {
                Object[Container, Site, "Test Site for DropShipSamples"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                Model[Sample, "Test model oligo for DropShipSamples (1)"],
                Model[Sample, "Test model oligo for DropShipSamples (2)"],
                Model[Item, Column, "Test model column for DropShipSamples (1)"],
                Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"],
                Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Object[Company, Service, "Test service provider for DropShipSamples (2)"],
                Object[Company, Service, "Test service provider for DropShipSamples (3)"],
                Object[Company, Service, "Test service provider for DropShipSamples (4)"],
                Object[Product, "Test product for DropShipSamples"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (product)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (4)"],
                Object[Company, Shipper, "Test shipper for DropShipSamples"],
                Object[Company, Shipper, "Test shipper for DropShipSamples (2)"],
                Object[Transaction, DropShipping, "My transaction_1"],
                Object[Transaction, DropShipping, "My transaction_2"],
                Object[Company, Supplier, "Test Supplier (DropShipSamples unit tests)" <> $SessionUUID],
                Model[Container, Vessel, "Shell container model for DropShipSamples test" <> $SessionUUID],
                Object[Product, "Test water product for DropShipSamples test 1" <> $SessionUUID],
                Object[Product, "Test water product for DropShipSamples test 2" <> $SessionUUID],
                Model[Sample, "Water model for DropShipSamples test 1" <> $SessionUUID],
                Model[Sample, "Water model for DropShipSamples test 2" <> $SessionUUID]

                (*Object[Transaction, DropShipping, "My existing transaction"],
				Object[Container, Site, "Test Site for DropShipSamples"],
				Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (liquid, with product) for DropShipSamples (1)"],
				Object[Company, Supplier, "Test supplier for DropShipSamples"],
				Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
				Model[Sample, "Test model oligo for DropShipSamples (1)"],
				Model[Sample, "Test model oligo for DropShipSamples (2)"],
				Model[Item, Column, "Test model column for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
				Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"],
				Model[Sample, "Test model chemical (solid, with product) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (tablet, with product) for DropShipSamples (1)"],
				Object[Company, Shipper, "Test shipper for DropShipSamples"],
				Object[Company, Shipper, "Test shipper for DropShipSamples (2)"],
				Object[Product, "Test product for DropShipSamples"]*)
            };
            existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
            If[
                MatchQ[existingObjects, Except[Null | {}]],
                EraseObject[existingObjects, Force -> True, Verbose -> False];
            ];
        ];

        Module[{supplierID, shellContainerModelID, product1ID, product2ID, sampleModel1ID, sampleModel2ID, packets, upload1Packets},
            {
                supplierID,
                shellContainerModelID,
                product1ID,
                product2ID,
                sampleModel1ID,
                sampleModel2ID
            } = CreateID[{
                Object[Company, Supplier],
                Model[Container, Vessel],
                Object[Product],
                Object[Product],
                Model[Sample],
                Model[Sample]
            }];

            packets = {
                <|
                    Object -> supplierID,
                    DeveloperObject -> True,
                    Name -> "Test Supplier (DropShipSamples unit tests)" <> $SessionUUID
                |>,
                <|Object -> shellContainerModelID, SelfStanding -> Null, Name -> "Shell container model for DropShipSamples test" <> $SessionUUID, DeveloperObject -> True|>,
                <|
                    Object -> sampleModel1ID, DeveloperObject -> True, Name -> "Water model for DropShipSamples test 1" <> $SessionUUID,
                    Replace[Composition] -> {{100 MassPercent, Link[Model[Molecule, "Water"]]}}, UsedAsSolvent -> False, Replace[Authors] -> {Link[$PersonID]},
                    State -> Liquid, Density -> 1 Gram / Milliliter, Tablet -> False,
                    Expires -> True, UnsealedShelfLife -> 6 Month,
                    DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], MSDSRequired -> False, Flammable -> True, DrainDisposal -> True, Replace[IncompatibleMaterials] -> {None}
                |>,
                <|
                    Object -> sampleModel2ID, DeveloperObject -> True, Name -> "Water model for DropShipSamples test 2" <> $SessionUUID,
                    Replace[Composition] -> {{100 MassPercent, Link[Model[Molecule, "Water"]]}}, UsedAsSolvent -> False, Replace[Authors] -> {Link[$PersonID]},
                    State -> Liquid, Density -> 1 Gram / Milliliter, Tablet -> False,
                    Expires -> True, UnsealedShelfLife -> 6 Month,
                    DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], MSDSRequired -> False, Flammable -> True, DrainDisposal -> True, Replace[IncompatibleMaterials] -> {None}
                |>,
                <|
                    Object -> product1ID, DeveloperObject -> True, Name -> "Test water product for DropShipSamples test 1" <> $SessionUUID,
                    Replace[Synonyms] -> {"Test water product for DropShipSamples test 1" <> $SessionUUID}, Author -> Link[$PersonID],
                    ProductModel -> Link[sampleModel1ID, Products], Supplier -> Link[supplierID, Products], Packaging -> Single, SampleType -> Bottle, NumberOfItems -> 1,
                    DefaultContainerModel -> Link[shellContainerModelID, ProductsContained], Amount -> 5 Gram, Stocked -> True, EstimatedLeadTime -> 8 Day,
                    Price -> 20.5 USD, UsageFrequency -> Low, Density -> 1 Gram / Milliliter,
                    CatalogNumber -> "TestWaterProduct", CatalogDescription -> "5 Gram of the test water in a shell container"
                |>,
                <|
                    Object -> product2ID, DeveloperObject -> True, Name -> "Test water product for DropShipSamples test 2" <> $SessionUUID,
                    Replace[Synonyms] -> {"Test water product for DropShipSamples test 2" <> $SessionUUID}, Author -> Link[$PersonID],
                    ProductModel -> Link[sampleModel2ID, Products], Supplier -> Link[supplierID, Products], Packaging -> Single, SampleType -> Bottle, NumberOfItems -> 1,
                    DefaultContainerModel -> Link[Model[Container, Vessel, "50mL Tube"], ProductsContained], Amount -> 5 Gram, Stocked -> True, EstimatedLeadTime -> 8 Day,
                    Price -> 20.5 USD, UsageFrequency -> Low, Density -> 1 Gram / Milliliter,
                    CatalogNumber -> "TestWaterProduct", CatalogDescription -> "5 Gram of the test water in 50 mL tube"
                |>
            };
            Upload[packets];

        ]
    },
    SetUp :> {Module[{createdTransactions, existingTransactions, upload1Packets, upload2Packets, upload3Packets},

        (* Need: 1 product with a DefaultContainermodel that is non selfstanding like a 50 mL tube, 1 product with DefaultContainerModel that is a shell and is SelfStanding -> Null *)
        If[DatabaseMemberQ[Object[Transaction, DropShipping, "My transaction_1"]], EraseObject[Object[Transaction, DropShipping, "My transaction_1"], Verbose -> False, Force -> True]];
        If[DatabaseMemberQ[Object[Transaction, DropShipping, "My transaction_2"]], EraseObject[Object[Transaction, DropShipping, "My transaction_2"], Verbose -> False, Force -> True]];


        upload1Packets = Cases[Flatten[{
            If[!DatabaseMemberQ[Object[Transaction, DropShipping, "My existing transaction"]],
                <|Type -> Object[Transaction, DropShipping], Name -> "My existing transaction", DeveloperObject -> True|>
            ],

            If[!DatabaseMemberQ[Object[Container, Site, "Test Site for DropShipSamples"]],
                <|DeveloperObject -> True, Type -> Object[Container, Site], Name -> "Test Site for DropShipSamples"|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamples (1)", State -> Liquid, Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid, with product) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid, with product) for DropShipSamples (1)", State -> Liquid|>
            ],

            If[!DatabaseMemberQ[Object[Company, Supplier, "Test supplier for DropShipSamples"]],
                <|DeveloperObject -> True, Type -> Object[Company, Supplier], Name -> "Test supplier for DropShipSamples"|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamples (3)", State -> Liquid, Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model oligo for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model oligo for DropShipSamples (1)", Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model oligo for DropShipSamples (2)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model oligo for DropShipSamples (2)", Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamples (1)", Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model chemical (solid) for DropShipSamples (1)", State -> Solid, Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model chemical (tablet) for DropShipSamples (1)", State -> Solid, Replace[Products] -> {}, Tablet -> True, TabletWeight -> 2Gram|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model chemical (solid) for DropShipSamples (3)", State -> Solid, Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model chemical (liquid) for DropShipSamples (no density)", State -> Liquid, Replace[Products] -> {}|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (solid, with product) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model chemical (solid, with product) for DropShipSamples (1)", State -> Solid|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (tablet, with product) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Name -> "Test model chemical (tablet, with product) for DropShipSamples (1)", State -> Solid, Tablet -> True, TabletWeight -> 2Gram|>
            ],

            If[!DatabaseMemberQ[Object[Company, Shipper, "Test shipper for DropShipSamples"]],
                <|DeveloperObject -> True, Type -> Object[Company, Shipper], Name -> "Test shipper for DropShipSamples"|>
            ],

            If[!DatabaseMemberQ[Object[Company, Shipper, "Test shipper for DropShipSamples (2)"]],
                <|DeveloperObject -> True, Type -> Object[Company, Shipper], Name -> "Test shipper for DropShipSamples (2)"|>
            ],

            If[!DatabaseMemberQ[Object[Product, "Test product for DropShipSamples"]],
                <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product for DropShipSamples"|>
            ]
        }], PacketP[]];

        Upload[upload1Packets];

        upload2Packets = Cases[Flatten[{
            If[!DatabaseMemberQ[Object[Product, "Test product chemical (liquid) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product chemical (liquid) for DropShipSamples (1)",
                    Supplier -> Link[Object[Company, Supplier, "Test supplier for DropShipSamples"], Products], NumberOfItems -> 2, ProductModel -> Link[Model[Sample, "Test model chemical (liquid, with product) for DropShipSamples (1)"], Products],
                    Amount -> 100 Milliliter|>
            ],

            If[!DatabaseMemberQ[Object[Product, "Test product chemical (solid) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product chemical (solid) for DropShipSamples (1)",
                    Supplier -> Link[Object[Company, Supplier, "Test supplier for DropShipSamples"], Products], NumberOfItems -> 2, ProductModel -> Link[Model[Sample, "Test model chemical (solid, with product) for DropShipSamples (1)"], Products],
                    Amount -> 100 Gram|>
            ],

            If[!DatabaseMemberQ[Object[Product, "Test product chemical (tablet) for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Object[Product], Name -> "Test product chemical (tablet) for DropShipSamples (1)",
                    Supplier -> Link[Object[Company, Supplier, "Test supplier for DropShipSamples"], Products], NumberOfItems -> 2, ProductModel -> Link[Model[Sample, "Test model chemical (tablet, with product) for DropShipSamples (1)"], Products],
                    Amount -> 100 Gram, CountPerSample -> 50|>
            ]
        }], PacketP[]];

        Upload[upload2Packets];

        upload3Packets = Cases[Flatten[{

            If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamples (1)"]],
                <|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamples (1)", Replace[CustomSynthesizes] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"],
                    Model[Sample, "Test model oligo for DropShipSamples (2)"],
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"]}, ServiceProviders]|>,
                <|Object -> Object[Company, Service, "Test service provider for DropShipSamples (1)"], Replace[CustomSynthesizes] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"],
                    Model[Sample, "Test model oligo for DropShipSamples (2)"],
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"]}, ServiceProviders]|>
            ],

            If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamples (2)"]],
                <|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamples (2)", Replace[CustomSynthesizes] -> {}|>,
                <|Object -> Object[Company, Service, "Test service provider for DropShipSamples (2)"], Replace[CustomSynthesizes] -> {}|>
            ],

            If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamples (3)"]],
                <|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamples (3)", Replace[CustomSynthesizes] -> Link[{
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"]}, ServiceProviders]|>,
                <|Object -> Object[Company, Service, "Test service provider for DropShipSamples (3)"], Replace[CustomSynthesizes] -> Link[{
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"]}, ServiceProviders]|>
            ],

            If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamples (4)"]],
                <|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamples (4)", Replace[CustomSynthesizes] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                }, ServiceProviders]|>,
                <|Object -> Object[Company, Service, "Test service provider for DropShipSamples (4)"], Replace[CustomSynthesizes] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model oligo for DropShipSamples (1)"]
                }, ServiceProviders]|>
            ],

            If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamples (product)"]],
                <|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamples (product)", State -> Liquid, Replace[Products] -> Link[Object[Product, "Test product for DropShipSamples"], ProductModel]|>
            ]
        }], PacketP[]];

        Upload[upload3Packets];

        createdTransactions = {
            Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"],
            Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"],
            Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"],
            Object[Transaction, DropShipping, "Test transaction for DropShipSamples (4)"],
            Object[Transaction, DropShipping, "Test transaction for DropShipSamples (5)"]
        };
        existingTransactions = PickList[createdTransactions, DatabaseMemberQ[createdTransactions], True];
        EraseObject[existingTransactions, Verbose -> False, Force -> True];


        Upload[{
            <|DeveloperObject -> True, Type -> Object[Transaction, DropShipping], Name -> "Test transaction for DropShipSamples (1)", Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                Replace[OrderedItems] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"]
                }],
                Replace[MassSource] -> {None, None, None, None, None, None, UserSpecified, UserSpecified, UserSpecified, UserSpecified},
                Replace[VolumeSource] -> {UserSpecified, UserSpecified, UserSpecified, UserSpecified, None, None, None, None, None, None},
                Replace[CountSource] -> {None, None, None, None, None, None, None, None, None, None},
                Replace[Mass] -> {0Gram, 0Gram, 0Gram, 0Gram, 0Gram, 0Gram, 6Gram, 6Gram, 20Gram, 20Gram},
                Replace[Volume] -> {1Liter, 1Liter, 5Liter, 5Liter, 0Liter, 0Liter, 0Liter, 0Liter, 0Liter, 0Liter},
                Replace[Count] -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                Replace[OrderQuantities] -> {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
            |>,

            <|DeveloperObject -> True, Type -> Object[Transaction, DropShipping], Name -> "Test transaction for DropShipSamples (2)", Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                Replace[OrderedItems] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"]
                }],
                Replace[MassSource] -> {None, None, UserSpecified, UserSpecified},
                Replace[VolumeSource] -> {UserSpecified, UserSpecified, None, None},
                Replace[CountSource] -> {None, None, None, None},
                Replace[Mass] -> {0Gram, 0Gram, 1.5Gram, 1.5Gram},
                Replace[Volume] -> {1.5Liter, 1.5Liter, 0Liter, 0Liter},
                Replace[Count] -> {0, 0, 0, 0},
                Replace[OrderQuantities] -> {4, 3, 2, 1}
            |>,

            <|DeveloperObject -> True, Type -> Object[Transaction, DropShipping], Name -> "Test transaction for DropShipSamples (3)", Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                Replace[OrderedItems] -> Link[{
                    Model[Item, Column, "Test model column for DropShipSamples (1)"]
                }],
                Replace[MassSource] -> {None},
                Replace[VolumeSource] -> {None},
                Replace[CountSource] -> {None},
                Replace[Mass] -> {0Gram},
                Replace[Volume] -> {0Liter},
                Replace[Count] -> {0},
                Replace[OrderQuantities] -> {3}
            |>,


            <|DeveloperObject -> True, Type -> Object[Transaction, DropShipping], Name -> "Test transaction for DropShipSamples (4)", Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                Replace[OrderedItems] -> Link[{
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"]
                }],
                Replace[MassSource] -> {None},
                Replace[VolumeSource] -> {ProductDocumentation},
                Replace[CountSource] -> {None},
                Replace[Mass] -> {0Gram},
                Replace[Volume] -> {0Liter},
                Replace[Count] -> {0},
                Replace[OrderQuantities] -> {3}
            |>,

            <|DeveloperObject -> True, Type -> Object[Transaction, DropShipping], Name -> "Test transaction for DropShipSamples (5)", Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                Replace[OrderedItems] -> Link[{
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Item, Column, "Test model column for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                    Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"]
                }],
                Replace[MassSource] -> {None, None, None, None, None, None, UserSpecified, UserSpecified, UserSpecified, UserSpecified},
                Replace[VolumeSource] -> {UserSpecified, UserSpecified, UserSpecified, UserSpecified, None, None, None, None, None, None},
                Replace[CountSource] -> {ProductDocumentation, ProductDocumentation, None, None, None, None, None, None, None, None},
                Replace[Mass] -> {0Gram, 0Gram, 0Gram, 0Gram, 0Gram, 0Gram, 6Gram, 6Gram, 20Gram, 20Gram},
                Replace[Volume] -> {1Liter, 1Liter, 5Liter, 5Liter, 0Liter, 0Liter, 0Liter, 0Liter, 0Liter, 0Liter},
                Replace[Count] -> {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                Replace[OrderQuantities] -> {10, 9, 8, 7, 6, 5, 4, 3, 2, 1}
            |>
        }];
    ];
    },
    TearDown :> {
        (* ony do this until unit testing fixes the issue where this message shows up randomly*)
        On[Download::ObjectDoesNotExist];
        EraseObject[Flatten[ToList[transactions]], Verbose -> False, Force -> True];
    },
    Stubs :> {
        $PersonID = Object[User, "Test user for notebook-less test protocols"],
        $TimeZone = -7.
    },
    SymbolTearDown :> {
        Module[{testObjects, existingObjects},
            testObjects = {
                Object[Container, Site, "Test Site for DropShipSamples"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
                Model[Sample, "Test model oligo for DropShipSamples (1)"],
                Model[Sample, "Test model oligo for DropShipSamples (2)"],
                Model[Item, Column, "Test model column for DropShipSamples (1)"],
                Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
                Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"],
                Object[Company, Service, "Test service provider for DropShipSamples (1)"],
                Object[Company, Service, "Test service provider for DropShipSamples (2)"],
                Object[Company, Service, "Test service provider for DropShipSamples (3)"],
                Object[Company, Service, "Test service provider for DropShipSamples (4)"],
                Object[Product, "Test product for DropShipSamples"],
                Model[Sample, "Test model chemical (liquid) for DropShipSamples (product)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (1)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (2)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (3)"],
                Object[Transaction, DropShipping, "Test transaction for DropShipSamples (4)"],
                Object[Company, Shipper, "Test shipper for DropShipSamples"],
                Object[Company, Shipper, "Test shipper for DropShipSamples (2)"],
                Object[Transaction, DropShipping, "My transaction_1"],
                Object[Transaction, DropShipping, "My transaction_2"],
                Object[Company, Supplier, "Test Supplier (DropShipSamples unit tests)" <> $SessionUUID],
                Model[Container, Vessel, "Shell container model for DropShipSamples test" <> $SessionUUID],
                Object[Product, "Test water product for DropShipSamples test 1" <> $SessionUUID],
                Object[Product, "Test water product for DropShipSamples test 2" <> $SessionUUID],
                Model[Sample, "Water model for DropShipSamples test 1" <> $SessionUUID],
                Model[Sample, "Water model for DropShipSamples test 2" <> $SessionUUID]

                (*	Object[Transaction, DropShipping, "My existing transaction"],
				Object[Container, Site, "Test Site for DropShipSamples"],
				Model[Sample, "Test model chemical (liquid) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (liquid, with product) for DropShipSamples (1)"],
				Object[Company, Supplier, "Test supplier for DropShipSamples"],
				Model[Sample, "Test model chemical (liquid) for DropShipSamples (3)"],
				Model[Sample, "Test model oligo for DropShipSamples (1)"],
				Model[Sample, "Test model oligo for DropShipSamples (2)"],
				Model[Item, Column, "Test model column for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (solid) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (tablet) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (solid) for DropShipSamples (3)"],
				Model[Sample, "Test model chemical (liquid) for DropShipSamples (no density)"],
				Model[Sample, "Test model chemical (solid, with product) for DropShipSamples (1)"],
				Model[Sample, "Test model chemical (tablet, with product) for DropShipSamples (1)"],
				Object[Company, Shipper, "Test shipper for DropShipSamples"],
				Object[Company, Shipper, "Test shipper for DropShipSamples (2)"],
				Object[Product, "Test product for DropShipSamples"]*)
            };
            existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
            If[
                MatchQ[existingObjects, Except[Null | {}]],
                EraseObject[existingObjects, Force -> True, Verbose -> False];
            ];
        ];
        Notifications`Private`eraseTestNotifications[];
    }
];



(* ::Subsubsection::Closed:: *)
(*DropShipSamplesOptions*)


DefineTests[DropShipSamplesOptions,
    {
        Example[
            {Basic, "Return the options when updating a transaction:"},
            DropShipSamplesOptions[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamplesOptions"]},
                TrackingNumber -> {"12345"},
                DateShipped -> Now
            ],
            Graphics_,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesOptions (1)", Replace[Products] -> {}|>],
                    Upload[<|DeveloperObject -> True, Object -> Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"], Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Transaction, DropShipping, "Test transaction for DropShipSamplesOptions"]],
                    Upload[<|
                        DeveloperObject -> True,
                        Type -> Object[Transaction, DropShipping],
                        Name -> "Test transaction for DropShipSamplesOptions",
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>],
                    Upload[<|
                        DeveloperObject -> True,
                        Object -> Object[Transaction, DropShipping, "Test transaction for DropShipSamplesOptions"],
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>]
                ]
            }
        ],

        Example[
            {Basic, "Return the options when generating a transaction:"},
            DropShipSamplesOptions[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                    Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]
                },
                "404478943",
                Quantity -> {2, 3},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"],
                Volume -> {ProductDocumentation, None}
            ],
            Graphics_,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamplesOptions (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesOptions (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamplesOptions (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}, ServiceProviders]|>]]
                ];
            }
        ],

        Example[
            {Basic, "Return the options when generating a transaction without specified quantities:"},
            DropShipSamplesOptions[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                    Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]
                },
                "404478943",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"],
                Volume -> {ProductDocumentation, None}
            ],
            Graphics_,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamplesOptions (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesOptions (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamplesOptions (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}, ServiceProviders]|>]]
                ];
            }
        ],

        Example[
            {Options, OutputFormat, "Return the options as a list when updating a transaction:"},
            DropShipSamplesOptions[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamplesOptions"]},
                TrackingNumber -> {"12345"},
                DateShipped -> Now,
                OutputFormat -> List
            ],
            {Destination -> $Site,
                Provider -> Null,
                ExpectedDeliveryDate -> Null,
                TrackingNumber -> {"12345"},
                Shipper -> Null,
                DateShipped -> _?DateObjectQ,
                ContainerOut -> None,
                Mass -> None,
                Quantity -> 3,
                Count -> None,
                Volume -> None,
                ShippedRack -> None,
                Name -> Null
            },
            SetUp :> {
                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesOptions (1)", Replace[Products] -> {}|>],
                    Upload[<|DeveloperObject -> True, Object -> Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"], Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Transaction, DropShipping, "Test transaction for DropShipSamplesOptions"]],
                    Upload[<|
                        DeveloperObject -> True,
                        Type -> Object[Transaction, DropShipping],
                        Name -> "Test transaction for DropShipSamplesOptions",
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>],
                    Upload[<|
                        DeveloperObject -> True,
                        Object -> Object[Transaction, DropShipping, "Test transaction for DropShipSamplesOptions"],
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>]
                ]
            }
        ],

        Example[
            {Options, OutputFormat, "Return the options as a list when generating a transaction:"},
            DropShipSamplesOptions[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                    Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]
                },
                "404478943",
                Quantity -> {2, 3},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"],
                Volume -> {ProductDocumentation, None},
                OutputFormat -> List
            ],
            {Destination -> $Site,
                Provider -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"],
                ExpectedDeliveryDate -> None,
                TrackingNumber -> None,
                Shipper -> None, DateShipped -> None,
                ContainerOut -> None,
                Mass -> None,
                Quantity -> {2, 3},
                Count -> None,
                Volume -> {ProductDocumentation, None},
                ShippedRack -> None,
                Name -> Null
            },
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamplesOptions (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesOptions (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamplesOptions (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for DropShipSamplesOptions (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesOptions (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesOptions (1)"]}, ServiceProviders]|>]]
                ];
            }
        ]
    },

    Stubs :> {
        $PersonID = Object[User, "Test user for notebook-less test protocols"]
    },
    SymbolTearDown :> {
        Notifications`Private`eraseTestNotifications[];
    }
];


(* ::Subsubsection::Closed:: *)
(*DropShipSamplesPreview*)


DefineTests[DropShipSamplesPreview,
    {
        Example[
            {Basic, "Return Null when updating a transaction:"},
            DropShipSamplesPreview[
                {Object[Transaction, DropShipping, "Test transaction for DropShipSamplesPreview"]},
                TrackingNumber -> {"12345"},
                DateShipped -> Now
            ],
            Null,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesPreview (1)", Replace[Products] -> {}|>],
                    Upload[<|Object -> Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"], DeveloperObject -> True, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Transaction, DropShipping, "Test transaction for DropShipSamplesPreview"]],
                    Upload[<|
                        DeveloperObject -> True,
                        Type -> Object[Transaction, DropShipping],
                        Name -> "Test transaction for DropShipSamplesPreview",
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>],
                    Upload[<|
                        Object -> Object[Transaction, DropShipping, "Test transaction for DropShipSamplesPreview"],
                        DeveloperObject -> True,
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>]
                ]
            }
        ],

        Example[
            {Basic, "Return Null when generating a transaction:"},
            DropShipSamplesPreview[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"],
                    Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]
                },
                "404478943",
                Quantity -> {2, 3},
                Provider -> Object[Company, Service, "Test service provider for DropShipSamplesPreview (1)"],
                Volume -> {ProductDocumentation, None}
            ],
            Null,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamplesPreview (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesPreview (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamplesPreview (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for DropShipSamplesPreview (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]}, ServiceProviders]|>]]
                ];
            }
        ],

        Example[
            {Basic, "Return Null when generating a transaction without specified quantities:"},
            DropShipSamplesPreview[
                {
                    Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"],
                    Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]
                },
                "404478943",
                Provider -> Object[Company, Service, "Test service provider for DropShipSamplesPreview (1)"],
                Volume -> {ProductDocumentation, None}
            ],
            Null,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for DropShipSamplesPreview (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for DropShipSamplesPreview (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for DropShipSamplesPreview (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for DropShipSamplesPreview (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for DropShipSamplesPreview (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for DropShipSamplesPreview (1)"],
                        Model[Item, Column, "Test model column for DropShipSamplesPreview (1)"]}, ServiceProviders]|>]]
                ];
            }
        ]
    },

    Stubs :> {
        $PersonID = Object[User, "Test user for notebook-less test protocols"]
    },
    SymbolTearDown :> {
        Notifications`Private`eraseTestNotifications[];
    }
];


(* ::Subsubsection::Closed:: *)
(*ValidDropShipSamplesQ*)


DefineTests[ValidDropShipSamplesQ,
    {
        Example[
            {Basic, "Return a boolean indicating whether the DropShipSamples call is valid when updating a transaction:"},
            ValidDropShipSamplesQ[
                {Object[Transaction, DropShipping, "Test transaction for ValidDropShipSamplesQ"]},
                TrackingNumber -> {"12345"},
                DateShipped -> Now
            ],
            BooleanP,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for ValidDropShipSamplesQ (1)", Replace[Products] -> {}|>],
                    Upload[<|DeveloperObject -> True, Object -> Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"], Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Transaction, DropShipping, "Test transaction for ValidDropShipSamplesQ"]],
                    Upload[<|
                        DeveloperObject -> True,
                        Type -> Object[Transaction, DropShipping],
                        Name -> "Test transaction for ValidDropShipSamplesQ",
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>],
                    Upload[<|
                        Object -> Object[Transaction, DropShipping, "Test transaction for ValidDropShipSamplesQ"],
                        DeveloperObject -> True,
                        Creator -> Link[Object[User, "Test user for notebook-less test protocols"], TransactionsCreated],
                        Replace[OrderedItems] -> Link[{Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}],
                        Replace[MassSource] -> {None},
                        Replace[VolumeSource] -> {None},
                        Replace[CountSource] -> {None},

                        Replace[Mass] -> {0Gram},
                        Replace[Volume] -> {0Liter},
                        Replace[Count] -> {0},
                        Replace[OrderQuantities] -> {3}
                    |>]
                ]
            }
        ],

        Example[
            {Basic, "Return a boolean indicating whether the DropShipSamples is valid when when generating a transaction:"},
            ValidDropShipSamplesQ[
                {
                    Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                    Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]
                },
                "404478943",
                Quantity -> {2, 3},
                Provider -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"],
                Volume -> {ProductDocumentation, None}
            ],
            BooleanP,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for ValidDropShipSamplesQ (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for ValidDropShipSamplesQ (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for ValidDropShipSamplesQ (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>]]
                ];
            }
        ],
        Example[
            {Basic, "Return a boolean indicating whether the DropShipSamples is valid when when generating a transaction without quantities specified:"},
            ValidDropShipSamplesQ[
                {
                    Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                    Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]
                },
                "404478943",
                Provider -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"],
                Volume -> {ProductDocumentation, None}
            ],
            BooleanP,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for ValidDropShipSamplesQ (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for ValidDropShipSamplesQ (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for ValidDropShipSamplesQ (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>]]
                ];
            }
        ],

        Example[{Options, OutputFormat, "Return a test summary of the tests runt to validate the DropShipSamples call:"},
            ValidDropShipSamplesQ[
                {
                    Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                    Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]
                },
                "404478943",
                Quantity -> {2, 3},
                Provider -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"],
                Volume -> {ProductDocumentation, None},
                OutputFormat -> TestSummary
            ],
            _EmeraldTestSummary,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for ValidDropShipSamplesQ (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for ValidDropShipSamplesQ (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for ValidDropShipSamplesQ (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>]]
                ];
            }
        ],

        Example[{Options, Verbose, "Print the test results in addition to returning a boolean indicating the validity of the DropShipSamples call:"},
            ValidDropShipSamplesQ[
                {
                    Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                    Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]
                },
                "404478943",
                Quantity -> {2, 3},
                Provider -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"],
                Volume -> {ProductDocumentation, None},
                Verbose -> True
            ],
            BooleanP,
            SetUp :> {
                If[!DatabaseMemberQ[Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Sample], Density -> 1Gram / Liter, Name -> "Test model chemical (liquid) for ValidDropShipSamplesQ (1)", State -> Liquid, Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Model[Item, Column], Name -> "Test model column for ValidDropShipSamplesQ (1)", Replace[Products] -> {}|>]
                ];

                If[!DatabaseMemberQ[Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"]],
                    Upload[<|DeveloperObject -> True, Type -> Object[Company, Service], Name -> "Test service provider for ValidDropShipSamplesQ (1)", Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>],
                    Upload[Upload[<|Object -> Object[Company, Service, "Test service provider for ValidDropShipSamplesQ (1)"], Replace[CustomSynthesizes] -> Link[{
                        Model[Sample, "Test model chemical (liquid) for ValidDropShipSamplesQ (1)"],
                        Model[Item, Column, "Test model column for ValidDropShipSamplesQ (1)"]}, ServiceProviders]|>]]
                ];
            }
        ]
    },

    Stubs :> {
        $PersonID = Object[User, "Test user for notebook-less test protocols"]
    },
    SymbolTearDown :> {
        Notifications`Private`eraseTestNotifications[];
    }
];




(* ::Subsection::Closed:: *)
(*OrderSamples*)


(* ::Subsubsection::Closed:: *)
(*OrderSamples*)


DefineTests[OrderSamples,
    {
        (* --- Basic --- *)
        Example[{Basic, "Place an order for a specified quantity of the given product (the total received samples will be the specified Quantity multiplied by NumberOfItems specified in the product):"},
            OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 3],
            {ObjectP[Object[Transaction, Order]]},
            TearDown :> {Module[{orders, nonDevObjOrders},
                orders = Flatten[Download[Object[Product, "Waters size exclusion column, 30 mm"], Orders[Object]]];
                nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
            ]
            }
        ],
        Example[{Basic, "Place an order for a specified quantity of several different products:"},
            OrderSamples[{Object[Product, "Waters size exclusion column, 30 mm"], Object[Product, "Dishwashing rack"]}, {3, 1}],
            {ObjectP[Object[Transaction, Order]]},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[{Object[Product, "id:o1k9jAK4dYDA"], Object[Product, "id:zGj91aRroNvJ"]}, Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Example[{Basic, "Place an order for a specified model sample with the desired amount:"},
            transaction = OrderSamples[Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], 100 Gram],
            {ObjectP[Object[Transaction, Order]]},
            SetUp :> {
                Module[{samplePkts},
                    samplePkts = <|
                        Object -> Object[Sample, "id:3em6ZvLDa8jv"],
                        Status -> Stocked,
                        ExpirationDate -> Null,
                        Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                        Transfer[Notebook] -> Null
                    |>;
                    Upload[samplePkts]
                ];
            },
            TearDown :> {
                If[MatchQ[transaction, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transaction, Force -> True],
                    Print["The following objects: ", transaction, " did not erase in the database"]
                ]
            },
            Variables :> {transaction}
        ],
        Example[{Basic, "Place an order for a specified model item with the desired quantity:"},
            transaction = OrderSamples[Model[Item, Column, "Test model column for OrderSamples (C1)"], 1 Unit],
            {ObjectP[Object[Transaction, Order]]},
            SetUp :> {
                Module[{samplePkts, samples},
                    samples = Download[Model[Item, Column, "Test model column for OrderSamples (C1)"], Objects[Object]];

                    samplePkts = Map[
                        <|
                            Object -> Download[#, Object],
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                        |>&, samples
                    ];

                    Upload[samplePkts]
                ];
            },
            TearDown :> {
                If[MatchQ[transaction, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transaction, Force -> True],
                    Print["The following objects: ", transaction, " did not erase in the database"]
                ]
            },
            Variables :> {transaction}
        ],
        (* --- Additional --- *)
        Example[{Additional, "Place an order for several model samples:"},
            transactions = OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {50 Gram, 50 Gram}, InternalOrder -> False];
            Download[transactions, {Supplier, InternalOrder, Products, OrderQuantities}],
            {
                OrderlessPatternSequence[
                    {ObjectP[Object[Company, Supplier, "id:Y0lXejM67LdW"]], False, {ObjectP[Object[Product, "id:aXRlGn6x7LOB"]]}, {1}},
                    {ObjectP[Object[Company, Supplier, "id:jLq9jXvl7bGa"]], False, {ObjectP[Object[Product, "id:N80DNj1rWbEq"]]}, {1}}
                ]
            },
            SetUp :> {
                Module[{samplesPkts},
                    samplesPkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                            (* A1 and A2 sample *)
                        |>&, {Object[Sample, "id:3em6ZvLDa8jv"], Object[Sample, "id:6V0npvmENMr6"]}
                    ];
                    Upload[samplesPkts]
                ];
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[{Additional, "When InternalOrder -> False, duplicate models will be merged by totalling their requested amounts:"},
            transactions = OrderSamples[
                {
                    Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"],
                    Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"]
                },
                {50 Gram, 50 Gram},
                InternalOrder -> False
            ];
            Download[transactions, {Supplier, InternalOrder, Products, OrderQuantities}],
            {{ObjectP[Object[Company, Supplier, "id:Y0lXejM67LdW"]], False, {ObjectP[Object[Product, "id:aXRlGn6x7LOB"]]}, {1}}},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transactions, Force -> True]
                ]
            },
            Variables :> {transactions}
        ],
        Example[{Additional, "Sending OrderSamples an empty list will return an empty list:"},
            OrderSamples[{}, {}],
            {}
        ],
        (* --- Options --- *)
        Example[{Options, Creator, "If Creator is specified, indicate the creator in the order:"},
            {order} = OrderSamples[Object[Product, "Polypropylene Carboy, 5 L"], 1, Creator -> Object[User, "id:n0k9mG8AXZP6"]];
            Download[order, Creator],
            Object[User, "id:n0k9mG8AXZP6"],
            EquivalenceFunction -> SameObjectQ,
            Variables :> {order},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "id:lYq9jRz05lkB"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Example[{Options, Autogenerated, "If Autogenerated is True, indicate that the order was generated automatically and that Creator is set to Null:"},
            (
                {order} = OrderSamples[Object[Product, "Polypropylene Carboy, 5 L"], 1, Autogenerated -> True];
                Download[order, {RequestedAutomatically, Creator}]
            ),
            {True, Null},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "id:lYq9jRz05lkB"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            },
            Variables :> {order}
        ],
        Example[{Options, ShippingSpeed, "Set ShippingSpeed->1 Day to indicate the order should be shipped as soon as possible:"},
            (
                {order} = OrderSamples[Object[Product, "Polypropylene Carboy, 5 L"], 1, ShippingSpeed -> NextDay];
                Download[order, ShippingSpeed]
            ),
            NextDay,
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "id:lYq9jRz05lkB"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            },
            Variables :> {order}
        ],
        Example[{Options, InternalOrder, "If InternalOrder sets to True and the products are stocked on site at ECL, the products will be directly purchased from ECL's in house inventory:"},
            transaction = OrderSamples[{Object[Product, "Test product for Order Inhouse Samples (A2)"]}, {2}, InternalOrder -> True, Creator -> Object[User, "id:n0k9mG8AXZP6"]];
            Download[transaction, {Status, InternalOrder, OrderQuantities, QuantitiesReceived}],
            {{Pending, True, {2}, {0}}},
            SetUp :> {
                Module[{samples, samplesPkts},
                    samples = Download[Object[Product, "Test product for Order Inhouse Samples (A2)"], Samples[Object]];
                    samplesPkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                        |>&, samples
                    ];
                    Upload[samplesPkts]
                ];
            },
            TearDown :> {
                Module[{},
                    If[MatchQ[transaction, {ObjectP[Object[Transaction, Order]]...}],
                        EraseObject[transaction, Force -> True],
                        Print["The following objects: ", transaction, " did not erase in the database"]
                    ]
                ]
            },
            Variables :> {transaction}
        ],
        Example[{Options, Destination, "Specify the delivery site for the transaction order:"},
            {order} = OrderSamples[Object[Product, "Polypropylene Carboy, 5 L"], 1, Destination -> $Site];
            Download[order, Destination],
            ObjectP[$Site],
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "id:lYq9jRz05lkB"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            },
            Variables :> {order}
        ],
        Example[{Options, ShipToUser, "Specify the products or samples that will send to your work location after received by ECL:"},
            transaction = OrderSamples[Object[Product, "Test product for Order Inhouse Samples (A1)"], 1, ShipToUser -> True, InternalOrder -> False];
            Download[transaction, {Status, ShipToUser, OrderQuantities, QuantitiesReceived}],
            {
                {Pending, True, {1}, {0}}
            },
            TearDown :> {
                If[MatchQ[transaction, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transaction, Force -> True],
                    Print["The following objects: ", transaction, " did not erase in the database"]
                ]
            },
            Variables :> {transaction}
        ],
        Test["Specify a subset of the samples that will send to your work location after received by ECL:",
            transactions = OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {120 Gram, 100 Gram}, ShipToUser -> {True, False}, InternalOrder -> False];
            Download[transactions, {Status, ShipToUser, OrderQuantities, QuantitiesReceived}],
            {
                OrderlessPatternSequence[
                    {Pending, True, {1}, {0}},
                    {Pending, False, {1}, {0}}
                ]
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],

        Example[
            {Options, ContainerOut, "Specify that the samples should be transferred to a different container upon arrival (external order):"},
            transactions = OrderSamples[
                {Object[Product, "Anhydrous THF, 100 mL"], Model[Sample, "Acetone, HPLC Grade"]},
                {2, 100Milliliter},
                ContainerOut -> Model[Container, Vessel, "1L Glass Bottle"],
                InternalOrder -> False
            ];
            Download[transactions, {TransferObjects, TransferContainers}],
            {
                {
                    {LinkP[Object[Product, "Anhydrous THF, 100 mL"]], LinkP[Object[Product, "Acetone, HPLC Grade, 1 L"]]},
                    {LinkP[Model[Container, Vessel, "1L Glass Bottle"]], LinkP[Model[Container, Vessel, "1L Glass Bottle"]]}
                }
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, ContainerOut, "Specify that the samples should be transferred to a different container upon arrival (internal order):"},
            transactions = OrderSamples[
                {Object[Product, "Anhydrous THF, 100 mL"], Model[Sample, "Acetone, HPLC Grade"]},
                {2, 100Milliliter},
                ContainerOut -> Model[Container, Vessel, "1L Glass Bottle"],
                InternalOrder -> True
            ];
            Download[transactions, {TransferObjects, TransferContainers}],
            {
                {
                    {LinkP[Object[Product, "Anhydrous THF, 100 mL"]]}, {LinkP[Model[Container, Vessel, "1L Glass Bottle"]]}
                },
                {
                    {LinkP[Model[Sample, "Acetone, HPLC Grade"]]}, {LinkP[Model[Container, Vessel, "1L Glass Bottle"]]}
                }
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, ContainerOut, "Specify that some of the samples should be transferred to a different container upon arrival (external order):"},
            transactions = OrderSamples[
                {Model[Sample, "Tetrahydrofuran, Anhydrous"], Model[Sample, "Pyridine, Reagent Grade"], Model[Sample, "1,2-Dimethoxyethane, Anhydrous"]},
                {200 Milliliter, 0.5 Liter, 10 Milliliter},
                ContainerOut -> {Model[Container, Vessel, "250mL Amber Glass Bottle"], None, Model[Container, Vessel, "1L Glass Bottle"]},
                InternalOrder -> False
            ];
            Download[transactions, {TransferObjects, TransferContainers}],
            {
                {
                    {ObjectP[Model[Sample, "Tetrahydrofuran, Anhydrous"][Products]]},
                    {ObjectP[Model[Container, Vessel, "250mL Amber Glass Bottle"]]}
                },
                {
                    {},
                    {}
                },
                {
                    {ObjectP[Model[Sample, "1,2-Dimethoxyethane, Anhydrous"][Products]]},
                    {ObjectP[Model[Container, Vessel, "1L Glass Bottle"]]}
                }
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, ContainerOut, "Specify that some of the samples should be transferred to a different container upon arrival (internal order):"},
            transactions = OrderSamples[
                {Model[Sample, "Tetrahydrofuran, Anhydrous"],
                    Model[Sample, "Tetrahydrofuran, Anhydrous"],
                    Model[Sample, "Pyridine, Reagent Grade"],
                    Model[Sample, "1,2-Dimethoxyethane, Anhydrous"]},
                {200Milliliter, 50Milliliter, 0.5Liter, 10Milliliter},
                ContainerOut -> {Model[Container, Vessel, "1L Glass Bottle"], Model[Container, Vessel, "250mL Amber Glass Bottle"], None, Model[Container, Vessel, "50mL Tube"]},
                InternalOrder -> True
            ];
            Download[transactions, {TransferObjects, TransferContainers}],
            {
                {
                    {
                        LinkP[Model[Sample, "Tetrahydrofuran, Anhydrous"]],
                        LinkP[Model[Sample, "Tetrahydrofuran, Anhydrous"]],
                        LinkP[Model[Sample, "1,2-Dimethoxyethane, Anhydrous"]]
                    },

                    {
                        LinkP[Model[Container, Vessel, "1L Glass Bottle"]],
                        LinkP[Model[Container, Vessel, "250mL Amber Glass Bottle"]],
                        LinkP[Model[Container, Vessel, "50mL Tube"]]
                    }
                }
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Options, ReceivingTolerance, "Specify the allowable difference between received amount and expected amount for any ordered samples:"},
            transactions = OrderSamples[
                {Model[Sample, "Tetrahydrofuran, Anhydrous"],
                    Model[Sample, "Tetrahydrofuran, Anhydrous"],
                    Model[Sample, "Pyridine, Reagent Grade"],
                    Model[Sample, "1,2-Dimethoxyethane, Anhydrous"]},
                {200Milliliter, 50Milliliter, 0.5Liter, 10Milliliter},
                ReceivingTolerance -> 2 * Percent,
                InternalOrder -> True
            ];
            Download[transactions, ReceivingTolerance],
            {2.` * Percent},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],

        (* --- Messages --- *)

        (* rack related errors *)
        Example[{Messages, "IncompatibleProvidedRackModel", "When the ShippedRack is not capable of supporting the container in which the product arrives (or if the ordered item is a container), an error is shown indicating incompatability:"},
            OrderSamples[
                {Model[Container, Vessel, "50mL Tube"]}, {10},
                ShippedRack -> {Model[Container, Rack, "Cork ring for 200-500 mL round bottom flasks"]},
                InternalOrder -> False
            ],
            $Failed,
            Messages :> {Error::IncompatibleProvidedRackModel, Error::InvalidOption}
        ],
        Example[{Messages, "NoCompatibleRack", "If there is no Model[Container, Rack] in the database that can hold the recieved container upright based on its Footprint and Dimensions, return an error:"},
            OrderSamples[
                {Model[Container, Vessel, "50mL Tube"]},
                {20},
                InternalOrder -> False
            ],
            $Failed,
            Messages :> {Error::NoCompatibleRack, Error::InvalidOption},
            Stubs :> {rackFootprintsAndDimensions[] := {}}
        ],

        (* containers out errors *)
        Example[
            {Messages, "ContainerOutInconsistent", "If a different ContainerOut is specified for the same product, fails (product case):"},
            OrderSamples[
                {Object[Product, "Tetrahydrofuran"], Object[Product, "Tetrahydrofuran"]},
                {200 Milliliter, 50 Milliliter},
                ContainerOut -> {Model[Container, Vessel, "1L Glass Bottle"], Model[Container, Vessel, "250mL Amber Glass Bottle"]}
            ],
            $Failed,
            Messages :> {Error::ContainerOutInconsistent, Error::InvalidOption}
        ],
        Example[
            {Messages, "ContainerOutInconsistent", "If a different ContainerOut is specified for the same product, fails (model case, external order):"},
            OrderSamples[
                {Model[Sample, "Tetrahydrofuran, Anhydrous"], Model[Sample, "Tetrahydrofuran, Anhydrous"]},
                {200 Milliliter, 50 Milliliter},
                ContainerOut -> {Model[Container, Vessel, "1L Glass Bottle"], Model[Container, Vessel, "250mL Amber Glass Bottle"]},
                InternalOrder -> False
            ],
            $Failed,
            Messages :> {Error::ContainerOutInconsistent, Error::InvalidOption}
        ],
        Example[
            {Messages, "ContainerOutNotValidated", "Give a warning if it cannot be determined whether the specified container out is large enough to hold the sample (product input):"},
            transactions = OrderSamples[
                Object[Product, "Test product for Order Inhouse Samples (A1)"],
                2,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ],
            {ObjectP[Object[Transaction, Order]]..},
            Messages :> {Warning::ContainerOutNotValidated},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Messages, "ContainerOutNotValidated", "Give a warning if it cannot be determined whether the specified container out is large enough to hold the sample (model input):"},
            transactions = OrderSamples[
                Model[Sample, "Copper Bromide"],
                200 Gram,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ],
            {ObjectP[Object[Transaction, Order]]..},
            Messages :> {Warning::ContainerOutNotValidated},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Messages, "ContainerOutNotValidated", "Give a warning if it cannot be determined whether the specified container out is large enough to hold the sample (model input, internal order):"},
            transactions = OrderSamples[
                Model[Sample, "Copper Bromide"],
                200 Gram,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                InternalOrder -> True
            ],
            {ObjectP[Object[Transaction, Order]]..},
            Messages :> {Warning::ContainerOutNotValidated},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[
            {Messages, "VolumeExceedsContainerOut", "If ContainerOut is too small to hold the sample volume, give a message and fail (product input):"},
            OrderSamples[
                Object[Product, "Isopropyl alcohol, HPLC grade"],
                2,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]
            ],
            $Failed,
            Messages :> {Error::VolumeExceedsContainerOut, Error::InvalidOption}
        ],
        Example[
            {Messages, "VolumeExceedsContainerOut", "If ContainerOut is too small to hold the sample volume, give a message and fail (external order, model input):"},
            OrderSamples[
                Model[Sample, "Isopropyl alcohol, HPLC Grade"],
                20 Milliliter,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                InternalOrder -> False
            ],
            $Failed,
            Messages :> {Error::VolumeExceedsContainerOut, Error::InvalidOption}
        ],
        Example[
            {Messages, "VolumeExceedsContainerOut", "If ContainerOut is too small to hold the sample volume, give a message and fail (model input, internal order):"},
            OrderSamples[
                Model[Sample, "Isopropyl alcohol, HPLC Grade"],
                200 Milliliter,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                InternalOrder -> True
            ],
            $Failed,
            Messages :> {Error::VolumeExceedsContainerOut, Error::InvalidOption}
        ],

        Example[
            {Messages, "OptionNotRequired", "If ContainerOut is specified for an item, give a message and fail (product input):"},
            OrderSamples[
                Object[Product, "Waters size exclusion column, 30 mm"],
                2,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]],
            $Failed,
            Messages :> {Error::OptionNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "OptionNotRequired", "If ContainerOut is specified for an item, give a message and fail (model input):"},
            OrderSamples[
                Model[Item, Column, "column model for RequestOrder unit testing"],
                2,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"]],
            $Failed,
            Messages :> {Error::OptionNotRequired, Error::InvalidOption}
        ],
        Example[
            {Messages, "OptionNotRequired", "If ContainerOut is specified for an item, give a message and fail (model input, internal order):"},
            OrderSamples[
                Model[Item, Column, "column model for RequestOrder unit testing"],
                2,
                ContainerOut -> Model[Container, Vessel, "50mL Tube"],
                InternalOrder -> True
            ],
            $Failed,
            Messages :> {Error::OptionNotRequired, Error::InvalidOption}
        ],

        Example[{Messages, "Deprecated", "Throws an error if any one of the products is marked as Deprecated:"},
            OrderSamples[Object[Product, "Polypropylene Carboy, 5 L, deprecated"], 2],
            $Failed,
            Messages :> {OrderSamples::Deprecated},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "id:L8kPEjN3Wqr4"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Example[{Messages, "InvalidProduct", "If the product doesn't pass ValidObjectQ, return an error:"},
            OrderSamples[Object[Product, "8 Dram Vial"], 2],
            $Failed,
            Messages :> {OrderSamples::InvalidProduct},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "id:E8zoYveXWZPm"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Example[{Messages, "NotForSale", "Throws an error if any one of the products is marked as NotForSale:"},
            OrderSamples[Object[Product, "Acetonitrile HPLC grade, NotForSale"], 1],
            $Failed,
            Messages :> {OrderSamples::NotForSale},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "Acetonitrile HPLC grade, NotForSale"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Example[{Messages, "InputLengthMismatch", "Throws an error if the input lists are not the same length:"},
            OrderSamples[{Object[Product, "8 Dram Vial"]}, {2, 1}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Test["Throws an error if the input lists are not the same length (model overload):",
            OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {100 Milliliter}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "InputLengthMismatch", "If the length of destination is different from the input length, return an error:"},
            OrderSamples[{Object[Product, "Waters size exclusion column, 30 mm"], Object[Product, "Dishwashing rack"]}, {1, 2}, Destination -> {$Site}],
            $Failed,
            Messages :> {Error::InputLengthMismatch}
        ],
        Example[{Messages, "NoValidProducts", "Orders can not be placed for models that only have deprecated products:"},
            OrderSamples[Model[Sample, "NaCl-Deprecated"], 250 Gram, InternalOrder -> False],
            $Failed,
            Messages :> {OrderSamples::NoValidProducts},
            SetUp :> {
                Module[{samples, samplesPkts},
                    samples = Download[Model[Sample, "NaCl-Deprecated"], Objects[Object]];
                    samplesPkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                        |>&, samples
                    ];
                    Upload[samplesPkts]
                ]
            }
        ],
        Example[{Messages, "NotForSale", "Orders can not be placed for models whose product is not for sale:"},
            OrderSamples[Model[Sample, "Acetonitrile HPLC grade 20 Liter"], 1 Liter, InternalOrder -> False],
            $Failed,
            Messages :> {OrderSamples::NotForSale},
            SetUp :> {
                Module[{samples, samplesPkts},
                    samples = Download[Model[Sample, "Acetonitrile HPLC grade 20 Liter"], Objects[Object]];
                    samplesPkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                        |>&, samples
                    ];
                    Upload[samplesPkts]
                ]
            }
        ],
        Example[{Messages, "AmountUnit", "Return an error if the specified amount does not match the unit specified in model sample's products:"},
            OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {100 Milliliter, 80 Gram}, InternalOrder -> False],
            $Failed,
            Messages :> {OrderSamples::AmountUnit}
        ],
        (* --- Test --- *)
        Test["No errors when requiring a volume of liquid sample that has Amount in Product specified as mass:",
            OrderSamples[Model[Sample, "Water model for OrderSamples test" <> $SessionUUID], 1 Milliliter, InternalOrder -> False],
            ListableP[ObjectP[Object[Transaction, Order]]],
            SubCategory -> "AmountUnits"
        ],
				Example[{Additional,"Inventories","Add any created orders to OutstandingRestockings of relevant inventory objects:"},
					order = First[OrderSamples[Model[Sample, "Water model for OrderSamples test" <> $SessionUUID], 1 Milliliter, InternalOrder -> False]];
					Search[Object[Inventory,Product],OutstandingRestockings==order],
					{ObjectP[Object[Inventory,Product]]},
					Variables:>{order}
				],
        Test["Orders that are created have their fields properly filled in:",
            (
                order = OrderSamples[{Object[Product, "Waters size exclusion column, 30 mm"]}, {3}, Creator -> Null];
                Download[order, {Status, DateCreated, Creator, CatalogNumbers, Products, OrderQuantities, QuantitiesOutstanding, Destination}]
            ),
            {{Pending, _?DateObjectQ, Null, {_String}, {ObjectP[Object[Product, "id:o1k9jAK4dYDA"]]}, {3}, {3}, ObjectP[$Site]}},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "Waters size exclusion column, 30 mm"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            },
            Variables :> {order}
        ],
        Test["Orders created with DependentProtocols automatically set Creator to the author of the protocol:",
            (
                order = OrderSamples[{Object[Product, "Waters size exclusion column, 30 mm"]}, {1}, DependentProtocol -> Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"]];
                Download[order, Creator]
            ),
            {ObjectP[Object[User, "Test user for notebook-less test protocols"]]},
            SetUp :> {
                Upload[<|Object -> Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"], Author -> Link[Object[User, "Test user for notebook-less test protocols"], ProtocolsAuthored]|>]
            },
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    Upload[<|Object -> Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"], Author -> Null|>];
                    orders = Flatten[Download[Object[Product, "Waters size exclusion column, 30 mm"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            },
            Variables :> {order}
        ],
        Test["Upload -> False returns a list of Upload packets:",
            ValidUploadQ[OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 3, Upload -> False]],
            True,
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "Waters size exclusion column, 30 mm"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Test["FastTrack -> True bypasses checks and returns an order successfully:",
            OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 3, FastTrack -> True],
            {ObjectP[Object[Transaction, Order]]},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "Waters size exclusion column, 30 mm"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            }
        ],
        Test["Cache -> packets passes cache for Download:",
            cache = Download[{Object[Product, "Waters size exclusion column, 30 mm"]}];
            OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 3, Cache -> cache],
            {ObjectP[Object[Transaction, Order]]},
            TearDown :> {
                Module[{orders, nonDevObjOrders},
                    orders = Flatten[Download[Object[Product, "Waters size exclusion column, 30 mm"], Orders[Object]]];
                    nonDevObjOrders = PickList[orders, Download[orders, DeveloperObject], Except[True]];
                    EraseObject[nonDevObjOrders, Verbose -> False, Force -> True]
                ]
            },
            Variables :> {cache}
        ],
        Test["When the order is an inhouse order, correctly populate the fields (multiple samples per item):",
            transaction = OrderSamples[{Object[Product, "Test product for Order Inhouse Samples (A1)"]}, {1}];
            Download[transaction, {Status, OrderQuantities, QuantitiesReceived, InternalOrder}],
            {
                {Pending, {1}, {0}, True}
            },
            SetUp :> {
                Module[{samples, samplesPkts},
                    samples = Download[Object[Product, "Test product for Order Inhouse Samples (A1)"], Samples[Object]];
                    samplesPkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                        |>&, samples
                    ];
                    Upload[samplesPkts]
                ];
            },
            TearDown :> {
                If[MatchQ[transaction, {ObjectP[Object[Transaction, Order]]..}],
                    EraseObject[transaction, Force -> True],
                    Print["The following objects: ", transaction, " did not erase in the database"]
                ]
            },
            Variables :> {transaction}
        ],

        Test["Orders will be generated based on the supplier of the given products:",
            transactions = OrderSamples[{Object[Product, "Waters size exclusion column, 30 mm"], Object[Product, "Test lamp product for Order Inhouse Samples (L1)"]}, {1, 1}];
            Download[transactions, Supplier],
            {ObjectP[Object[Company, Supplier]], ObjectP[Object[Company, Supplier]]},
            TearDown :> {
                EraseObject[transactions, Verbose -> False, Force -> True]
            },
            Variables :> {transactions}
        ],
        Test["Orders will be generated based on the delivered destination:",
            transactions = OrderSamples[{Object[Product, "Waters size exclusion column, 30 mm"], Object[Product, "Dishwashing rack"], Object[Product, "Polypropylene Carboy, 5 L"]}, {1, 2, 3},
                Destination -> {$Site, $Site, Object[Container, Site, "Test Site for OrderSamples"]}];
            Download[transactions, Destination],
            {ObjectP[Object[Container, Site]], ObjectP[Object[Container, Site]]},
            TearDown :> {
                EraseObject[transactions, Verbose -> False, Force -> True]
            },
            Variables :> {transactions}
        ],
        (* --- Sample Overload --- *)
        (* select the product that best fit the desired amount *)
        Test["Correctly populate the fields in transaction when ordering the specified model sample:",
            {transaction} = OrderSamples[Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], 500Gram, InternalOrder -> False];
            Download[transaction, {InternalOrder, Status, Products, CatalogNumbers, OrderQuantities, QuantitiesOutstanding, QuantitiesReceived}],
            {
                False, Pending, {ObjectP[Object[Product, "Test product for Order Inhouse Samples (A1-2)"]]}, {"ABCDEFG-500G"}, {1}, {1}, {0}
            },
            SetUp :> {
                Module[{samplesPkts},
                    samplesPkts = Map[
                        <|
                            Object -> #,
                            Status -> Stocked,
                            ExpirationDate -> Null,
                            Source -> Link[Object[Transaction, Order, "Inhouse purchase source order (Test, A1)"]],
                            Transfer[Notebook] -> Null
                        |>&, {Object[Sample, "id:3em6ZvLDa8jv"]}
                    ];
                    Upload[samplesPkts]
                ];
            },
            TearDown :> {
                If[MatchQ[transaction, ObjectP[Object[Transaction, Order]]],
                    EraseObject[transaction, Force -> True],
                    Print["The following objects: ", transaction, " did not erase in the database"]
                ]
            },
            Variables :> {transaction}
        ],
        Test["Order in house samples that are from different suppliers:",
            transactions = OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {100 Gram, 80 Gram}];
            Download[transactions, {InternalOrder, OrderedModels[Object], OrderAmounts}],
            {
                {
                    True,
                    Download[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, Object],
                    {100 Gram, 80 Gram}
                }
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],

        Test["Order multiple samples from different suppliers:",
            transactions = OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {100 Gram, 80 Gram}, InternalOrder -> False];
            Download[transactions, {InternalOrder, Products, OrderQuantities, QuantitiesOutstanding, QuantitiesReceived}],
            {
                OrderlessPatternSequence[
                    {False, {ObjectP[Object[Product]]}, {1}, {1}, {0}},
                    {False, {ObjectP[Object[Product]]}, {1}, {1}, {0}}
                ]
            },
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Test["Orders can not be placed on models with only deprecated products (supplier order situation):",
            OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "NaCl-Deprecated"]}, {300 Gram, 100Gram}, InternalOrder -> False],
            $Failed,
            Messages :> {OrderSamples::NoValidProducts}
        ],
        Test["Set the shipping speed for several model samples:",
            transactions = OrderSamples[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {200 Gram, 100 Gram}, ShippingSpeed -> {NextDay, NextDay}];
            Download[transactions, ShippingSpeed],
            {NextDay},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Test["One order will be generated for each unique shipping speed:",
            transactions = OrderSamples[
                {Object[Product, "Waters size exclusion column, 30 mm"], Object[Product, "Dishwashing rack"], Object[Product, "id:bq9LA0dDNdBv"]},
                {1, 2, 3},
                ShippingSpeed -> {ThreeDay, NextDay, ThreeDay},
                Destination -> $Site
            ];
            Download[transactions, {Products, ShippingSpeed}],
            {
                {{ObjectP@Object[Product, "Waters size exclusion column, 30 mm"], ObjectP@Object[Product, "id:bq9LA0dDNdBv"]}, ThreeDay},
                {{ObjectP@Object[Product, "Dishwashing rack"]}, NextDay}
            },
            TearDown :> {
                EraseObject[transactions, Verbose -> False, Force -> True]
            },
            Variables :> {transactions}
        ],
        Test["Refuse to place an internal order if the model requested has no products:",
            transactions = OrderSamples[{Model[Sample, "Test Model Chemical without Products (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {50 Gram, 50 Gram}],
            $Failed,
            Messages :> {OrderSamples::NoValidProducts},
            TearDown :> {
                If[MatchQ[transactions, {ObjectP[Object[Transaction, Order]]...}],
                    EraseObject[transactions, Force -> True],
                    Print["The following objects: ", transactions, " did not erase in the database"]
                ]
            },
            Variables :> {transactions}
        ],
        Example[{Options, DependentProtocol, "Specify that a protocol depends on the item being ordered to begin or continue execution:"},
            (
                orders = Cases[
                    OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 1, DependentProtocol -> Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"]],
                    ObjectP[Object[Transaction, Order]]
                ];
                Download[orders, {DependentProtocols, DependentProtocols[ShippingMaterials]}]
            ),
            {
                {
                    {LinkP[Download[Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"], Object]]},
                    {{{LinkP[Object[Transaction, Order]], LinkP[Download[Object[Product, "Waters size exclusion column, 30 mm"], Object]]}}}
                }
            },
            Variables :> {orders},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            }
        ],
        Example[{Options, DependentResource, "Specify that a resource depends on the item being ordered to be fulfilled:"},
            (
                orders = Cases[
                    OrderSamples[
                        Object[Product, "Waters size exclusion column, 30 mm"],
                        1,
                        DependentResource -> Object[Resource, Sample, "Test resource for OrderSamples DependentResource"]
                    ],
                    ObjectP[Object[Transaction, Order]]
                ];
                Download[orders, Resources[Object]]
            ),
            {{_?(SameObjectQ[#, Object[Resource, Sample, "Test resource for OrderSamples DependentResource"]]&)}},
            Variables :> {orders},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            }
        ],
        Example[{Options, ShippedRack, "When a product is shipped with a rack, specify the rack model:"},
            orders = OrderSamples[
                {Model[Container, Vessel, "50mL Tube"]}, {10},
                ShippedRack -> {Model[Container, Rack, "24 Position 50mL Tube Rack"]},
                InternalOrder -> False
            ],
            {ObjectP[Object[Transaction, Order]]},
            Variables :> {orders},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            }
        ],
        Example[{Options, ShippedRack, "When a product requiring a rack to stand is shipped, automatically check if there is a rack on site that can hold it even when ShippedRack is Null:"},
            orders = OrderSamples[
                {Model[Container, Vessel, "50mL Tube"]}, {10},
                ShippedRack -> {Null},
                InternalOrder -> False
            ],
            {ObjectP[Object[Transaction, Order]]},
            Variables :> {orders},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            }
        ],
        Test["ShippedRack populates ShippedRacks field in the Object[Transaction, Order]:",
            order = First[OrderSamples[
                {Model[Container, Vessel, "50mL Tube"]}, {10},
                ShippedRack -> {Model[Container, Rack, "24 Position 50mL Tube Rack"]},
                InternalOrder -> False
            ]];
            Download[order, ShippedRacks],
            {ObjectP[Model[Container, Rack, "24 Position 50mL Tube Rack"]]},
            Variables :> {order},
            TearDown :> {
                EraseObject[order, Verbose -> False, Force -> True]
            }
        ],
        Test["DependentProtocol option is effectively ignored (no protocol update packets are generated) when its value is None:",
            Cases[
                OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"],
                    1, DependentProtocol -> None, Upload -> False],
                PacketP[Object[Protocol]]],
            {}
        ],
        Test["DependentProtocol option handles mixed protocol and None input properly:",
            (
                orders = Cases[
                    OrderSamples[
                        {Object[Product, "Waters size exclusion column, 30 mm"],
                            Object[Product, "Dishwashing rack"]},
                        {1, 1},

                        DependentProtocol -> {Object[Protocol, HPLC,
                            "Test HPLC protocol for OrderSamples DependentProtocol"], None}
                    ],
                    ObjectP[Object[Transaction, Order]]
                ];
                Download[orders, {DependentProtocols, DependentProtocols[ShippingMaterials]}]
            ),
            {
                {
                    {LinkP[Download[Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"], Object]]},
                    {{{LinkP[Object[Transaction, Order]], LinkP[Download[Object[Product, "Waters size exclusion column, 30 mm"], Object]]}}}
                }
            },
            Variables :> {orders},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            }
        ],
        Test[
            "DependentProtocol option works with Model overload:",
            (
                orders = Cases[
                    OrderSamples[Model[Sample, "id:vXl9j57YRBad"], 120 Gram, DependentProtocol -> Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"]],
                    ObjectP[Object[Transaction, Order]]
                ];
                Download[orders, {DependentProtocols, DependentProtocols[ShippingMaterials]}]
            ),
            {
                {
                    {LinkP[Download[Object[Protocol, HPLC, "Test HPLC protocol for OrderSamples DependentProtocol"], Object]]},
                    {{{LinkP[Object[Transaction, Order]], LinkP[Download[Object[Product, "id:N80DNj1rWbEq"], Object]]}}}
                }
            },
            Variables :> {orders},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            },
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Example[{Options, Output, "Returns the tests:"},
            order = OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 3, Output -> Tests],
            {_EmeraldTest..},
            Variables :> {order},
            TearDown :> (EraseObject[order, Force -> True])
        ],
        Example[{Options, Output, "Returns the resolved options:"},
            order = OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 3, Output -> Options],
            {(_Rule | _RuleDelayed)..},
            Variables :> {order},
            TearDown :> (EraseObject[order, Force -> True])
        ],
        (* A bug where this call caused the helper to return Object[Product,"id:o1k9jAGK9a8G"], which is not Deprecated but is NotForSale *)
        Test[
            "The preferredProductQuantities helper doesn't pick NotForSale Products from a Model's list of non-deprecated products:",
            Download[First@First[Inventory`Private`preferredProductQuantities[{Model[Sample, "Methanol"]}, {1.2Liter}]], NotForSale],
            Null | False,
            Messages :> {OrderSamples : NotForSale},
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Example[{Messages, "OrderMustBeInternal", "If Emerald is the Supplier of the Product, InternalOrder MUST be True:"},
            order = OrderSamples[Object[Product, "Fake Product with ECL as Supplier"], 3, InternalOrder -> False],
            $Failed,
            Messages :> {OrderSamples::OrderMustBeInternal, Error::InvalidOption},
            Variables :> {order},
            TearDown :> (If[!MatchQ[order, $Failed], EraseObject[order, Force -> True]])
        ],
        Test[
            "If Emerald is the Supplier of the Product, InternalOrder MUST be True, even if Autogenerated->True:",
            order = OrderSamples[Object[Product, "Fake Product with ECL as Supplier"], 3, Autogenerated -> True];
            Download[order, InternalOrder],
            {True},
            Variables :> {order},
            TearDown :> (If[!MatchQ[order, $Failed], EraseObject[order, Force -> True]]),
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Test[
            "If Emerald is the Supplier of the Model's only Product, InternalOrder MUST be True:",
            order = OrderSamples[Model[Sample, StockSolution, "Fake StockSolution with ECL as only Supplier"], 300 Milliliter, InternalOrder -> False],
            $Failed,
            Messages :> {OrderSamples::OrderMustBeInternal, Error::InvalidOption},
            Variables :> {order},
            TearDown :> (If[!MatchQ[order, $Failed], EraseObject[order, Force -> True]])
        ],
        Test[
            "If Emerald is the Supplier of the Model's only Product, InternalOrder MUST be True, even if Autogenerated->True:",
            order = OrderSamples[Model[Sample, StockSolution, "Fake StockSolution with ECL as only Supplier"], 300 Milliliter, Autogenerated -> True];
            Download[order, InternalOrder],
            {True},
            Variables :> {order},
            TearDown :> (If[!MatchQ[order, $Failed], EraseObject[order, Force -> True]]),
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Test[
            "If Emerald is the Supplier of the Product, InternalOrder must resolve to be True:",
            order = OrderSamples[Object[Product, "Fake Product with ECL as Supplier"], 3, InternalOrder -> Automatic];
            Download[order, InternalOrder],
            {True},
            Variables :> {order},
            TearDown :> (If[!MatchQ[order, $Failed], EraseObject[order, Force -> True]]),
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Test[
            "If Emerald is the Supplier of a Model's only Product, InternalOrder must resolve to be True:",
            order = OrderSamples[Model[Sample, StockSolution, "Fake StockSolution with ECL as only Supplier"], 300 Milliliter, InternalOrder -> Automatic];
            Download[order, InternalOrder],
            {True},
            Variables :> {order},
            TearDown :> (If[!MatchQ[order, $Failed], EraseObject[order, Force -> True]]),
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Test[
            "The preferredProductQuantities helper can handle being provided empty lists for resources:",
            Inventory`Private`preferredProductQuantities[
                {Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]},
                {1.2 Microgram, 1.2 Kilogram},
                DependentResource -> {{}, {}}
            ],
            {{ObjectP[Object[Product]], _Integer}, {ObjectP[Object[Product]], _Integer}},
            Messages :> {OrderSamples : NotForSale},
            Stubs :> {ValidObjectQ[___] = True}
        ],
        Test["SyncOrders option doesn't work if a non-Developer user calls OrderSamples:",
            order = OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 1, SyncOrders -> True, Upload -> False],
            {PacketP[]..},
            Variables :> {order},
            Messages :> {OrderSamples::SyncPermissionDenied},
            Stubs :> {
                SyncOrders[] := Null,
                InternalInventory`Private`$SyncOrdersEnabled = True,
                $Notebook = Null
            },
            TearDown :> (EraseObject[order, Force -> True])
        ],
        Test["SyncOrders option doesn't work if called from a Notebook:",
            order = OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 1, SyncOrders -> True, Upload -> False],
            {PacketP[]..},
            Variables :> {order},
            Messages :> {OrderSamples::SyncPermissionDenied},
            Stubs :> {
                SyncOrders[] := Null,
                $PersonID = Object[User, Emerald, Developer, "hendrik"],
                InternalInventory`Private`$SyncOrdersEnabled = True,
                $Notebook = Object[LaboratoryNotebook, "id:1ZA60vLAZd1E"]
            },
            TearDown :> (EraseObject[order, Force -> True])
        ],
        Test["SyncOrders option doesn't work if Dev was not loaded an $SyncOrdersEnabled is not True:",
            order = OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 1, SyncOrders -> True, Upload -> False],
            {PacketP[]..},
            Variables :> {order},
            Messages :> {OrderSamples::SyncPermissionDenied},
            Stubs :> {
                SyncOrders[] := Null,
                $PersonID = Object[User, Emerald, Developer, "hendrik"],
                InternalInventory`Private`$SyncOrdersEnabled = Null,
                $Notebook = Object[LaboratoryNotebook, "id:1ZA60vLAZd1E"]
            },
            TearDown :> (EraseObject[order, Force -> True])
        ],
        Test["SyncOrders can be run by OrderSamples if user is a Developer, not in a Notebook and Dev` has been loaded:",
            order = OrderSamples[Object[Product, "Waters size exclusion column, 30 mm"], 1, SyncOrders -> True, Upload -> False],
            {PacketP[]..},
            Variables :> {order},
            Stubs :> {
                SyncOrders[] := Null,
                $PersonID = Object[User, Emerald, Developer, "hendrik"],
                InternalInventory`Private`$SyncOrdersEnabled = True,
                $Notebook = Null
            },
            TearDown :> (EraseObject[order, Force -> True])
        ],

        Test["Will split products ordered by their appropriate notebook:",
            (
                orders = Cases[
                    OrderSamples[
                        {
                            Object[Product, "Waters size exclusion column, 30 mm"],
                            Object[Product, "Waters size exclusion column, 30 mm"]
                        },
                        {1, 1},
                        DependentResource -> {None, Object[Resource, Sample, "Test resource for OrderSamples Notebooks"]}
                    ],
                    ObjectP[Object[Transaction, Order]]
                ];
                Download[orders, Notebook]
            ),
            {Null, ObjectP[Object[LaboratoryNotebook]]},
            Variables :> {orders},
            Stubs :> {
                $PersonID = Object[User, Emerald, Developer, "hendrik"],
                $Notebook = Null
            },
            TearDown :> (EraseObject[orders, Force -> True])
        ],

        Test["Place an order of a kit product:",
            orders = OrderSamples[Object[Product, "id:3em6ZvL7JMKM"], 3],
            {ObjectP[Object[Transaction, Order]]},
            TearDown :> {
                EraseObject[orders, Verbose -> False, Force -> True]
            },
            Variables :> {orders}
        ],
        Test["Placing an order on a kit component orders the appropriate number of kits:",
            order = OrderSamples[Model[Sample, "id:dORYzZJr5xvq"], 1 Milliliter, InternalOrder -> False, Upload -> False];
            {
                (* Make sure the correct product was ordered *)
                Lookup[order[[1]], Replace[Products]],
                (* Make sure the correct number of products was ordered *)
                Lookup[order[[1]], Replace[OrderQuantities]]
            },
            {
                {LinkP[Object[Product, "id:3em6ZvL7JMKM"]]},
                {20}
            },
            Variables :> {order}
        ],
        Test["Placing an order on a kit component AND a product orders the appropriate number of kits:",
            order = OrderSamples[
                {
                    Object[Product, "id:3em6ZvL7JMKM"],
                    Model[Sample, "id:dORYzZJr5xvq"]
                },
                {
                    3,
                    1 Milliliter
                },
                InternalOrder -> False,
                Upload -> False
            ];
            {
                (* Make sure the correct product was ordered *)
                Lookup[order[[1]], Replace[Products]],
                (* Make sure the correct number of products was ordered *)
                Lookup[order[[1]], Replace[OrderQuantities]]
            },
            {
                {LinkP[Object[Product, "id:3em6ZvL7JMKM"]]},
                {23}
            },
            Variables :> {order}
        ]
        (*Test["Placing an order on a kit component AND a product forces only products to be ordered:",
			order = OrderSamples[
				{
					Model[Sample, "id:dORYzZJr5xvq"]
				},
				{
					1 Milliliter
				},
				InternalOrder->True,
				Upload->False
			];
			{
				*)(* If order's length is not 2, then multiple orders were incorrectly placed, which indicates one for Models and one for Products *)(*
				Length[order],
				*)(* Make sure the correct product was ordered *)(*
				Lookup[order[[1]],Replace[Products]],
				*)(* Make sure the correct number of products was ordered *)(*
				Lookup[order[[1]],Replace[OrderQuantities]]
			},
			{
				{2},
				{LinkP[Object[Product,"id:3em6ZvL7JMKM"]]},
				{23}
			},
			Variables:>{order}
		]*)
    },
    SymbolSetUp :> Module[
        {testObjects, existingObjects, allUploads, supplier, sample, sampleID, product, productID, sample2, sampleID2, product2, productID2, modelContainerID, modelContainer},

        (*make sure we don't have test objects in the database *)
        testObjects = {
            Object[Product, "Test water product for OrderSamples test" <> $SessionUUID],
            Object[Product, "Test non SelfStanding product for OrderSamples test" <> $SessionUUID],
            Model[Sample, "Water model for OrderSamples test" <> $SessionUUID],
            Model[Sample, "Water model for OrderSamples test 2" <> $SessionUUID],
            Model[Container, Vessel, "Non selfstanding container for OrderSamples test" <> $SessionUUID],
            Object[Company, Supplier, "Test Supplier (OrderSamples unit tests)" <> $SessionUUID],
						Object[Inventory,Product,"Test Inventory for OrderSamples unit tests "<>$SessionUUID]
        };
        existingObjects = PickList[testObjects, DatabaseMemberQ[testObjects]];
        If[
            MatchQ[existingObjects, Except[Null | {}]],
            EraseObject[existingObjects, Force -> True, Verbose -> False];
        ];

        (* generate IDs for the test objects *)
        {supplier, sampleID, sampleID2, productID, productID2, modelContainerID} = CreateID[{Object[Company, Supplier], Model[Sample], Model[Sample], Object[Product], Object[Product], Model[Container, Vessel]}];

        (* generate upload packets *)
        supplier = <|
            Object -> supplier,
            DeveloperObject -> True,
            Name -> "Test Supplier (OrderSamples unit tests)" <> $SessionUUID
        |>;

        sample = <|
            Object -> sampleID, DeveloperObject -> True, Name -> "Water model for OrderSamples test" <> $SessionUUID,
            Replace[Composition] -> {{100 MassPercent, Link[Model[Molecule, "Water"]]}}, UsedAsSolvent -> False, Replace[Authors] -> {Link[$PersonID]},
            State -> Liquid, Density -> 1 Gram / Milliliter, Tablet -> False,
            Expires -> True, UnsealedShelfLife -> 6 Month,
            DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], MSDSRequired -> False, Flammable -> True, DrainDisposal -> True, Replace[IncompatibleMaterials] -> {None}
        |>;

        product = <|
            Object -> productID, DeveloperObject -> True, Name -> "Test water product for OrderSamples test" <> $SessionUUID,
            Replace[Synonyms] -> {"Test water product for OrderSamples test" <> $SessionUUID}, Author -> Link[$PersonID],
            ProductModel -> Link[sampleID, Products], Supplier -> Link[supplier, Products], Packaging -> Single, SampleType -> Bottle, NumberOfItems -> 1,
            DefaultContainerModel -> Link[Model[Container, Vessel, "10mL small plastic bottle"], ProductsContained], Amount -> 5 Gram, Stocked -> True, EstimatedLeadTime -> 8 Day,
            Price -> 20.5 USD, UsageFrequency -> Low, Density -> 1 Gram / Milliliter,
            CatalogNumber -> "TestWaterProduct", CatalogDescription -> "5 Gram of the test water in a small plastic bottle"
        |>;

        {modelContainer, sample2, product2} = {
            <|
                Object -> modelContainerID,
                DeveloperObject -> True,
                Name -> "Non selfstanding container for OrderSamples test" <> $SessionUUID
            |>,
            <|
                Object -> sampleID2, DeveloperObject -> True, Name -> "Water model for OrderSamples test 2" <> $SessionUUID,
                Replace[Composition] -> {{100 MassPercent, Link[Model[Molecule, "Water"]]}}, UsedAsSolvent -> False, Replace[Authors] -> {Link[$PersonID]},
                State -> Liquid, Density -> 1 Gram / Milliliter, Tablet -> False, Expires -> True, UnsealedShelfLife -> 6 Month,
                DefaultStorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]], MSDSRequired -> False, Flammable -> True, DrainDisposal -> True, Replace[IncompatibleMaterials] -> {None}
            |>,
            <|
                Object -> productID2, DeveloperObject -> True, Name -> "Test non SelfStanding product for OrderSamples test" <> $SessionUUID,
                Replace[Synonyms] -> {"Test non SelfStanding product for OrderSamples test" <> $SessionUUID}, Author -> Link[$PersonID],
                ProductModel -> Link[sampleID2, Products], Supplier -> Link[supplier, Products], Packaging -> Single, SampleType -> Bottle,
                NumberOfItems -> 1, DefaultContainerModel -> Link[modelContainerID, ProductsContained], Amount -> 5 Gram, Stocked -> True,
                EstimatedLeadTime -> 8 Day, Price -> 20.5 USD, UsageFrequency -> Low, Density -> 1 Gram / Milliliter, CatalogNumber -> "TestWaterProduct", CatalogDescription -> "5 Gram of the test water in a non self standing bottle"
            |>
        };

        (* gather all upload objects and upload them *)
        allUploads = {supplier, modelContainer, sample, sample2, product, product2};
        Upload[allUploads];
				
				Upload[
					Association[
						Type -> Object[Inventory,Product],
						Name -> "Test Inventory for OrderSamples unit tests "<>$SessionUUID,
						Replace[StockedInventory] -> Link[productID,Inventories],
						Site -> Link[$Site],
						Transfer[Notebook] -> Null
					]
				];
    ],
    SymbolTearDown :> EraseObject[
        {
            Object[Product, "Test water product for OrderSamples test" <> $SessionUUID],
            Object[Product, "Test non SelfStanding product for OrderSamples test" <> $SessionUUID],
            Model[Sample, "Water model for OrderSamples test" <> $SessionUUID],
            Model[Sample, "Water model for OrderSamples test 2" <> $SessionUUID],
            Model[Container, Vessel, "Non selfstanding container for OrderSamples test" <> $SessionUUID],
            Object[Company, Supplier, "Test Supplier (OrderSamples unit tests)" <> $SessionUUID]
        },
        Force -> True,
        Verbose -> False
    ],
    Stubs :> {
        (* "Test user for notebook-less test protocols" *)
        $PersonID = Object[User, "id:n0k9mG8AXZP6"],
        (* Disable any email sending *)
        $EmailEnabled = False
    },
    TearDown :> {
        Module[{allCreatorOrders, allProductOrders, allOrders},
            allCreatorOrders = Search[Object[Transaction, Order], Creator == Object[User, "id:n0k9mG8AXZP6"]];
            allProductOrders = Search[Object[Transaction, Order], Products == (Object[Product, "id:o1k9jAK4dYDA"] | Object[Product, "id:lYq9jRz05lkB"])];

            allOrders = Join[allCreatorOrders, allProductOrders];
            EraseObject[allOrders, Force -> True, Verbose -> False]
        ]
    }

];


(* ::Subsubsection::Closed:: *)
(*OrderSamplesOptions*)


DefineTests[OrderSamplesOptions,
    {
        Example[{Basic, "Return resolved options for OrderSamples when passed a singleton input:"},
            OrderSamplesOptions[Object[Product, "CY4501 Glass Basic Column"], 3, OutputFormat -> List],
            {Rule[_, Except[Automatic]]...}
        ],
        Example[{Basic, "Return resolved options for CancelTransaction when passed a list of input:"},
            OrderSamplesOptions[{Object[Product, "CY4501 Glass Basic Column"], Object[Product, "Dishwashing rack"]}, {3, 1}, OutputFormat -> List],
            {Rule[_, Except[Automatic]]...}
        ],
        Example[{Basic, "Does not actually create orders:"},
            OrderSamplesOptions[Object[Product, "CY4501 Glass Basic Column"], 1, DependentProtocol -> Object[Protocol, AbsorbanceQuantification, "LegacyID:2"]];
            Download[Object[Protocol, AbsorbanceQuantification, "LegacyID:2"], ShippingMaterials],
            {}
        ],
        Example[{Options, OutputFormat, "Return resolved options for CancelTransaction as a table:"},
            OrderSamplesOptions[Object[Product, "CY4501 Glass Basic Column"], 3],
            Graphics_
        ]
    }
];


(* ::Subsubsection::Closed:: *)
(*OrderSamplesPreview*)


DefineTests[OrderSamplesPreview,
    {
        Example[{Basic, "Returns Null when passed a singleton input:"},
            OrderSamplesPreview[Object[Product, "CY4501 Glass Basic Column"], 3],
            Null
        ],
        Example[{Basic, "Returns Null when passed a list of input:"},
            OrderSamplesPreview[{Object[Product, "CY4501 Glass Basic Column"], Object[Product, "Beckman Rack for 32.4mL OptiSeal Centrifuge Tubes"]}, {3, 1}],
            Null
        ],
        Example[{Basic, "Does not actually create orders:"},
            OrderSamplesPreview[Object[Product, "CY4501 Glass Basic Column"], 1, DependentProtocol -> Object[Protocol, AbsorbanceQuantification, "LegacyID:4"]];
            Download[Object[Protocol, AbsorbanceQuantification, "LegacyID:4"], ShippingMaterials],
            {}
        ]
    }
];



(* ::Subsubsection::Closed:: *)
(*ValidOrderSamplesQ*)


DefineTests[ValidOrderSamplesQ,
    {
        (* --- Basic --- *)
        Example[{Basic, "Verifies an order can be placed for a specified quantity of the given product:"},
            ValidOrderSamplesQ[Object[Product, "CY4501 Glass Basic Column"], 3],
            True
        ],
        Example[{Basic, "Verifies an order can be placed for a specified quantity of several different products:"},
            ValidOrderSamplesQ[{Object[Product, "CY4501 Glass Basic Column"], Object[Product, "Dishwashing rack"]}, {3, 1}],
            True
        ],
        Example[{Basic, "Verifies an order can be placed for a specified model sample with the desired amount:"},
            ValidOrderSamplesQ[Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], 100 Gram],
            True
        ],
        (* --- Additional --- *)
        Example[{Additional, "Verifies an order can be placed for several model samples:"},
            ValidOrderSamplesQ[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {50 Gram, 50 Gram}, InternalOrder -> False],
            True
        ],
        Example[{Additional, "Verifies an order with duplicate models can be placed when InternalOrder -> False:"},
            ValidOrderSamplesQ[
                {
                    Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"],
                    Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"]
                },
                {50 Gram, 50 Gram},
                InternalOrder -> False
            ],
            True
        ],
        (* --- Options --- *)
        Example[{Options, Creator, "Verifies an order can be placed if Creator is specified:"},
            ValidOrderSamplesQ[Object[Product, "Polypropylene Carboy, 5 L"], 1, Creator -> Object[User, "id:n0k9mG8AXZP6"]],
            True
        ],
        Example[{Options, Autogenerated, "Verifies an order can be placed if Autogenerated is True:"},
            ValidOrderSamplesQ[Object[Product, "Polypropylene Carboy, 5 L"], 1, Autogenerated -> True],
            True
        ],
        Example[{Options, ShippingSpeed, "Verifies an order can be placed when ShippingSpeed is set to 1 Day:"},
            ValidOrderSamplesQ[Object[Product, "Polypropylene Carboy, 5 L"], 1, ShippingSpeed -> NextDay],
            True
        ],
        Example[{Options, InternalOrder, "Verifies an order can be placed when InternalOrder is True:"},
            ValidOrderSamplesQ[{Object[Product, "Test product for Order Inhouse Samples (A2)"]}, {2}, InternalOrder -> True, Creator -> Object[User, "id:n0k9mG8AXZP6"]],
            True
        ],
        Example[{Options, Destination, "Verifies an order can be placed when Destination is specified:"},
            ValidOrderSamplesQ[Object[Product, "Polypropylene Carboy, 5 L"], 1, Destination -> $Site],
            True
        ],
        Example[{Options, ShipToUser, "Verifies an order can be placed when ShipToUser is True:"},
            ValidOrderSamplesQ[Object[Product, "Test product for Order Inhouse Samples (A1)"], 1, ShipToUser -> True, InternalOrder -> False],
            True
        ],
        Example[{Options, Verbose, "Indicate that the test results should be printed:"},
            ValidOrderSamplesQ[Object[Product, "Test product for Order Inhouse Samples (A1)"], 1, Verbose -> True],
            True
        ],
        Example[{Options, OutputFormat, "Indicate that a summary of the test results should be returned:"},
            ValidOrderSamplesQ[Object[Product, "Test product for Order Inhouse Samples (A1)"], 1, OutputFormat -> TestSummary],
            _EmeraldTestSummary
        ],

        (* --- Messages --- *)
        Example[{Messages, "Deprecated", "Indicates an order cannot be placed if any one of the products is marked as Deprecated:"},
            ValidOrderSamplesQ[Object[Product, "Polypropylene Carboy, 5 L, deprecated"], 2],
            False
        ],
        Example[{Messages, "InvalidProduct", "Indicates an order cannot be placed if the product doesn't pass ValidObjectQ, return an error:"},
            ValidOrderSamplesQ[Object[Product, "8 Dram Vial"], 2],
            False
        ],
        Example[{Messages, "Deprecated", "Indicates an order cannot be placed if the product is deprecated:"},
            ValidOrderSamplesQ[Model[Sample, "NaCl-Deprecated"], 250 Gram, InternalOrder -> False],
            False
        ],
        Example[{Messages, "AmountUnit", "Indicates an order cannot be placed if the specified amount does not match the unit specified in model sample's products:"},
            ValidOrderSamplesQ[{Model[Sample, "Test Model Chemical for Order Inhouse Samples (A1)"], Model[Sample, "Test Model Chemical for Order Inhouse Samples (A2)"]}, {100 Milliliter, 80 Gram}, InternalOrder -> False],
            False
        ]
    },
    Stubs :> {
        (* "Test user for notebook-less test protocols" *)
        $PersonID = Object[User, "id:n0k9mG8AXZP6"],
        (* Disable any email sending *)
        $EmailEnabled = False
    }
];


(* ::Subsection::Closed:: *)
(*RestrictSamples*)


(* ::Subsubsection::Closed:: *)
(*RestrictSamples*)


DefineTests[RestrictSamples,
    {
        Example[{Basic, "Indicate that a sample must be directly referenced in order to be used in experiments:"},
            RestrictSamples[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]],
            {ObjectReferenceP[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Basic, "Restrict multiple samples from automatic use in experiments:"},
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}],
            {ObjectReferenceP[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]]}
        ],
        Test["Restrict multiple samples (links and packets) from automatic use in experiments:",
            RestrictSamples[{Link[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], Download[Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]]}],
            {ObjectReferenceP[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Basic, "Containers may also be restricted from automatic use with this function:"},
            RestrictSamples[Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]],
            {ObjectReferenceP[Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Basic, "Restricting containers also restricts their contents:"},
            RestrictSamples[{Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}],
            {ObjectReferenceP[Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], ObjectP[Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Additional, "Restricted samples have their Restricted flag set to True:"},
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}];
            Download[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Restricted],
            {True, True}
        ],
        Example[{Additional, "Restrict a mixed group of containers and samples from automatic use in experiments:"},
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]}],
            {ObjectReferenceP[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Additional, "Use UnrestrictSamples samples to undo this function's action by unsetting the Restricted flag:"},
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}];
            UnrestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}];
            Download[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Restricted],
            {False, False}
        ],
        Example[{Additional, "If given an empty list, returns an empty list:"},
            RestrictSamples[{}],
            {}
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            RestrictSamples[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"]];
            Download[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], RestrictedLog],
            {{_?DateObjectQ, True, ObjectP[Object[User, "id:n0k9mG8AXZP6"]]}}
        ],
        Test["When Upload -> False, return a list of change packets:",
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Upload -> False],
            {PacketP[Object[Sample]], PacketP[Object[Sample]]}
        ],
        Test["When Output -> Tests, return a list of tests checking all messages:",
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Output -> Tests],
            {__EmeraldTest}
        ],
        Test["When Output -> Preview, return Null:",
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Output -> Preview],
            Null
        ],
        Test["When Output -> Options, return a list of options:",
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Output -> Options],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            RestrictSamples[{Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            {
                {__EmeraldTest},
                Null,
                {UpdatedBy -> ObjectP[Object[User]]},
                {ObjectReferenceP[Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID]]}
            }
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> Null,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID],
                Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for RestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for RestrictSamples tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID,
                    "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for RestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamples tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];


(* ::Subsubsection::Closed:: *)
(*RestrictSamplesOptions*)


DefineTests[RestrictSamplesOptions,
    {
        Example[{Basic, "Returns all non-hidden options when called on one sample:"},
            RestrictSamplesOptions[Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Basic, "Returns all non-hidden options when called on multiple samples:"},
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Basic, "Containers may also be restricted from automatic use with this function:"},
            RestrictSamplesOptions[Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Additional, "Restrict a mixed group of containers and samples from automatic use in experiments:"},
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID]}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            RestrictSamplesOptions[Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User, "id:n0k9mG8AXZP6"]]},
            SetUp :> {
                Upload[<|Object -> #, Restricted -> Null, Replace[RestrictedLog] -> {}|>& /@ {Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}]
            }
        ],
        Test["When Output -> Tests, return the list of options:",
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}, Output -> Tests, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> Preview, return the list of options:",
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}, Output -> Preview, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> Options, return a list of options:",
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}, Output -> Options, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> {Tests, Preview, Options, Result}, return a list all those non-hidden options:",
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Additional, "If given an empty list, returns a list of options:"},
            RestrictSamplesOptions[{}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Options, OutputFormat, "Returns all non-hidden options in a list:"},
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Options, OutputFormat, "Returns all non-hidden options in table, or if no options, an empty list:"},
            RestrictSamplesOptions[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID]}],
            Graphics_
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> Null,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for RestrictSamplesOptions tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID,
                    "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesOptions tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];


(* ::Subsubsection::Closed:: *)
(*RestrictSamplesPreview*)


DefineTests[RestrictSamplesPreview,
    {
        Example[{Basic, "Returns Null when called on one sample:"},
            RestrictSamplesPreview[Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Basic, "Returns Null when called on multiple samples:"},
            RestrictSamplesPreview[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Basic, "Returns Null if called on a container:"},
            RestrictSamplesPreview[Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Additional, "Returns Null if called on a mixed group of samples and containers:"},
            RestrictSamplesPreview[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            RestrictSamplesPreview[Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"]],
            Null
        ],
        Example[{Additional, "If given an empty list, returns Null:"},
            RestrictSamplesPreview[{}],
            Null
        ],
        Test["Ignore Output option when Previewing:",
            RestrictSamplesPreview[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID]}, Output -> Tests],
            Null
        ],
        Test["Ignore Output option specifying multiple values when Previewing:",
            RestrictSamplesPreview[{Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            Null
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> Null,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for RestrictSamplesPreview tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID,
                    "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for RestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for RestrictSamplesPreview tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];



(* ::Subsubsection::Closed:: *)
(*ValidRestrictSamplesQ*)


DefineTests[ValidRestrictSamplesQ,
    {
        Example[{Basic, "Check the validity of restricting the sample and return a Boolean:"},
            ValidRestrictSamplesQ[Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Check the validity of restricting multiple samples and return a Boolean:"},
            ValidRestrictSamplesQ[{Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID]}],
            True
        ],
        Example[{Basic, "Check the validity of restricting the container and return a Boolean:"},
            ValidRestrictSamplesQ[Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Return False if a specified option does not exist:"},
            ValidRestrictSamplesQ[Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], Horse -> Zebra],
            False
        ],
        Example[{Options, OutputFormat, "Check the validity of restricting the container and return a test summary if OutputFormat -> TestSummary:"},
            ValidRestrictSamplesQ[{Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]}, OutputFormat -> TestSummary],
            _EmeraldTestSummary
        ],
        Example[{Options, Verbose, "Check the validity of restricting the sample and container and indicate the passing and failing tests with the Verbose option:"},
            ValidRestrictSamplesQ[{Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]}, Verbose -> True],
            True
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            ValidRestrictSamplesQ[Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"]],
            True
        ],
        Example[{Additional, "If given an empty list, return True:"},
            ValidRestrictSamplesQ[{}],
            True
        ],
        Test["Ignore Output option when getting the tests:",
            ValidRestrictSamplesQ[{Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID]}, Output -> Preview],
            True
        ],
        Test["Ignore Output option specifying multiple values when getting the tests:",
            ValidRestrictSamplesQ[{Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID], Object[Sample, "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            True
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> Null,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for ValidRestrictSamplesQ tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID,
                    "Tube with Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID,
                    "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Restrict 2 for ValidRestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Restrict 1 for ValidRestrictSamplesQ tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];



(* ::Subsection::Closed:: *)
(*UnrestrictSamples*)


(* ::Subsubsection::Closed:: *)
(*UnrestrictSamples*)


DefineTests[UnrestrictSamples,
    {
        Example[{Basic, "Indicate that a sample may be automatically used by any experiments that require the sample's model:"},
            UnrestrictSamples[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]],
            {ObjectReferenceP[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Basic, "Open multiple samples for automatic use in experiments:"},
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}],
            {ObjectReferenceP[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]]}
        ],
        Test["Open multiple samples (links and packets) for automatic use in experiments:",
            UnrestrictSamples[{Link[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]], Download[Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]]}],
            {ObjectReferenceP[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Basic, "Containers may also be allowed for automatic use with this function:"},
            UnrestrictSamples[Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]],
            {ObjectReferenceP[Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]]}
        ],
        Example[{Basic, "Unrestricting containers also unrestricts their contents:"},
            UnrestrictSamples[{Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}];
            Download[{Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Restricted],
            {False, False, False, False}
        ],
        Example[{Additional, "Unrestricted samples have their Restricted flag set to False:"},
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}];
            Download[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Restricted],
            {False, False}
        ],
        Example[{Additional, "Open a mixed group of containers and samples for automatic use in experiments:"},
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]}],
            {ObjectReferenceP[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]]},
            SetUp :> {
                Upload[<|Object -> #, Restricted -> True, Replace[RestrictedLog] -> {}|>& /@ {Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]}]
            }
        ],
        Example[{Additional, "Use RestrictSamples samples to undo this function's action by setting the Restricted flag to True:"},
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}];
            RestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}];
            Download[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Restricted],
            {True, True}
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            UnrestrictSamples[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"]];
            Download[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], RestrictedLog],
            {{_?DateObjectQ, False, ObjectP[Object[User, "id:n0k9mG8AXZP6"]]}}
        ],
        Example[{Additional, "If given an empty list, return an empty list:"},
            UnrestrictSamples[{}],
            {}
        ],
        Test["When Upload -> False, return a list of change packets:",
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Upload -> False],
            {PacketP[Object[Sample]], PacketP[Object[Sample]]}
        ],
        Test["When Output -> Tests, return a list of tests checking all messages:",
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Output -> Tests],
            {__EmeraldTest}
        ],
        Test["When Output -> Preview, return Null:",
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Output -> Preview],
            Null
        ],
        Test["When Output -> Options, return a list of non-hidden options:",
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Output -> Options],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> {Tests, Preview, Options, Result}, return a list all those outputs in that order:",
            UnrestrictSamples[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            {
                {__EmeraldTest},
                Null,
                {UpdatedBy -> ObjectP[Object[User]]},
                {ObjectReferenceP[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]], ObjectReferenceP[Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID]]}
            }
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> True,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID],
                Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for UnrestrictSamples tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID,
                    "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamples tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamples tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];


(* ::Subsubsection::Closed:: *)
(*UnrestrictSamplesOptions*)


DefineTests[UnrestrictSamplesOptions,
    {
        Example[{Basic, "Returns all non-hidden options when called on one sample:"},
            UnrestrictSamplesOptions[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Basic, "Returns all non-hidden options when called on multiple samples:"},
            UnrestrictSamplesOptions[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID]}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]},
            SetUp :> {
                Upload[<|Object -> #, Restricted -> True|>& /@ {Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID]}]
            }
        ],
        Example[{Basic, "Containers may also be allowed for automatic use with this function:"},
            UnrestrictSamplesOptions[Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Additional, "Open a mixed group of containers and samples for automatic use in experiments:"},
            UnrestrictSamplesOptions[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID]}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            UnrestrictSamplesOptions[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User, "id:n0k9mG8AXZP6"]]}
        ],
        Example[{Additional, "If given an empty list, return a list of options:"},
            UnrestrictSamplesOptions[{}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> Tests, return the list of options:",
            UnrestrictSamplesOptions[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID]}, Output -> Tests, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> Preview, return the list of options:",
            UnrestrictSamplesOptions[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID]}, Output -> Preview, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> Options, return a list of options:",
            UnrestrictSamplesOptions[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID]}, Output -> Options, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Test["When Output -> {Tests, Preview, Options, Result}, return a list all those non-hidden options:",
            UnrestrictSamplesOptions[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}, OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ],
        Example[{Options, OutputFormat, "Returns all non-hidden options as a table, or if no options, returns an empty list:"},
            UnrestrictSamplesOptions[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID]],
            Graphics_
        ],
        Example[{Options, OutputFormat, "Returns all non-hidden options as a list:"},
            UnrestrictSamplesOptions[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID], OutputFormat -> List],
            {UpdatedBy -> ObjectP[Object[User]]}
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> True,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for UnrestrictSamplesOptions tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID,
                    "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamplesOptions tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesOptions tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];



(* ::Subsubsection::Closed:: *)
(*UnrestrictSamplesPreview*)


DefineTests[UnrestrictSamplesPreview,
    {
        Example[{Basic, "Returns Null when called on one sample:"},
            UnrestrictSamplesPreview[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Basic, "Returns Null when called on multiple samples:"},
            UnrestrictSamplesPreview[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Basic, "Returns Null if called on a container:"},
            UnrestrictSamplesPreview[Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID]],
            Null
        ],
        Example[{Additional, "Returns Null if called on a mixed group of samples and containers:"},
            UnrestrictSamplesPreview[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID]}],
            Null
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            UnrestrictSamplesPreview[Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"]],
            Null
        ],
        Example[{Additional, "If given an empty list, return Null:"},
            UnrestrictSamplesPreview[{}],
            Null
        ],
        Test["Ignore Output option when Previewing:",
            UnrestrictSamplesPreview[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID]}, Output -> Tests],
            Null
        ],
        Test["Ignore Output option specifying multiple values when Previewing:",
            UnrestrictSamplesPreview[{Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            Null
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> True,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for UnrestrictSamplesPreview tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID,
                    "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for UnrestrictSamplesPreview tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for UnrestrictSamplesPreview tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];



(* ::Subsubsection::Closed:: *)
(*ValidUnrestrictSamplesQ*)


DefineTests[ValidUnrestrictSamplesQ,
    {
        Example[{Basic, "Check the validity of restricting the sample and return a Boolean:"},
            ValidUnrestrictSamplesQ[Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Check the validity of restricting multiple samples and return a Boolean:"},
            ValidUnrestrictSamplesQ[{Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]}],
            True
        ],
        Example[{Basic, "Check the validity of restricting the container and return a Boolean:"},
            ValidUnrestrictSamplesQ[Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]],
            True
        ],
        Example[{Basic, "Return False if a specified option does not exist:"},
            ValidUnrestrictSamplesQ[Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], Horse -> Zebra],
            False
        ],
        Example[{Options, OutputFormat, "Check the validity of restricting the container and return a test summary if OutputFormat -> TestSummary:"},
            ValidUnrestrictSamplesQ[{Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]}, OutputFormat -> TestSummary],
            _EmeraldTestSummary
        ],
        Example[{Options, Verbose, "Check the validity of restricting the sample and container and indicate the passing and failing tests with the Verbose option:"},
            ValidUnrestrictSamplesQ[{Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]}, Verbose -> True],
            True
        ],
        Example[{Options, UpdatedBy, "Specify the UpdatedBy option to indicate who is listed in the RestrictedLog:"},
            ValidUnrestrictSamplesQ[Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], UpdatedBy -> Object[User, "id:n0k9mG8AXZP6"]],
            True
        ],
        Example[{Additional, "If given an empty list, return True:"},
            ValidUnrestrictSamplesQ[{}],
            True
        ],
        Test["Ignore Output option when getting the tests:",
            ValidUnrestrictSamplesQ[{Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]}, Output -> Preview],
            True
        ],
        Test["Ignore Output option specifying multiple values when getting the tests:",
            ValidUnrestrictSamplesQ[{Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID], Object[Sample, "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]}, Output -> {Tests, Preview, Options, Result}],
            True
        ]
    },
    SetUp :> (
        Upload[Map[
            <|
                Object -> #,
                Restricted -> True,
                Replace[RestrictedLog] -> {}
            |>&,
            {
                Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                Object[Sample, "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]
            }
        ]]
    ),
    SymbolSetUp :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ];
        Module[{testBench, tube1, sampleTube1, sampleTube2, sample1, sample2},

            testBench = Upload[<|Type -> Object[Container, Bench], Model -> Link[Model[Container, Bench, "The Bench of Testing"], Objects], Name -> "Test bench for ValidUnrestrictSamplesQ tests" <> $SessionUUID, DeveloperObject -> True, StorageCondition -> Link[Model[StorageCondition, "Ambient Storage"]]|>];

            {
                tube1,
                sampleTube1,
                sampleTube2
            } = UploadSample[
                {
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"],
                    Model[Container, Vessel, "2mL Tube"]
                },
                {
                    {"Work Surface", testBench},
                    {"Work Surface", testBench},
                    {"Work Surface", testBench}
                },
                Name -> {
                    "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID,
                    "Tube with Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID
                },
                FastTrack -> True
            ];

            {
                sample1,
                sample2
            } = UploadSample[
                {
                    Model[Sample, "Milli-Q water"],
                    Model[Sample, "Milli-Q water"]
                },
                {
                    {"A1", sampleTube1},
                    {"A1", sampleTube2}
                },
                Name -> {
                    "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID,
                    "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID
                },
                InitialAmount -> {
                    1 Milliliter,
                    1 Milliliter
                },
                FastTrack -> True
            ];

            Upload[<|Object -> #, DeveloperObject -> True|>& /@ {tube1, sampleTube1, sampleTube2, sample1, sample2}]
        ]
    ),
    SymbolTearDown :> (
        Module[{objs, existingObjs},
            objs = Quiet[Cases[
                Flatten[{
                    Object[Container, Bench, "Test bench for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Sample, "Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube with Sample to Unrestrict 2 for ValidUnrestrictSamplesQ tests" <> $SessionUUID],
                    Object[Container, Vessel, "Tube to Unrestrict 1 for ValidUnrestrictSamplesQ tests" <> $SessionUUID]
                }],
                ObjectP[]
            ]];
            existingObjs = PickList[objs, DatabaseMemberQ[objs]];
            EraseObject[existingObjs, Force -> True]
        ]
    )
];
