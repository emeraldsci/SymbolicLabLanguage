(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)

DefineObjectType[Object[Protocol,DNASequencing],{
	Description->"A protocol for preparing DNA samples for Sanger sequencing and determining the nucleotide sequence of the DNA samples.",
	CreatePrivileges->None,
	Cache->Session,
	Fields->{
		(*===General===*)
	MethodFilePath->{
		Format->Single,
		Class->String,
		Pattern:>FilePathP,
		Description->"The full file path of the file necessary to move the file for the instrument to load its run module file and execute this protocol.",
		Category->"General",
		Developer->True
	},
	MasterMethodFilePath->{
		Format->Single,
		Class->String,
		Pattern:>FilePathP,
		Description->"The full file path of the file necessary for the instrument to load its plate template file and execute this protocol.",
		Category->"General",
		Developer->True
	},
	MasterMethodFileName->{
		Format->Single,
		Class->String,
		Pattern:> _String,
		Description->"The name of the plate template file with the run parameters.",
		Category -> "General",
		Developer->True
	},
	PlateLayoutFileName->{
		Format->Single,
		Class->String,
		Pattern:> _String,
		Description->"The name of the plate file used to tell the instrument the layout of the plate to be run.",
		Category -> "General",
		Developer->True
	},
	MethodTransferFileName->{
		Format->Single,
		Class->String,
		Pattern:> _String,
		Description->"The name of the file used to transfer the run onto a thumbdrive to be loaded onto the instrument.", (* This is only necessary until we get the Z drive connection restored *)
		Category -> "General",
		Developer->True
	},
	MethodNetworkTransferFilePath->{
		Format->Single,
		Class->String,
		Pattern:>FilePathP,
		Description->"The full file path of the file necessary to move the plate template file to the network drive location for the instrument to import the file.",
		Category->"General",
		Developer->True
	},
	RawDataFilePaths->{
		Format->Multiple,
		Class->String,
		Pattern:>FilePathP,
		Description->"The full file path of the folder containing the raw data generated by the instrument.",
		Category->"General",
		Developer->True
	},
	DataFilePath->{
		Format->Single,
		Class->String,
		Pattern:>FilePathP,
		Description->"The full file path of the file necessary to move the files containing the processed data generated by the analysis software.",
		Category->"General",
		Developer->True
	},
	DataFileNames->{
		Format->Multiple,
		Class->String,
		Pattern:> _String,
		Description->"The names of the files containing the experimental data after processing.",
		Category -> "General",
		Developer->True
	},
    DataCollectionTime -> {
		Format -> Single,
		Class -> Real,
		Pattern :> GreaterP[0*Minute],
		Units -> Minute,
		Description -> "The estimated completion time for the collection of DNA Sanger sequencing data.",
		Category -> "General",
		Developer -> True
		},
	Instrument->{
      Format->Single,
      Class->Link,
      Pattern:>_Link,
      Relation->Alternatives[Model[Instrument,GeneticAnalyzer],Object[Instrument,GeneticAnalyzer]],
      Description->"The genetic analyzer instrument for DNA nucleotide sequencing.",
      Category->"General"
    },
	SequencingCartridge->{
		Format->Single,
		Class->Link,
		Pattern:>_Link,
		Relation->Alternatives[Model[Item,Cartridge,DNASequencing],Object[Item,Cartridge,DNASequencing]],
		Description->"The cartridge containing the polymer, capillary array, and anode buffer that fits into the instrument for running the DNA sequencing experiment.",
		Category->"General"
		}, 
	InjectionGroups -> {
		Format->Multiple,
		Class->Expression,
		Pattern:>{{(ObjectP[Object[Sample]] | ObjectP[Model[Sample]]) ..} ...},
		Description->"The groups into which SamplesIn will be broken up into as defined by the sequencing cartridge capillary array that must co-inject four samples at a time.",
		Category->"General"
		}, 
	BufferCartridge->{
		Format->Single,
		Class->Link,
		Pattern:>_Link,
		Relation->Alternatives[Model[Container,Vessel,BufferCartridge],Object[Container,Vessel,BufferCartridge]],
		Description->"The cartridge containing the cathode buffer and waste container that fits into the instrument for running the DNA sequencing experiment.",
		Category->"General"
		},
	BufferCartridgeSepta->{
		Format->Single,
		Class->Link,
		Pattern:>_Link,
		Relation->Alternatives[Model[Item],Object[Item]],
		Description->"The partition covering the BufferCartridge during the capillary electrophoresis run.",
		Category->"Sample Post-Processing"
	},
	ReplaceBufferCartridge->{
		Format->Single,
		Class->Expression,
		Pattern:>BooleanP,
		Description->"Indicates if the BufferCartridge on the instrument needs to be replaced before running the experiment.",
		Category->"General"
	},
	PartsPlacements -> {
		Format -> Multiple,
		Class -> {Link, Link, String},
		Pattern :> {_Link, _Link, LocationPositionP},
		Relation -> {Alternatives[Model[Container],Model[Item],Object[Container],Object[Item]], Alternatives[Object[Instrument],Object[Container]], Null},
		Description -> "Placement positions for replacement buffer cartridge.",
		Category -> "Placements",
		Headers -> {"Replacement Part", "Destination","Destination Position"},
		Developer -> True
	},
	RemovedParts -> {
		Format -> Multiple,
		Class -> Link,
		Pattern :> _Link,
		Relation -> Alternatives[
			Object[Part],
			Object[Sample],
			Object[Container],
			Object[Item],
			Object[Plumbing]
		],
		Description -> "If the buffer cartridge was replaced, the buffer cartridge that was replaced and disposed of.",
		Developer->True,
		Category -> "General"
	},
	PreparedPlate->{
		Format->Single,
		Class->Expression,
		Pattern:>BooleanP,
		Description->"The plate containing the samples for the DNA sequencing experiment has been previously prepared and does not need to run sample preparation steps.",
		Category->"General"
		},
	NumberOfInjections->{
		Format->Single,
		Class->Integer,
		Pattern:>GreaterEqualP[1,1],
		Description->"The number of times the same sample will be injected for another read run.",
		Category->"General"
		},
	
		
		(*===Sample Preparation===*)
		ReadLength->{
			Format->Multiple,
			Class->Integer,
			Pattern:> {GreaterEqualP[1, 1]..},
			Description->"For each member of SamplesIn, the estimated number of base pairs in the template sample to be sequenced.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		SampleVolumes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Microliter],
			Units->Microliter,
			Description->"For each member of SamplesIn, the volume of the sample added to the polymerase reaction.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		ReactionVolumes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Microliter],
			Units->Microliter,
			Description->"For each member of SamplesIn, the total volume of the polymerase reaction including the template, primer, master mix, and diluent.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		Primers->{
			Format->Multiple,
			Class->Expression,
			Pattern:>{_Link..|Null},
			Description->"For each member of SamplesIn, the list of primers that bind the target sequences of the template.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		PrimerVolumes->{
			Format->Multiple,
			Class->Expression,
			Pattern:>{GreaterEqualP[0 Microliter]..|Null},
			Description->"For each member of SamplesIn, the volume of primer that is added to the polymerase reaction.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		PrimerConcentrations->{
			Format->Multiple,
			Class->Expression,
			Pattern:>{GreaterEqualP[0 Picomolar]..|Null},
			Description->"For each member of SamplesIn, the desired final concentration of the primer strand in each polymerase reaction.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		PrimerResources->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Sample],Object[Sample]],
			Description->"The resources needed to load the plate with primers that bind the target sequences on the template strands.",
			Category->"Sample Preparation",
			Developer->True
		},
		PrimerStorageConditions->{
			Format->Multiple,
			Class->Expression,
			Pattern:>{(SampleStorageTypeP|Disposal)..},
			Description->"For each member of SamplesIn, the storage conditions under which primers should be stored after their usage in the experiment.",
			Category->"Sample Storage",
			IndexMatching->SamplesIn
		},
		MasterMix->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Sample],Object[Sample]],
			Description->"For each member of SamplesIn, the stock solution composed of the polymerase, nucleotides, and buffer for the polymerase reaction.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		MasterMixVolumes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Microliter],
			Units->Microliter,
			Description->"For each member of SamplesIn, the volume of master mix added to the polymerase reaction.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		MasterMixStorageConditions->{
			Format->Multiple,
			Class->Expression,
			Pattern:>{(SampleStorageTypeP|Disposal)..},
			Description->"For each member of SamplesIn, the storage conditions under which the master mixes should be stored after their usage in the experiment.",
			Category->"Sample Storage",
			IndexMatching->SamplesIn
		},
		AdenosineTriphosphateTerminator->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation-> Alternatives[Model[Molecule],Model[ProprietaryFormulation]],
			Description->"For each member of SamplesIn, the dye molecule (dideoxynucelotide triphosphate) used to terminate DNA chains at locations where the base pair on the opposing strand is thymine.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
			},
		ThymidineTriphosphateTerminator->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation-> Alternatives[Model[Molecule],Model[ProprietaryFormulation]],
			Description->"For each member of SamplesIn, the dye molecule (dideoxynucelotide triphosphate) used to terminate DNA chains at locations where the base pair on the opposing strand is adenine.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
			},
		GuanosineTriphosphateTerminator->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation-> Alternatives[Model[Molecule],Model[ProprietaryFormulation]],
			Description->"For each member of SamplesIn, the dye molecule (dideoxynucelotide triphosphate) used to terminate DNA chains at locations where the base pair on the opposing strand is cytosine.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
			},
		CytosineTriphosphateTerminator->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Molecule],Model[ProprietaryFormulation]],
			Description->"For each member of SamplesIn, the dye molecule (dideoxynucelotide triphosphate) used to terminate DNA chains at locations where the base pair on the opposing strand is guanine.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
			},
		Diluents->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Sample],Object[Sample]],
			Description->"For each member of SamplesIn, the solution for bringing each reaction to ReactionVolume once all the reaction components (templates, primers, and master mix) are added.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},
		DiluentVolumes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Microliter],
			Units->Microliter,
			Description->"For each member of SamplesIn, the volume of solution to add to bring each reaction to ReactionVolume.",
			Category->"Sample Preparation",
			IndexMatching->SamplesIn
		},


		(*===Sample Loading===*)
		ReadPlate->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Container],Object[Container]],
			Description->"The plate that is loaded with input samples, primers, master mix, and buffer, then inserted into the thermocycler instrument.",
			Category->"Sample Loading"
		},
		PCRPlatePrimitives->{
			Format->Multiple,
			Class->Expression,
			Pattern:>SampleManipulationP,
			Description->"The set of instructions specifying the loading of ReadPlate with input samples, primers, master mix, and diluent.",
			Category->"Sample Loading"
		},
		PCRSamplePreparation->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Object[Protocol,SampleManipulation],
			Description->"The sample manipulation protocol generated as a result of the execution of PCRPlatePrimitives, which is used to load ReadPlate with input samples, primers, master mix, and diluents.",
			Category->"Sample Loading"
		},



		(*===Polymerase Reaction Activation===*)
		Activation->{
			Format->Single,
			Class->Expression,
			Pattern:>BooleanP|Automatic,
			Description->"Indicates if hot start activation is performed to remove the thermolabile conjugates inhibiting polymerase activity.",
			Category->"Activation"
		},
		ActivationTime->{
			Format->Single,
			Class->Expression,
			Pattern:>GreaterEqualP[0 Second]|Automatic,
			Description->"The length of time for which the sample is held at ActivationTemperature to remove the thermolabile conjugates inhibiting polymerase activity.",
			Category->"Activation"
		},
		ActivationTemperature->{
			Format->Single,
			Class->Expression,
			Pattern:>GreaterEqualP[0 Kelvin]|Automatic,
			Description->"The temperature to which the sample is heated to remove the thermolabile conjugates inhibiting polymerase activity.",
			Category->"Activation"
		},
		ActivationRampRate->{
			Format->Single,
			Class->Expression,
			Pattern:>GreaterEqualP[(0 Celsius)/Second]|Automatic,
			Description->"The rate at which the sample is heated to reach ActivationTemperature.",
			Category->"Activation"
		},


		(*===Polymerase Reaction Denaturation===*)
		DenaturationTime->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Second],
			Units->Second,
			Description->"The length of time for which the sample is held at DenaturationTemperature to allow the dissociation of the double stranded template into single strands.",
			Category->"Denaturation"
		},
		DenaturationTemperature->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Kelvin],
			Units->Celsius,
			Description->"The temperature to which the sample is heated to allow the dissociation of the double stranded template into single strands.",
			Category->"Denaturation"
		},
		DenaturationRampRate->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[(0 Celsius)/Second],
			Units->Celsius/Second,
			Description->"The rate at which the sample is heated to reach DenaturationTemperature.",
			Category->"Denaturation"
		},


		(*===Polymerase Reaction Primer Annealing===*)
		PrimerAnnealing->{
			Format->Single,
			Class->Expression,
			Pattern:>BooleanP|Automatic,
			Description->"Indicates if annealing is performed as a separate step instead of as part of extension to allow primers to bind to the template.",
			Category->"Primer Annealing"
		},
		PrimerAnnealingTime->{
			Format->Single,
			Class->Expression,
			Pattern:>GreaterEqualP[0 Second]|Automatic,
			Description->"The length of time for which the sample is held at PrimerAnnealingTemperature to allow primers to bind to the template.",
			Category->"Primer Annealing"
		},
		PrimerAnnealingTemperature->{
			Format->Single,
			Class->Expression,
			Pattern:>GreaterEqualP[0 Kelvin]|Automatic,
			Description->"The temperature to which the sample is cooled to allow primers to bind to the template.",
			Category->"Primer Annealing"
		},
		PrimerAnnealingRampRate->{
			Format->Single,
			Class->Expression,
			Pattern:>GreaterEqualP[(0 Celsius)/Second]|Automatic,
			Description->"The rate at which the sample is cooled to reach PrimerAnnealingTemperature.",
			Category->"Primer Annealing"
		},


		(*===Polymerase Reaction Strand Extension===*)
		ExtensionTime->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Second],
			Units->Second,
			Description->"The length of time for which sample is held at ExtensionTemperature to allow the polymerase to synthesize a new strand using the template and primers.",
			Category->"Strand Extension"
		},
		ExtensionTemperature->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Kelvin],
			Units->Celsius,
			Description->"The temperature to which the sample is heated/cooled to allow the polymerase to synthesize a new strand using the template and primers.",
			Category->"Strand Extension"
		},
		ExtensionRampRate->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[(0 Celsius)/Second],
			Units->Celsius/Second,
			Description->"The rate at which the sample is heated/cooled to reach ExtensionTemperature.",
			Category->"Strand Extension"
		},


		(*===Polymerase Reaction Thermocycling===*)
		NumberOfCycles->{
			Format->Single,
			Class->Integer,
			Pattern:>GreaterEqualP[0,1],
			Units->None,
			Description->"The number of times the sample undergoes repeated polymerase reaction cycles of denaturation, primer annealing (optional), and strand extension.",
			Category->"Thermocycling"
		},
		HoldTemperature->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Kelvin],
			Units->Celsius,
			Description->"The temperature to which the sample is cooled and held after the thermocycling procedure.",
			Category->"Thermocycling"
		},
		
		
		(*===Post-PCR Sample Preparation===*)
		AssayPlatePrimitives->{
			Format->Multiple,
			Class->Expression,
			Pattern:>SampleManipulationP,
			Description->"The set of instructions specifying the loading of ReadPlate with quenching reagents.",
			Category->"Sample Post-Processing"
		},
		AssayPlateManipulation->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Object[Protocol,SampleManipulation],
			Description->"The sample manipulation protocol generated as a result of the execution of AssayPlatePrimitives, which is used to load ReadPlate with quenching reagents.",
			Category->"Sample Loading"
		},
		PurificationType->{
			Format->Single,
			Class->String,
			Pattern:>("Ethanol precipitation"|"BigDye XTerminator"|Null),
			Description->"The method of purification of the DNA template samples after undergoing chain termination PCR.",
			Category->"Sample Post-Processing"
		},
		QuenchingReagents->{
			Format->Multiple,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Sample],Object[Sample]],
			Description->"The reagents to quench the polymerase chain reaction and remove unreacted materials.",
			Category->"Sample Post-Processing"
			},
		QuenchingReagentVolumes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Microliter],
			Units->Microliter,
			Description->"The volumes of quenching reagents added to quench the polymerase chain reaction.",
			Category->"Sample Post-Processing"
			},
		VortexAdapter -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Model[Container, Rack],
			Description -> "Model of a rack that can be used to hold a plate on a vortex.",
			Developer -> True,
			Category -> "Compatibility"
		},
		SequencingPlatePrimitives->{
			Format->Multiple,
			Class->Expression,
			Pattern:>SampleManipulationP,
			Description->"The set of instructions specifying the loading of ReadPlate with sequencing buffer.",
			Category->"Sample Post-Processing"
		},
		SequencingPlateManipulation->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Object[Protocol,SampleManipulation],
			Description->"The sample manipulation protocol generated as a result of the execution of SequencingPlatePrimitives, which is used to load ReadPlate with sequencing buffer.",
			Category->"Sample Loading"
		},
		SequencingBuffer->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Sample],Object[Sample]],
			Description->"The buffer used to resuspend DNA samples prior to loading in the genetic analyzer instrument. The buffer will also be used to fill empty wells that are needed to complete injection groups as a blank.",
			Category->"Sample Post-Processing"
			},
		SequencingBufferVolume->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Microliter],
			Units->Microliter,
			Description->"The volume of the buffer to be used to resuspend DNA samples prior to loading in the genetic analyzer instrument.",
			Category->"Sample Post-Processing"
			},
		  
		(*===Capillary Electrophoresis Separation===*)
		PlateSepta->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Item],Object[Item]],
			Description->"The partition covering the ReadPlate during the capillary electrophoresis run.",
			Category->"Sample Post-Processing"
		},
		Temperature->{
			Format->Single,
			Class->Real,
			Pattern:>GreaterEqualP[0 Kelvin],
			Units->Celsius,
			Description->"The nominal temperature the capillary array and samples are held at throughout the capillary electrophoresis experiment.",
			Category->"Separation"
			},
		DyeSets->{
			Format -> Multiple,
			Class->String,
			Pattern:>Alternatives["E_BigDye Terminator v1.1","Z_BigDye Terminator v3.1","Z_BigDye Direct"],
			Description -> "The set of dye terminator molecules used to terminate DNA chains, with different colors corresponding to the different nucleotides.",
			Category -> "Separation"
		},
		PrimeTimes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Second],
			Units->Second,
			Description->"For each member of SamplesIn, the length of time for which cathode buffer is drawn into the capillary array in order to prime the capillaries prior to the experiment beginning.",
			Category->"Separation",
			IndexMatching->SamplesIn
			},
		PrimeVoltages->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Volt],
			Units->Volt,
			Description->"For each member of SamplesIn, the voltage applied to the capillary array in order to prime the capillaries prior to the experiment beginning.",
			Category->"Separation",
			IndexMatching->SamplesIn
			},
		InjectionTimes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Second],
			Units->Second,
			Description->"For each member of SamplesIn, the length of time for which sample is drawn into the capillary array. A longer injection time will lead to an increase in the signal.",
			Category->"Separation",
			IndexMatching->SamplesIn
			},
		InjectionVoltages->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Volt],
			Units->Volt,
			Description->"For each member of SamplesIn, the voltage applied to the capillary array while the samples are being drawn into the capillaries.",
			Category->"Separation",
			IndexMatching->SamplesIn
			},
		RampTimes->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Second],
			Units->Second,
			Description->"For each member of SamplesIn, the length of time for which the voltage will ramp from the injection voltage to the run voltage.",
			Category->"Separation",
			IndexMatching->SamplesIn
			},
		RunVoltages->{
			Format->Multiple,
			Class->Real,
			Pattern:>GreaterEqualP[0 Volt],
			Units->Volt,
			Description->"For each member of SamplesIn, the voltage applied to the capillary array in order to prime the capillaries prior to the experiment beginning.",
			Category->"Separation",
			IndexMatching->SamplesIn
			},
		RunTimes-> {
			Format -> Multiple,
			Class -> Real,
			Pattern :> GreaterEqualP[0 Second],
			Units -> Second,
			Description -> "For each member of SamplesIn, the length of time for which the separation will occur.",
			Category -> "Separation",
			IndexMatching -> SamplesIn
		},
		CapillaryProtector->{
			Format->Single,
			Class->Link,
			Pattern:>_Link,
			Relation->Alternatives[Model[Item],Object[Item]],
			Description->"The covering containing a gel to protect the SequencingCartridge capillary array when being stored.",
			Category->"Sample Storage"
		},
		SequencingCartridgeStorageCondition->{
			Format->Single,
			Class->Expression,
			Pattern:>(SampleStorageTypeP|Disposal|ObjectP[Model[StorageCondition]]),
			Description->"The storage condition under which SequencingCartridge should be stored after its usage in the experiment.",
			Category->"Sample Storage"
		},
		PlateSeptaStorageCondition->{
			Format->Single,
			Class->Expression,
			Pattern:>(SampleStorageTypeP|Disposal|ObjectP[Model[StorageCondition]]),
			Description->"The storage condition under which PlateSepta should be stored after its usage in the experiment.",
			Category->"Sample Storage",
			Developer->True
		},
		BufferCartridgeStorageCondition->{
			Format->Single,
			Class->Expression,
			Pattern:>(SampleStorageTypeP|Disposal|ObjectP[Model[StorageCondition]]),
			Description->"The storage condition under which BufferCartridge should be stored after its usage in the experiment.",
			Category->"Sample Storage"
		}
	}
}];