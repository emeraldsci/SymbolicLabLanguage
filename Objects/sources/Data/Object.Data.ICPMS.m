

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)

DefineObjectType[Object[Data, ICPMS], {
	Description->"Analytical data captured for determining molecular weight of compounds by by ionizing them and measuring their mass-to-charge ratio.",
	CreatePrivileges->None,
	Cache->Session,
	Fields -> {
		(*TODO: choose a few approperiote Abstract fields *)
		IonSource -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> IonSourceP|ICP,
			Description -> "The type of ionization used to create gas phase ions from the molecules in the sample. Electrospray ionization (ESI) produces ions using an electrospray in which a high voltage is applied to a liquid to create an aerosol, and gas phase ions are formed from the fine spray of charged droplets as a result of solvent evaporation and Coulomb fission. In matrix-assisted laser desorption/ionization (MALDI), the sample is embedded in a laser energy absorbing matrix which is then irradiated with a pulsed laser, ablating and desorbing the molecules with minimal fragmentation and creating gas phase ions from the analyte molecules in the sample. For Inductively-coupled plasma (ICP), Sample particles are atomized and ionized by argon ion plasma, which is generated by passing radio-frequency current through an induction coil.",
			Category -> "General"
		},
		IonMode -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> IonModeP,
			Description -> "Indicates if positively or negatively charged ions are selected and analyzed.",
			Category -> "General"
		},
		MassAnalyzer -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> MassAnalyzerTypeP,
			Description -> "The component of the mass spectrometer that performs separation of ion according to its mass-to-charge ratio.",
			Category -> "General"
		},
		DateStarted -> {
			Format -> Single,
			Class -> Date,
			Pattern :> _?DateObjectQ,
			Description -> "The date and time acquisition of this sample starts.",
			Category -> "Organizational Information"
		},
		DateCompleted -> {
			Format -> Single,
			Class -> Date,
			Pattern :> _?DateObjectQ,
			Description -> "The date and time acquisition of this sample Completes.",
			Category -> "Organizational Information"
		},
		NumberOfReplicates ->{
			Format -> Single,
			Class -> Integer,
			Pattern :> GreaterEqualP[1],
			Description -> "The number of repeated acquisitions this sample has performed.",
			Category -> "Method Information"
		},
		MinMass -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[(0*Gram)/Mole],
			Units -> Gram/Mole,
			Description -> "The lowest recorded value of the range of measured mass-to-charge ratio (m/z) of this mass spectrometry data.",
			Category -> "Method Information"
		},
		MaxMass -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[(0*Gram)/Mole],
			Units -> Gram/Mole,
			Description -> "The highest recorded value of the range of measured mass-to-charge ratio (m/z) of this mass spectrometry data.",
			Category -> "Method Information"
		},
		(*TODO: change internal standard to spike, whereever it appears for field names and options*)
		SampleType -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> Alternatives[Sample, ExternalStandard, Blank, StandardAddedSample],
			Description -> "Indicate the type of sample that this data object is associated to. Blank is sample containing only media free of any Elements analytes, ExternalStandard is sample with known concentration of analyte that is being measured separately to construct calibration curve, SpikedSample refers to an unknown sample spiked with known amount of analytes, and Sample refers to unknown sample.",
			Category -> "General"
		},
		StandardType -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> Alternatives[External, StandardAddition, None],
			Description -> "Indicates for each sample what type of Standard was introduced. External is sample with known concentration of analyte that is being measured separately to construct calibration curve, Internal refers to an unknown sample spiked with known amount of analytes.",
			Category -> "Method Information"
		},
		(*Digestion Information*)
		Digestion -> {
			Format -> Single,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "Indicates whether digestion (the process of breaking down sample with heat, acid and oxidation agent to ensure it being fully soluble) was performed on this sample before ICP-MS measurement.",
			Category -> "Method Information"
		},
		DigestionProtocol -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Object[Protocol,MicrowaveDigestion],
			Description -> "The digestion protocol use to break down sample into soluble content ready for ICP-MS measurement.",
			Category -> "Method Information"
		},
		(*Initialization information*)
		WarmUpTime -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterEqualP[0 * Minute],
			Units -> Minute,
			Description -> "The amount of time after the plasma is lit and before validation test / first experiment.",
			Category -> "Method Information"
		},
		(* TODO: Add description on what validation tests do, and what to do if validation tests fail *)
		ValidationTestResult -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> Alternatives[Pass, Fail],
			Description -> "Indicates whether Instrument Validation test has passed.",
			Category -> "Method Information"
		},
		(*TODO: Add a field on individual validation test results*)
		(*Blank and Rinse parameters*)
		Blank -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[Object[Sample],Model[Sample]],
			Description -> "Solution containing zero analyte which generates the BlankData.",
			Category -> "Method Information"
		},
		(*TODO: refer to other rinse options *)
		Rinse -> {
			Format -> Single,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "Indicates if rinse was conducted between set number of sample measurements when this number reaches RinseInterval, with RinseSolution for duration of RinseTime.",
			Category -> "Method Information"
		},
		RinseInterval -> {
			Format -> Single,
			Class -> Integer,
			Pattern :> GreaterEqualP[1],
			Description -> "Indicate how many samples were run between two rinses.",
			Category -> "Method Information"
		},
		RinseSolution -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[Object[Sample],Model[Sample]],
			Description -> "Solution employed for rinsing inlet line between sample measurements.",
			Category -> "Method Information"
		},
		RinseTime -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterEqualP[0 Second],
			Units -> Second,
			Description -> "Indicates how long the RinseSolution is continuously injected into the instrument for each rinse.",
			Category -> "Method Information"
		},
		InjectionDuration -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 Second],
			Units -> Second,
			Description->"Indicates how long the input sample is continuously injected into the instrument for each measurement.",
			Category -> "Method Information"
		},
		InjectionPumpSpeed -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 RPM],
			Units -> RPM,
			Description->"Peristaltic pump speed for drawing the liquid sample into the injector during injection.",
			Category -> "Method Information"
		},
		(*TODO: describe what happens if this temperature is high or low. Find out why sample is chilled*)
		SprayChamberTemperature -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 Kelvin],
			Units -> Celsius,
			Description->"Temperature setting in the nebulizer spray chamber.",
			Category -> "Method Information"
		},
		NebulizerGasFlowRate -> {
			Format -> Single,
			Class -> Real,
			Pattern:>GreaterP[0 Liter/Minute],
			Units->Liter/Minute,
			Description->"Rate at which the Ar gas flows into the injector to deliver and aerosolize the input sample before the sample praticle encounters the auxillary argon gas.",
			Category -> "Method Information"
		},
		NebulizerGasPressure -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterEqualP[0 PSI],
			Units -> PSI,
			Description->"Instrument reading of nebulizer argon gas pressure during injection.",
			Category -> "Method Information"
		},
		AuxillaryGasFlowRate -> {
			Format -> Single,
			Class -> Real,
			Pattern:>GreaterP[0 Liter/Minute],
			Units->Liter/Minute,
			Description->"Rate at which the Ar gas flows into the injector to generate plasma.",
			Category -> "Method Information"
		},
		CoolGasFlowRate -> {
			Format -> Single,
			Class -> Real,
			Pattern:>GreaterP[0 Liter/Minute],
			Units->Liter/Minute,
			Description->"Rate at which the Ar gas flows into the outer jacket of the torch to cool it.",
			Category -> "Method Information"
		},
		(*Parameters for each element/isotope analyte, IndexMatched to Elements*)
		Elements -> {
			Format -> Multiple,
			Class -> Expression,
			Pattern :> ICPMSNucleusP,
			Description -> "Indicates the list of elements or isotopes being measured across all samples.",
			Category -> "Method Information",
			Abstract -> True
		},
		(*TODO: All IndexMatching fields should start from "For each member of ..."*)
		QuantifyConcentration -> {
			Format -> Multiple,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "For each member of Elements, indicates if the concentration of each element analyte is calculated from calibration curve.",
			IndexMatching -> Elements,
			Category -> "Method Information"
		},
		TorchPosition -> {
			Format -> Multiple,
			Class -> {Real, Real},
			Pattern :> {DistanceP, DistanceP},
			Units -> {Millimeter, Millimeter},
			Description -> "For each member of Elements, indicates the position of the torch relative to its homing position as calibrated by the instrument, where {0, 0} is the homing position.",
			Category -> "Method Information",
			IndexMatching -> Elements,
			Headers -> {"Horizontal Position", "Vertical Position"}
		},
		ConeDiameter -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0*Millimeter],
			Units -> Millimeter,
			Description -> "Indicates diameter of the vacuum interface cone. Higher cone diameter should be used for higher matrix content.",
			Category -> "Method Information"
		},
		Cone -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[Model[Item], Object[Item]],
			Description -> "Indicates the vacuum interface cone.",
			Category -> "Method Information"
		},
		NominalPlasmaPower -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 Watt],
			Units -> Watt,
			Description->"For each member of Elements, Electric power of the coil generating the Ar-ion plasma flowing through the torch set by the user.",
			Category -> "Method Information"
		},
		PlasmaPower -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 Watt],
			Units -> Watt,
			Description->"For each member of Elements, Actual measured electric power of the coil generating the Ar-ion plasma flowing through the torch read from the instrument.",
			Category -> "Method Information"
		},
		ExtractionLensVoltage -> {
			Format -> Single,
			Class -> Real,
			Pattern :> VoltageP,
			Units -> Volt,
			Description -> "For each member of Elements, Voltage applied on ion lens to defract the beam and separate ionized particles from neutral ones, where the neutral ones collide on wall, while ionized particles continues into the instrument flow path. This concept is analogous to the step wave guide in QTOF.",
			Category -> "Mass Analysis"
		},
		FocusLensVoltage -> {
			Format -> Single,
			Class -> Real,
			Pattern :> VoltageP,
			Units -> Volt,
			Description -> "For each member of Elements, Voltage applied on ion lens to tighten the ionized particle beam.",
			Category -> "Mass Analysis"
		},
		CollisionCellPressurization -> {
			Format -> Single,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "For each member of Elements, Indicates if gas is allowed to enter the collision cell to enable collision or reaction between the CollisionCellGas and sample ions, in preparation for Kinetic Energy Discrimination (KED).",
			Category -> "Method Information"
		},
		CollisionCellGas -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> Alternatives[Helium, Oxygen],
			Description -> "For each member of Elements, Indicates what type of gas is released into the collision cell to enable collision or reaction between the CollisionCellGas and sample ions, in preparation for Kinetic Energy Discrimination (KED).",
			Category -> "Method Information"
		},
		CollisionCellGasFlowRate -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterEqualP[(0*Milliliter)/Minute],
			Units -> Milliliter / Minute,
			Description -> "For each member of Elements, The rate of CollisionCellGas flowing into the collision cell.",
			Category -> "Method Information"
		},
		CollisionCellBias -> {
			Format -> Single,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "For each member of Elements, Indicate if quadrupole in the collision cell is switched on or not. The quadrupole voltage in the collision cell is turned on to enable Kinetic Energy Discrimination (KED), which repels polyatomic ions slowed down by the CollisionCellGas.",
			Category -> "Method Information"
		},
		CollisionCellBiasVoltage -> {
			Format -> Single,
			Class -> Real,
			Pattern :> VoltageP,
			Units -> Volt,
			Description -> "For each member of Elements, The quadrupole voltage in the collision cell for Kinetic Energy Discrimination (KED).",
			Category -> "Mass Analysis"
		},
		CollisionCellLensVoltage -> {
			Format -> Single,
			Class -> Real,
			Pattern :> VoltageP,
			Units -> Volt,
			Description -> "For each member of Elements, Voltage applied in the collision cell to focus ionized sample particles.",
			Category -> "Mass Analysis"
		},
		QuadrupoleBiasVoltage -> {
			Format -> Single,
			Class -> Real,
			Pattern :> VoltageP,
			Units -> Volt,
			Description -> "For each member of Elements, The DC voltage in the quadrupole mass analyzer used to select ions of the target m/z ratio matching the Elements field.",
			Category -> "Mass Analysis"
		},
		(*TODO: Find out how the dwell time is handled: is it integrated or averaged?*)
		DwellTime -> {
			Format -> Multiple,
			Class -> Real,
			Pattern :> GreaterP[0 Second],
			Units -> Millisecond,
			Description -> "For each member of Elements, Time spent to measure a single Analyte of a single sample.",
			IndexMatching -> Elements,
			Category -> "Method Information"
		},
		ReadSpacing -> {
			Format -> Multiple,
			Class -> Real,
			Pattern :> GreaterP[0 Gram / Mole],
			Units -> Gram / Mole,
			Description -> "For each member of Elements, Distance of mass units around the center mass between each adjacent redundant reading.",
			IndexMatching -> Elements,
			Category -> "Method Information"
		},
		NumberOfReads -> {
			Format -> Multiple,
			Class -> Integer,
			Pattern :> GreaterEqualP[1],
			Description->"For each member of Elements, Number of redundant readings by the instrument on each side the target mass, see Figure X2.",
			IndexMatching -> Elements,
			Category -> "Method Information"
		},
		(*TODO: Change the experiment options for Bandpass to select numbers*)
		Bandpass -> {
			Format -> Multiple,
			Class -> Real,
			Pattern :> GreaterP[0 Gram/Mole],
			Units -> Gram/Mole,
			Description->"For each member of Elements, The bandwidth of allowed m/z ratio for each reading by the quadrupole at 10% peak height. A higher resolution can better differentiate some isotopes, with a trade-off of reduced signal level.",
			IndexMatching -> Elements,
			Category -> "Method Information"
		},
		QuantifyIsotope -> {
			Format -> Single,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "Indicates if only concentration of isotopes should be quantified, or concentration of elements should also be quantified.",
			Category -> "Method Information"
		},
		(*Parameters specifically for external standard*)
		(*TODO: Make the following two fields into NamedMultiple table, like InjectionTable in HPLC*)
		(* Element, concentration, Standard sample, dilution curve, Diluted Standard sample, Data *)
		ExternalStandard -> {
			Format -> Multiple,
			Class -> {
				PreDilutionSample -> Link,
				StandardVolume -> Real,
				BlankVolume -> Real,
				Label -> String,
				Sample -> Link,
				Data -> Link
			},
			Pattern :> {
				PreDilutionSample -> ObjectP[{Object[Sample], Model[Sample]}],
				StandardVolume -> VolumeP,
				BlankVolume -> VolumeP,
				Label -> _String,
				Sample -> ObjectP[{Object[Sample], Model[Sample]}],
				Data -> _Link
			},
			Relation -> {
				PreDilutionSample -> Alternatives[Object[Sample], Model[Sample]],
				StandardVolume -> Null,
				BlankVolume -> Null,
				Label -> Null,
				Sample -> Alternatives[Object[Sample], Model[Sample]],
				Data -> Object[Data, ICPMS]
			},
			Units -> {
				PreDilutionSample -> None,
				StandardVolume -> Milliliter,
				BlankVolume -> Milliliter,
				Label -> None,
				Sample -> None,
				Data -> None
			},
			Description -> "The list of standard that is employed as external standard for ICPMS measurements. Identical standard diluted by different ratio were counted as different ones.",
			Category -> "Method Information"
		},
		ExternalStandardElements -> {
			Format -> Multiple,
			Class -> {
				Element -> Expression,
				Sample -> Link,
				Label -> String,
				Concentration -> Real
			},
			Pattern :> {
				Element -> ICPMSNucleusP,
				Sample -> _Link,
				Label -> _String,
				Concentration -> MassConcentrationP
			},
			Relation -> {
				Element -> Null,
				Sample -> Alternatives[Object[Sample], Model[Sample]],
				Label -> Null,
				Concentration -> Null
			},
			Units -> {
				Element -> None,
				Sample -> None,
				Label -> None,
				Concentration -> Milligram/Liter
			},
			Description -> "The list of elements/isotopes and their concentrations in the external standard, after dilution.",
			Category -> "Method Information"
		},
		(*TODO: Make the following two fields into NamedMultiple table, like InjectionTable in HPLC*)
		(* Element, concentration, Standard sample, dilution curve, Diluted Standard sample, Data *)
		(*Parameters specifically for standard addition*)
		AdditionStandard -> {
			Format -> Single,
			Class -> {Link, Real},
			Pattern :> {_Link, GreaterEqualP[0]},
			Relation -> {Alternatives[Object[Sample], Model[Sample]], Null},
			Units -> {None, None},
			Description -> "AdditionStandard that is added into this input sample, and the mixing ratio.",
			Category -> "Method Information",
			Headers -> {"Addition Standard", "standard : sample ratio"}
		},
		StandardAdditionElements -> {
			Format -> Multiple,
			Class -> {
				Elements -> Expression,
				Concentration -> Real
			},
			Pattern :> {
				Elements -> ICPMSNucleusP,
				Concentration -> MassConcentrationP
			},
			Units -> {
				Elements -> Null,
				Concentration -> Milligram/Liter
			},
			Description -> "The isotopes and their concentrations that is been added into the sample via standard addition. Concentrations indicate the values after mixing.",
			Category -> "Method Information"
		},
		StandardSpikedSamples -> {
			Format -> Multiple,
			Class -> {
				AdditionStandard -> Link,
				PreDilutionSample -> Link,
				StandardVolume -> Real,
				SampleVolume -> Real,
				BlankVolume -> Real,
				Sample -> Link,
				Label -> String,
				Data -> Link
			},
			Pattern :> {
				AdditionStandard -> _Link,
				PreDilutionSample -> _Link,
				StandardVolume -> VolumeP,
				SampleVolume -> VolumeP,
				BlankVolume -> VolumeP,
				Sample -> _Link,
				Label -> _String,
				Data -> _Link
			},
			Relation -> {
				AdditionStandard -> Alternatives[Object[Sample], Model[Sample]],
				PreDilutionSample -> Alternatives[Object[Sample], Model[Sample]],
				StandardVolume -> Null,
				SampleVolume -> Null,
				BlankVolume -> Null,
				Sample -> Alternatives[Object[Sample], Model[Sample]],
				Label -> Null,
				Data -> Object[Data, ICPMS]
			},
			Units -> {
				AdditionStandard -> None,
				PreDilutionSample -> None,
				StandardVolume -> Milliliter,
				SampleVolume -> Milliliter,
				BlankVolume -> Milliliter,
				Sample -> None,
				Label -> None,
				Data -> None
			},
			Description -> "The list of standard added samples from the same experiment.",
			Category -> "Method Information"
		},
		InternalStandard -> {
			Format -> Single,
			Class -> {Link, Real},
			Pattern :> {_Link, GreaterEqualP[0]},
			Relation -> {Alternatives[Object[Sample], Model[Sample]], Null},
			Units -> {None, None},
			Description -> "Internal standard that is added into the sample to compensate for detector drift.",
			Category -> "Method Information",
			Headers -> {"Internal Standard", "Standard : Sample ratio"}
		},
		InternalStandardElement -> {
			Format -> Multiple,
			Class -> {
				Element -> Expression,
				Intensity -> Real
			},
			Pattern :> {
				Element -> ICPMSNucleusP,
				Intensity -> GreaterEqualP[0]
			},
			Description -> "The list of isotopes used as internal standard and its measured raw intensity from ICPMS spectrometer.",
			Category -> "Method Information"
		},
		(*Experiment Data*)
		MassSpectrum -> {
			Format -> Single,
			Class -> QuantityArray,
			Pattern :> QuantityCoordinatesP[{Gram/Mole,ArbitraryUnit}],
			Units -> {Gram/Mole, ArbitraryUnit},
			Description -> "Spectrum of observed mass-to-charge (m/z) ratio vs peak intensity for the input sample.",
			Category -> "Experimental Results",
			Abstract -> True
		},
		Intensity -> {
			Format -> Multiple,
			Class -> Real,
			Pattern :> _?NumericQ,
			Units -> None,
			IndexMatching -> Elements,
			Description -> "For each member of Elements, indicate the intensity measured by instrument, corrected with Blank and InternalStandard.",
			Category -> "Experimental Results"
		},
		IsotopeConcentration -> {
			Format -> Multiple,
			Class -> Real,
			Pattern :> MassConcentrationP,
			Units -> Milligram/Liter,
			IndexMatching -> Elements,
			Description -> "For each member of Elements, For unknown sample, indicates concentration calculated by instrument from standard and blank data. For standards, indicates the known concentration.",
			Category -> "Experimental Results"
		},
		ElementConcentrations -> {
			Format -> Multiple,
			Class -> {Expression, Real},
			Pattern :> {ICPMSElementP, MassConcentrationP},
			Units -> {None, Milligram / Liter},
			Description -> "For each Elements, For unknown sample, indicates concentration calculated by instrument from standard and blank data. For standards, indicates the known concentration.",
			Category -> "Experimental Results",
			Headers -> {"Element", "Concentration"}
		},
		(*TODO: Add Standard curve data, analyte data, and link them together*)
		(*TODO: Confirm how the field reference should be written*)
		AnalyteData -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[Object[Data, ICPMS][StandardData], Object[Data, ICPMS][BlankData], Object[Data, ICPMS][SpikedDataSeries]],
			Description -> "Analyte spectra that this standard was used to quantify.",
			Category -> "Analysis & Reports"
		},
		StandardData -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :>_Link,
			Relation -> Alternatives[Object[Data, ICPMS][AnalyteData], Object[Data, ICPMS][BlankData]],
			Description -> "Spectra of the element/isotope of standards that is used for quantification of this analyte.",
			Category -> "Analysis & Reports"
		},
		SpikedDataSeries -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[Object[Data, ICPMS][AnalyteData], Object[Data, ICPMS][SpikedDataSeries], Object[Data, ICPMS][BlankData]],
			Description -> "Data of all of the spiked samples in the series of standard-added samples.",
			Category -> "Analysis & Reports"
		},
		BlankData -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[Object[Data, ICPMS][AnalyteData], Object[Data, ICPMS][StandardData], Object[Data, ICPMS][SpikedDataSeries]],
			Description -> "Data of any Blanks run along with the sample to measure the baseline.",
			Category -> "Analysis & Reports"
		},
		CalibrationCurveResults -> {
			Format -> Multiple,
			Class -> {Expression, Real, Real, Real, Real},
			Pattern :> {Alternatives[ICPMSElementP, ICPMSNucleusP], _?NumberQ, _?NumberQ, _?NumberQ, _?NumberQ},
			IndexMatching -> Elements,
			Units -> {None, None, None, None, None},
			Description -> "For each member of Elements, links to the most recently performed calibration curve of each isotope / element analytes based on standard and blank.",
			Category -> "Analysis & Reports",
			Headers -> {"Element/Isotope","Quadratic coefficient", "linear coefficient", "Interception", "R-Squared"}
		},
		AnalyteCalibrationCurves -> {
			Format -> Multiple,
			Class -> {Expression, Real, Real, Real, Real},
			Pattern :> {Alternatives[ICPMSElementP, ICPMSNucleusP], _?NumberQ, _?NumberQ, _?NumberQ, _?NumberQ},
			IndexMatching -> Elements,
			Units -> {None, None, None, None, None},
			Description -> "For each member of Elements, links to the most recently performed calibration curve of each isotope / element analytes based on standard and blank.",
			Category -> "Analysis & Reports",
			Headers -> {"Element/Isotope","Quadratic coefficient", "linear coefficient", "Interception", "R-Squared"}
		},
		(*TODO: Make another field that Analysis backfeed the fitting result*)

		(*Analysis Part*)
		MassSpectrumPeaksAnalyses -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Object[Analysis][Reference],
			Description -> "Peak picking analysis conducted on this spectra.",
			Category -> "Analysis & Reports"
		},
		RawDataFile -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Object[EmeraldCloudFile],
			Description -> "The raw data (in .imexp format) pertaining to the ICP-MS measurement of all SamplesIn zipped into one directory.",
			Category -> "Experimental Results"
		},
		PerformanceTestResults -> {
			Format -> Multiple,
			Class -> {String, Real, Real, Real, Boolean},
			Pattern :> {_String, _?NumberQ, _?NumberQ, _?NumberQ, BooleanP},
			Headers -> {"Test item", "measured value", "Min allowed value", "Max allowed value", "Passing"},
			Description -> "The result of the tuning and mass calibration before data acquisition.",
			Category -> "Analysis & Reports"
		}
		(*TODO: When get to parser, fill in DataFile*)
	}
}];
