
(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)

(* ::Package:: *)

DefineObjectType[Object[Inventory], {
	Description->"An object representing instructions for keeping products or stock solutions in stock.",
	CreatePrivileges->None,
	Cache->Session,
	Fields -> {
		DeveloperObject -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> BooleanP,
			Description -> "Indicates that this object is being used for test purposes only and is not supported by standard SLL features.",
			Category -> "Organizational Information",
			Developer -> True
		},
		StockedInventory -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[
				Object[Product][Inventories],
				(* maybe these should just be Model[Sample]? *)
				Model[Sample, StockSolution][Inventories],
				Model[Sample, Matrix][Inventories],
				Model[Sample, Media][Inventories]
			],
			Description -> "The products or models that automatically reordered by this inventory object if amounts are below the specified thresholds.",
			Category -> "Inventory"
		},
		Status -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> Active | Inactive, (* we could call this InventoryStatusP, but Active|Inactive is broad enough that it seems odd to call it that when other things could use that eventually too *)
			Description -> "Indicates if this inventory object is currently actively keeping samples in stock.",
			Category -> "Inventory"
		},
		Author -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Object[User],
			Description -> "The user who generated this inventory entry.",
			Category -> "Organizational Information"
		},
		HistoricalRestockings -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[
				Object[Transaction, Order],
				Object[Protocol]
			],
			Description -> "All protocols or orders that have been automatically generated by this inventory object.",
			Category -> "Inventory"
		},
		OutstandingRestockings -> {
			Format -> Multiple,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Alternatives[
				Object[Transaction, Order],
				Object[Protocol]
			],
			Description -> "All protocols or orders that have been automatically generated by this inventory object that have not yet been completed or received.",
			Category -> "Inventory"
		},
		Site -> {
			Format -> Single,
			Class -> Link,
			Pattern :> _Link,
			Relation -> Object[Container,Site],
			Description -> "The ECL site at which this inventory automatically keeps samples in stock.",
			Category -> "Organizational Information",
			Abstract -> True
		},
		StockingMethod -> {
			Format -> Single,
			Class -> Expression,
			Pattern :> NumberOfStockedContainers | TotalAmount,
			Description -> "Indicates if this inventory keeps track of how much to keep in stock in the lab by the number of currently-stocked containers or the total amount of the model stocked.",
			Category -> "Inventory"
		},
		CurrentAmount -> {
			Format -> Single,
			Class -> VariableUnit,
			Pattern :> GreaterEqualP[0 Gram]|GreaterEqualP[0 Milliliter]|GreaterEqualP[0 Unit, 1 Unit],
			Description -> "The amount of sample currently in stock in the lab that has not already been requested by a confirmed or running protocol.",
			Category -> "Inventory"
		},
		ReorderThreshold -> {
			Format -> Single,
			Class -> VariableUnit,
			Pattern :> GreaterEqualP[0 Gram]|GreaterEqualP[0 Milliliter]|GreaterEqualP[0 Unit, 1 Unit],
			Description -> "Indicates the point below which CurrentAmount + OutstandingAmount must fall for a new order to be triggered.",
			Category -> "Inventory"
		},
		OutstandingAmount -> {
			Format -> Single,
			Class -> VariableUnit,
			Pattern :> GreaterEqualP[0 Gram]|GreaterEqualP[0 Milliliter]|GreaterEqualP[0 Unit, 1 Unit],
			Description -> "The amount of sample that has been ordered but has not yet been received and made available in the lab.",
			Category -> "Inventory"
		},
		ReorderAmount -> {
			Format -> Single,
			Class -> VariableUnit,
			Pattern :> GreaterEqualP[0 Gram]|GreaterEqualP[0 Milliliter]|GreaterEqualP[0 Unit, 1 Unit],
			Description -> "Indicates the amount that will be automatically ordered if CurrentAmount + OutstandingAmount falls below ReorderThreshold. If StockingMethod -> NumberOfStockedContainers and this is a StockSolution, the number of stock solution to prepare using the stock solution's formula volume.",
			Category -> "Inventory"
		},
		Expires -> {
			Format -> Single,
			Class -> Boolean,
			Pattern :> BooleanP,
			Description -> "Indicates if samples kept in stock by this inventory expire after a given amount of time.",
			Category -> "Storage Information"
		},
		ShelfLife -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 * Day],
			Units -> Day,
			Description -> "The length of time after arrival that samples kept in stock by this inventory are recommended for use before they should be discarded.",
			Category -> "Storage Information"
		},
		UnsealedShelfLife -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0 * Day],
			Units -> Day,
			Description -> "The length of time after opening that samples kept in stock by this inventory are recommended for use before they should be discarded.",
			Category -> "Storage Information"
		},
		MaxNumberOfUses -> {
			Format -> Single,
			Class -> Integer,
			Pattern :> GreaterEqualP[0, 1],
			Description -> "The number of times the items kept in stock by this inventory can be used before needing to be discarded and/or replaced.",
			Category -> "Operating Limits"
		},
		MaxNumberOfHours -> {
			Format -> Single,
			Class -> Real,
			Pattern :> GreaterP[0*Hour],
			Units -> Hour,
			Description -> "The length of time for which the items kept in stock by this inventory can be actively used before needing to be discarded and/or replaced.",
			Category -> "Operating Limits"
		}
	}
}];
