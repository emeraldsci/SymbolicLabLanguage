(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Title:: *)
(*ExperimentMeasureContactAngle: Tests*)


(* ::Section:: *)
(*Unit Testing*)


(* ::Subsection::Closed:: *)
(*ExperimentMeasureContactAngle*)


DefineTests[ExperimentMeasureContactAngle,
	{
		(* Basic test *)
		Example[
			{Basic,"ExperimentMeasureContactAngle function returns an Object[Protocol,MeasureContactAngle]:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Output->Result
			],
			ObjectP[Object[Protocol,MeasureContactAngle]]
		],
		Example[
			{Basic,"The function can take multiple fiber samples and wetting liquids:"},
			ExperimentMeasureContactAngle[
				{
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
				},
				{
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
				},
				Upload->False
			],
			{PacketP[] ..}
		],
		(* Container overload *)

		(* Option Unit Tests generated by MakeOptionTests[] *)
		(* Specifying Options *)
		Example[
			{Options,Instrument,"Specify the instrument that should be used to measure the contact angle between fiber and liquid samples:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Instrument->Model[Instrument,Tensiometer,"Kruss K100SF Force Tensiometer"],
					Output->Options
				],
				Instrument
			],
			ObjectP[Model[Instrument,Tensiometer,"Kruss K100SF Force Tensiometer"]]
		],
		Example[
			{Options,NumberOfReplicates,"Specify number of times that the sample stage is raised and lowered such that the advancing contact angle is measured when raising and receding contact angle is measured when lowering:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					NumberOfReplicates->2,
					Output->Options
				],
				NumberOfReplicates
			],
			2
		],
		Example[
			{Options,NumberOfCycles,"Specify number of times that the sample stage is raised and lowered such that the advancing contact angle is measured when raising and receding contact angle is measured when lowering:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					NumberOfCycles->3,
					Output->Options
				],
				NumberOfCycles
			],
			3
		],
		Example[
			{Options,ContactDetectionSpeed,"Specify the speed at which the sample stage is moved prior to contact between the sample and fiber until contact is made:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ContactDetectionSpeed->6 Millimeter/Minute,
					Output->Options
				],
				ContactDetectionSpeed
			],
			6 Millimeter/Minute
		],
		Example[
			{Options,ContactDetectionSensitivity,"Specify the minimum change of the value measured by the sensor which should be interpreted as contact between the fiber and liquid samples.	The larger the value entered, the lower the sensitivity, and vice versa. Too high a value can lead to the surface not being detected. Too low a value can lead to changes in the measured value being incorrectly interpreted as contact with the surface:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ContactDetectionSensitivity->0.01` Gram,
					Output->Options
				],
				ContactDetectionSensitivity
			],
			0.01` Gram
		],
		Example[
			{Options,MeasuringSpeed,"Specify the speed at which the sample stage is moved up and down after contact between fiber and sample during a cycle.	Increasing the measuring speed by too much will decrease the accuracy of the measurement:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					MeasuringSpeed->6 Millimeter/Minute,
					Output->Options
				],
				MeasuringSpeed
			],
			6 Millimeter/Minute
		],
		Example[
			{Options,AcquisitionStep,"Specify the distance the sample stage moves between each contact angle measurement. Decreasing this option increases the number of readings per length of sample:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					AcquisitionStep->0.2 Millimeter,
					Output->Options
				],
				AcquisitionStep
			],
			0.2 Millimeter
		],
		Example[
			{Options,EndImmersionDepth,"Specify maximum immersion depth of the solid when measuring the advancing contact angle:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					EndImmersionDepth->5 Millimeter,
					Output->Options
				],
				EndImmersionDepth
			],
			5 Millimeter
		],
		Example[
			{Options,StartImmersionDepth,"Specify minimum immersion depth of the solid when measuring the advancing contact angle:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					StartImmersionDepth->1 Millimeter,
					Output->Options
				],
				StartImmersionDepth
			],
			1 Millimeter
		],
		Example[
			{Options,EndImmersionDelay,"Specify awaiting time after sample stage reaches the position of EndImmersionDepth and before it moves down:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					EndImmersionDelay->1 Second,
					Output->Options
				],
				EndImmersionDelay
			],
			1 Second
		],
		Example[
			{Options,StartImmersionDelay,"Specify awaiting time after sample stage reaches the position of StartImmersionDepth and before it moves up again for the next cycle:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					StartImmersionDelay->1 Second,
					Output->Options
				],
				StartImmersionDelay
			],
			1 Second
		],
		Example[
			{Options,Temperature,"Specify the temperature of thermal jacket controlled by an external recirculating bath:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Temperature->25 Celsius,
					Output->Options
				],
				Temperature
			],
			25 Celsius
		],
		Example[
			{Options,Volume,"Specify the amount of wetting liquid to use:"},
			Lookup[
				Quiet[ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Volume->30 Milliliter,
					Output->Options
				],Warning::SampleMustBeMoved],
				Volume
			],
			30 Milliliter
		],
		Example[
			{Options,ImmersionContainer,"Specify the container that holds the wetting liquid into which the fiber is immersed:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ImmersionContainer->Model[Container,Vessel,"Kruss SV20 glass sample vessel"],
					Output->Options
				],
				ImmersionContainer
			],
			ObjectP[Model[Container,Vessel,"Kruss SV20 glass sample vessel"]]
		],
		Example[
			{Options,WettedLengthMeasurement,"Specify indicate if a Wetted Length measurement needs to be done first:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					WettedLengthMeasurement->False,
					Output->Options
				],
				WettedLengthMeasurement
			],
			False
		],
		(* Automatically resolved Options *)
		Example[
			{Options,Instrument,"Not specify the instrument that should be used to measure the contact angle between fiber and liquid samples:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Output->Options
				],
				Instrument
			],
			ObjectP[Model[Instrument,Tensiometer,"Kruss K100SF Force Tensiometer"]]
		],
		Example[
			{Options,NumberOfCycles,"Not specify number of times that the sample stage is raised and lowered such that the advancing contact angle is measured when raising and receding contact angle is measured when lowering:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					NumberOfCycles->Automatic,
					Output->Options
				],
				NumberOfCycles
			],
			1
		],
		Example[
			{Options,ContactDetectionSpeed,"Not specify the speed at which the sample stage is moved prior to contact between the sample and fiber until contact is made:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ContactDetectionSpeed->Automatic,
					Output->Options
				],
				ContactDetectionSpeed
			],
			6 Millimeter/Minute
		],
		Example[
			{Options,ContactDetectionSensitivity,"Not specify the minimum change of the value measured by the sensor which should be interpreted as contact between the fiber and liquid samples.	The larger the value entered, the lower the sensitivity, and vice versa. Too high a value can lead to the surface not being detected. Too low a value can lead to changes in the measured value being incorrectly interpreted as contact with the surface:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ContactDetectionSensitivity->Automatic,
					Output->Options
				],
				ContactDetectionSensitivity
			],
			0.0001` Gram
		],
		Example[
			{Options,MeasuringSpeed,"Not specify the speed at which the sample stage is moved up and down after contact between fiber and sample during a cycle.	Increasing the measuring speed by too much will decrease the accuracy of the measurement:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					MeasuringSpeed->Automatic,
					Output->Options
				],
				MeasuringSpeed
			],
			3 Millimeter/Minute
		],
		Example[
			{Options,AcquisitionStep,"Not specify the distance the sample stage moves between each contact angle measurement. Decreasing this option increases the number of readings per length of sample:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					AcquisitionStep->Automatic,
					Output->Options
				],
				AcquisitionStep
			],
			0.2 Millimeter
		],
		Example[
			{Options,EndImmersionDepth,"Not specify maximum immersion depth of the solid when measuring the advancing contact angle:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					EndImmersionDepth->Automatic,
					Output->Options
				],
				EndImmersionDepth
			],
			5.` Millimeter
		],
		Example[
			{Options,StartImmersionDepth,"Not specify minimum immersion depth of the solid when measuring the advancing contact angle:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					StartImmersionDepth->Automatic,
					Output->Options
				],
				StartImmersionDepth
			],
			1 Millimeter
		],
		Example[
			{Options,EndImmersionDelay,"Not specify awaiting time after sample stage reaches the position of EndImmersionDepth and before it moves down:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					EndImmersionDelay->Automatic,
					Output->Options
				],
				EndImmersionDelay
			],
			1 Second
		],
		Example[
			{Options,StartImmersionDelay,"Not specify awaiting time after sample stage reaches the position of StartImmersionDepth and before it moves up again for the next cycle:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					StartImmersionDelay->Automatic,
					Output->Options
				],
				StartImmersionDelay
			],
			1 Second
		],
		Example[
			{Options,Temperature,"Not specify the temperature of thermal jacket controlled by an external recirculating bath:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Output->Options
				],
				Temperature
			],
			25 Celsius
		],
		Example[
			{Options,Volume,"Not specify the amount of wetting liquid to use:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Volume->Automatic,
					Output->Options
				],
				Volume
			],
			87 Milliliter
		],
		Example[
			{Options,ImmersionContainer,"Not specify the container that holds the wetting liquid into which the fiber is immersed:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ImmersionContainer->Automatic,
					Output->Options
				],
				ImmersionContainer
			],
			ObjectP[Model[Container,Vessel]]
		],
		Example[
			{Options,WettedLengthMeasurement,"Not specify indicate if a Wetted Length measurement needs to be done first:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					WettedLengthMeasurement->Automatic,
					Output->Options
				],
				WettedLengthMeasurement
			],
			False
		],
		Example[
			{Options,WettedLengthMeasurement,"If the FiberCircumference of fiber sample is unknown, Wetted Length measurement needs to be done first.:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					WettedLengthMeasurement->Automatic,
					Output->Options
				],
				WettedLengthMeasurement
			],
			True
		],
		(*  *)
		Example[
			{Options,PreparatoryUnitOperations,"Specify specifies a sequence of transferring, aliquoting, consolidating, or mixing of new or existing samples before the main experiment. These prepared samples can be used in the main experiment by referencing their defined name. For more information, please reference the documentation for ExperimentSampleManipulation:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					PreparatoryUnitOperations->Null,
					Output->Options
				],
				PreparatoryUnitOperations
			],
			Null
		],
		Example[
			{Options,PreparatoryPrimitives,"Specify specifies a sequence of transferring, aliquoting, consolidating, or mixing of new or existing samples before the main experiment. These prepared samples can be used in the main experiment by referencing their defined name. For more information, please reference the documentation for ExperimentSampleManipulation:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					PreparatoryPrimitives->Null,
					Output->Options
				],
				PreparatoryPrimitives
			],
			Null
		],
		Example[
			{Options,Template,"Specify a template protocol whose methodology should be reproduced in running this experiment. Option values will be inherited from the template protocol, but can be individually overridden by directly specifying values for those options to this Experiment function:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Template->Null,
					Output->Options
				],
				Template
			],
			Null
		],
		Example[
			{Options,FastTrack,"Specify indicates if validity checks on the provided input and options should be skipped for faster performance:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					FastTrack->False,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,FastTrack],
			False,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,ParentProtocol,"Specify the protocol which is directly generating this experiment during execution:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ParentProtocol->Null,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,ParentProtocol],
			Null,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,Operator,"Specify specifies the operator or model of operator who may run this protocol. If Null, any operator may run this protocol:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Operator->Model[User,Emerald,Operator,"Level 1"],
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,Operator],
			ObjectP[Model[User,Emerald,Operator]],
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,Interruptible,"Specify indicates if this protocol can be temporarily put on hold while the operator of this protocol is assigned to another priority protocol:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Interruptible->True,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,Interruptible],
			True,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,Confirm,"Specify indicates if the protocols generated should be confirmed for execution immediately upon creation and skip the InCart status:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Confirm->False,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,Confirm],
			False,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,Name,"Specify a object name which should be used to refer to the output object in lieu of an automatically generated ID number:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Name->"Test MeasureContactAngle",
					Output->Options
				],
				Name
			],
			"Test MeasureContactAngle"
		],
		Example[
			{Options,Output,"Return a list of resolved options for the given samples when Output->Options:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Output->Options
			],
			{_Rule..}
		],
		Example[
			{Options,Output,"Return a list of tests for the given samples when Output->Tests:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Output->Tests
			],
			{_EmeraldTest..}
		],
		Example[{Options,Output,"Create a simulation protocol for the given samples when Output->Simulation:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Output->Simulation
			],
			SimulationP
		],
		(* Hidden Options *)
		Example[
			{Options,Email,"Specify indicates if emails should be sent for any notifications relevant to the function's output:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Email->False,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,Email],
			False,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,HoldOrder,"Specify indicates if the queue position of this protocol should be strictly enforced, regardless of the available resources in the lab:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					HoldOrder->False,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,HoldOrder],
			False,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,Priority,"Specify indicates if (for an additional cost) this protocol will have first rights to shared lab resources before any standard protocols:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Priority->False,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,Priority],
			False,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,StartDate,"Specify the date at which the protocol will be targeted to start running in the lab. If StartDate->Null, the protocol will start as soon as possible:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					StartDate->Null,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,StartDate],
			Null,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,QueuePosition,"Specify the position that this protocol will be inserted in the Financing Team's experiment queue:"},
			resolvedOptions=Lookup[First[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					QueuePosition->Last,
					Upload->False
				]],
				ResolvedOptions
			];
			Lookup[resolvedOptions,QueuePosition],
			Last,
			Variables:>{resolvedOptions}
		],
		Example[
			{Options,MeasureWeight,"Specify indicates if any solid samples that are modified in the course of the experiment should have their weights measured and updated after running the experiment. Please note that public samples are weighed regardless of the value of this option:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					MeasureWeight->Automatic,
					Output->Options
				],
				MeasureWeight
			],
			True
		],
		Example[
			{Options,MeasureVolume,"Specify indicates if any liquid samples that are modified in the course of the experiment should have their volumes measured and updated after running the experiment. Please note that public samples are volume measured regardless of the value of this option:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					MeasureVolume->Automatic,
					Output->Options
				],
				MeasureVolume
			],
			True
		],
		Example[
			{Options,ImageSample,"Specify indicates if any samples that are modified in the course of the experiment should be freshly imaged after running the experiment. Please note that public samples are imaged regardless of the value of this option:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					ImageSample->Automatic,
					Output->Options
				],
				ImageSample
			],
			True
		],
		Example[
			{Options,Preparation,"Specify indicates if this unit operation is carried out primarily robotically or manually. Manual unit operations are executed by a laboratory operator and robotic unit operations are executed by a liquid handling work cell:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Preparation->Automatic,
					Output->Options
				],
				Preparation
			],
			Manual
		],
		Example[
			{Options,SamplesInStorageCondition,"Specify the non-default conditions under which the SamplesIn of this experiment should be stored after the protocol is completed. If left unset, SamplesIn will be stored according to their current StorageCondition:"},
			Lookup[
				ExperimentMeasureContactAngle[
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
					SamplesInStorageCondition->Null,
					Output->Options
				],
				SamplesInStorageCondition
			],
			Null
		],
		(* Messages *)
		Example[{Messages,"IncompatibleSample","The fiber sample input must be a solid fiber:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
			],
			$Failed,
			Messages:>{Error::IncompatibleSample,Error::InvalidInput}
		],
		Example[{Messages,"IncompatibleSample","The wetting liquid input must be a liquid sample:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
			],
			$Failed,
			Messages:>{Error::IncompatibleSample,Error::InvalidInput,Warning::SurfaceTensionRequired}
		],
		Example[{Messages,"FiberCircumferenceRequired","If FiberCircumference of fiber sample is Null and WettedLengthMeasurement is set to False, throw an error:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				WettedLengthMeasurement->False
			],
			$Failed,
			Messages:>{Error::FiberCircumferenceRequired,Error::InvalidInput}
		],
		Example[{Messages,"SurfaceTensionRequired","If SurfaceTension of wetting liquid sample is Null, throw a warning:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object without SurfaceTension for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
			],
			ObjectP[Object[Protocol,MeasureContactAngle]],
			Messages:>{Warning::SurfaceTensionRequired}
		],
		Example[{Messages,"InvalidImmersionDepths","If EndImmersionDepth is smaller than StartImmersionDepth, throw an error:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				StartImmersionDepth->5 Millimeter,
				EndImmersionDepth->1 Millimeter
			],
			$Failed,
			Messages:>{Error::InvalidImmersionDepths,Error::InvalidOption}
		],
		Example[{Messages,"InvalidVolume","If Volume is larger than the MaxVolume of ImmersionContainer, throw an error:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Volume->99 Milliliter,
				ImmersionContainer->Model[Container,Vessel,"Kruss SV10 glass sample vessel"]
			],
			$Failed,
			Messages:>{Error::InvalidVolume,Error::InvalidOption}
		],
		Example[{Messages,"InvalidDepth","If EndImmersionDepth is larger than the InternalDepth of ImmersionContainer, throw an error:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				EndImmersionDepth->30 Millimeter,
				ImmersionContainer->Model[Container,Vessel,"Kruss SV10 glass sample vessel"]
			],
			$Failed,
			Messages:>{Error::InvalidDepth,Error::InvalidOption}
		],
		Example[{Messages,"InvalidCount","If total number of measurements (SamplesIn * NumberOfReplicates) is larger than the Count of each SamplesIn, throw an error:"},
			ExperimentMeasureContactAngle[
				Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				NumberOfReplicates->3
			],
			$Failed,
			Messages:>{Error::InvalidCount,Error::InvalidInput}
		]
		(* Primitive/UnitOperation *)
	},
	(* Every time a test is run reset $CreatedObjects and erase objects created during that test at the end. *)
	(* Noted that SetUp/TearDown here will be overwritten if you also put them after individual test. *)
	SetUp:>(
		$CreatedObjects={};
		ClearMemoization[];
		Off[Warning::SamplesOutOfStock];
		Off[Warning::DeprecatedProduct];
	),
	TearDown:>(
		EraseObject[$CreatedObjects,Force->True];
		Unset[$CreatedObjects];
		On[Warning::SamplesOutOfStock];
		On[Warning::DeprecatedProduct];
	),
	(* SymbolSetUp/SymbolTearDown only runs once in the beginning and in the end of unit tests. *)
	SymbolSetUp:>(
		(* Double check again to make sure all test objects are removed before setting up new objects. *)
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 3 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test discarded fiber object 4 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object without SurfaceTension for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV10 immersion container for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]]
		];

		(* Setup phase *)
		Module[
			{
				fiberModel,
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects,

				testBench,
				testCart,
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			},

			$CreatedObjects={};
			ClearMemoization[];


			fiberModel=Model[Sample,"Human hair"];

			(* ↓↓↓ CREATE OBJECTS HERE ↓↓↓ *)
			{
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects
			}={
				CreateID[ConstantArray[Object[Container,Vessel,Bag],3]],
				CreateID[ConstantArray[Object[Sample],4]],
				CreateID[ConstantArray[Object[Container,Vessel],2]],
				CreateID[ConstantArray[Object[Sample],2]],
				CreateID[ConstantArray[Object[Container,Vessel],2]]
			};

			(* Create object packets and upload in the end. *)
			(* Or UploadSample[] directly. *)

			testBench=Upload[
				Association[
					Type->Object[Container,Bench],
					Name->"Test bench for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					Model->Link[Model[Container,Bench,"The Bench of Testing"],Objects],
					Site->Link[$Site],
					DeveloperObject->True
				]
			];

			testCart=Upload[
				Association[
					Type->Object[Container,OperatorCart],
					Model->Link[Model[Container,OperatorCart,"Chemistry Lab Cart"],Objects],
					Name->"Test operator cart for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			];

			fiberContainerObjectPackets=MapThread[
				Association[
					Object->#1,
					Type->Object[Container,Vessel,Bag],
					Model->Link[Model[Container, Vessel, Bag, "Medium clear plastic zip-lock bag for solid sample"],Objects],
					Name->"Test fiber container bag object "<>ToString[#2]<>" for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				]&,
				{fiberContainerObjects,Range[Length[fiberContainerObjects]]}
			];

			fiberObjectPackets={
				Association[
					Object->fiberObjects[[1]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					FiberCircumference->200 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					Count->3,
					DeveloperObject->True
				],
				Association[
					Object->fiberObjects[[2]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					FiberCircumference->150 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					Count->2,
					DeveloperObject->True
				],
				Association[
					Object->fiberObjects[[3]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					Count->1,
					DeveloperObject->True
				],
				Association[
					Object->fiberObjects[[4]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test discarded fiber object 4 for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					Status->Discarded,
					DeveloperObject->True
				]
			};

			wettingLiquidContainerPackets={
				Association[
					Object->wettingLiquidContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test wetting liquid container object for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					DeveloperObject->True
				],
				Association[
					Object->wettingLiquidContainerObjects[[2]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test wetting liquid container object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					DeveloperObject->True
				]
			};

			wettingLiquidPackets={
				Association[
					Object->wettingLiquidObjects[[1]],
					Type->Object[Sample],
					Model->Link[Model[Sample,"Milli-Q water"],Objects],
					Name->"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					State->Liquid,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					SurfaceTension->Quantity[72.8, ("Millinewtons")/("Meters")],
					Product->Link[Object[Product,"Milli-Q Water"],Samples],
					DeveloperObject->True
				],
				Association[
					Object->wettingLiquidObjects[[2]],
					Type->Object[Sample],
					Model->Link[Model[Sample,"Milli-Q water"],Objects],
					Name->"Test wetting liquid object without SurfaceTension for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					State->Liquid,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					Product->Link[Object[Product,"Milli-Q Water"],Samples],
					DeveloperObject->True
				]
			};

			immersionContainerPackets={
				Association[
					Object->immersionContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV10 glass sample vessel"],Objects],
					Name->"Test SV10 immersion container for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				],
				Association[
					Object->immersionContainerObjects[[2]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test SV20 immersion container for ExperimentMeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			};
			(* ↑↑↑ CREATE OBJECTS HERE ↑↑↑ *)

			(* Make sure DeveloperObject->True *)
			Upload[Join[
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			]];

			(* Put all containers onto the test bench. *)
			UploadLocation[
				Join[fiberContainerObjects,wettingLiquidContainerObjects,immersionContainerObjects],
				{"Work Surface",testBench}
			];

			(* Put all samples into the containers and update StorageCondition. *)
			MapThread[
				(
					UploadLocation[#1,{"A1",#2}];
					UploadStorageCondition[#1,AmbientStorage]
				)&,
				{Join[Most[fiberObjects],wettingLiquidObjects],Join[fiberContainerObjects,wettingLiquidContainerObjects]}
			];
		]
	),
	SymbolTearDown:>
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 3 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test discarded fiber object 4 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object 2 for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object without SurfaceTension for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV10 immersion container for ExperimentMeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ExperimentMeasureContactAngle unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];
			Unset[$CreatedObjects]
		],
	Stubs:>{
		(* Important stub that prevents the tester from getting a bunch of notifications *)
		$PersonID=Object[User,"Test user for notebook-less test protocols"]
	}
];


(* ::Subsubsection::Closed:: *)
(* MeasureContactAngle *)


DefineTests[MeasureContactAngle,
	{
		Example[{Basic, "Specifying a unit operation to measure the contact angle of a specific sample returns a MeasureContactAngle unit operation:"},
			MeasureContactAngle[
				Sample -> "Fiber sample",
				WettingLiquids -> "Wetting liquid"
			],
			_MeasureContactAngle
		],
		Example[{Basic, "MeasureContactAngle primitive can be used as part of Experiment to generate a ManualSamplePreparation protocol:"},
			Experiment[
				MeasureContactAngle[
					Sample -> Object[Sample, "Test fiber object 1 for MeasureContactAngle unit test "<>$SessionUUID],
					WettingLiquids -> Object[Sample,"Test wetting liquid object for MeasureContactAngle unit test "<>$SessionUUID]
				]
			],
			ObjectP[Object[Protocol,ManualSamplePreparation]]
		]
	},
	SymbolSetUp:>{
		(* Double check again to make sure all test objects are removed before setting up new objects. *)
		Module[
			{
				(* Symbol Cleanup *)
				objects,existsFilter,
				(* Symbol Setup *)
				fiberModel,
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects,

				testBench,
				testCart,
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			},

			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for MeasureContactAngle unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];


			(* Setup phase *)

			$CreatedObjects={};
			ClearMemoization[];

			fiberModel=Model[Sample,"Human hair"];

			(* ↓↓↓ CREATE OBJECTS HERE ↓↓↓ *)
			{
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects
			}={
				CreateID[ConstantArray[Object[Container,Vessel,Bag],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],1]]
			};

			(* Create object packets and upload in the end. *)
			(* Or UploadSample[] directly. *)

			testBench=Upload[
				Association[
					Type->Object[Container,Bench],
					Name->"Test bench for MeasureContactAngle unit test "<>$SessionUUID,
					Model->Link[Model[Container,Bench,"The Bench of Testing"],Objects],
					Site->Link[$Site],
					DeveloperObject->True
				]
			];

			testCart=Upload[
				Association[
					Type->Object[Container,OperatorCart],
					Model->Link[Model[Container,OperatorCart,"Chemistry Lab Cart"],Objects],
					Name->"Test operator cart for MeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			];

			fiberContainerObjectPackets=MapThread[
				Association[
					Object->#1,
					Type->Object[Container,Vessel,Bag],
					Model->Link[Model[Container,Vessel,Bag,"Medium clear plastic zip-lock bag for solid sample"],Objects],
					Name->"Test fiber container bag object "<>ToString[#2]<>" for MeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				]&,
				{fiberContainerObjects,Range[Length[fiberContainerObjects]]}
			];

			fiberObjectPackets={
				Association[
					Object->fiberObjects[[1]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 1 for MeasureContactAngle unit test "<>$SessionUUID,
					FiberCircumference->200 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					DeveloperObject->True
				]
			};

			wettingLiquidContainerPackets={
				Association[
					Object->wettingLiquidContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test wetting liquid container object for MeasureContactAngle unit test "<>$SessionUUID,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					DeveloperObject->True
				]
			};

			wettingLiquidPackets={
				Association[
					Object->wettingLiquidObjects[[1]],
					Type->Object[Sample],
					Model->Link[Model[Sample,"Milli-Q water"],Objects],
					Name->"Test wetting liquid object for MeasureContactAngle unit test "<>$SessionUUID,
					State->Liquid,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					SurfaceTension->Quantity[72.8, ("Millinewtons")/("Meters")],
					Product->Link[Object[Product,"Milli-Q Water"],Samples],
					DeveloperObject->True
				]
			};

			immersionContainerPackets={
				Association[
					Object->immersionContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test SV20 immersion container for MeasureContactAngle unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			};
			(* ↑↑↑ CREATE OBJECTS HERE ↑↑↑ *)

			(* Make sure DeveloperObject->True *)
			Upload[Join[
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			]];

			(* Put all containers onto the test bench. *)
			UploadLocation[
				Join[fiberContainerObjects,wettingLiquidContainerObjects,immersionContainerObjects],
				{"Work Surface",testBench}
			];

			(* Put all samples into the containers and update StorageCondition. *)
			MapThread[
				(
					UploadLocation[#1,{"A1",#2}];
					UploadStorageCondition[#1,AmbientStorage]
				)&,
				{Join[fiberObjects,wettingLiquidObjects],Join[fiberContainerObjects,wettingLiquidContainerObjects]}
			];
		]
	},
	SymbolTearDown:>{
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for MeasureContactAngle unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for MeasureContactAngle unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];
			Unset[$CreatedObjects]
		]
	}
];


(* ::Subsection:: *)
(*ExperimentMeasureContactAnglePreview*)


DefineTests[ExperimentMeasureContactAnglePreview,
	{
		Example[{Basic,"No preview is currently available for ExperimentMeasureContactAngle:"},
			ExperimentMeasureContactAnglePreview[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID]
			],
			Null
		],
		Example[{Additional,"If you wish to understand how the experiment will be performed try using ExperimentMeasureContactAngleOptions:"},
			ExperimentMeasureContactAngleOptions[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID]
			],
			_Grid
		],
		Example[{Additional,"The inputs and options can also be checked to verify that the experiment can be safely run by using ValidExperimentMeasureContactAngleQ:"},
			ValidExperimentMeasureContactAngleQ[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Verbose->Failures
			],
			True
		]
	},
	SymbolSetUp:>{
		(* Double check again to make sure all test objects are removed before setting up new objects. *)
		Module[
			{
				(* Symbol Cleanup *)
				objects,existsFilter,
				(* Symbol Setup *)
				fiberModel,
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects,

				testBench,
				testCart,
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			},

			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];


			(* Setup phase *)

			$CreatedObjects={};
			ClearMemoization[];

			fiberModel=Model[Sample,"Human hair"];

			(* ↓↓↓ CREATE OBJECTS HERE ↓↓↓ *)
			{
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects
			}={
				CreateID[ConstantArray[Object[Container,Vessel,Bag],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],1]]
			};

			(* Create object packets and upload in the end. *)
			(* Or UploadSample[] directly. *)

			testBench=Upload[
				Association[
					Type->Object[Container,Bench],
					Name->"Test bench for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					Model->Link[Model[Container,Bench,"The Bench of Testing"],Objects],
					Site->Link[$Site],
					DeveloperObject->True
				]
			];

			testCart=Upload[
				Association[
					Type->Object[Container,OperatorCart],
					Model->Link[Model[Container,OperatorCart,"Chemistry Lab Cart"],Objects],
					Name->"Test operator cart for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			];

			fiberContainerObjectPackets=MapThread[
				Association[
					Object->#1,
					Type->Object[Container,Vessel,Bag],
					Model->Link[Model[Container,Vessel,Bag,"Medium clear plastic zip-lock bag for solid sample"],Objects],
					Name->"Test fiber container bag object "<>ToString[#2]<>" for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					DeveloperObject->True
				]&,
				{fiberContainerObjects,Range[Length[fiberContainerObjects]]}
			];

			fiberObjectPackets={
				Association[
					Object->fiberObjects[[1]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					FiberCircumference->200 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					DeveloperObject->True
				]
			};

			wettingLiquidContainerPackets={
				Association[
					Object->wettingLiquidContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test wetting liquid container object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					DeveloperObject->True
				]
			};

			wettingLiquidPackets={
				Association[
					Object->wettingLiquidObjects[[1]],
					Type->Object[Sample],
					Model->Link[Model[Sample,"Milli-Q water"],Objects],
					Name->"Test wetting liquid object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					State->Liquid,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					SurfaceTension->Quantity[72.8, ("Millinewtons")/("Meters")],
					Product->Link[Object[Product,"Milli-Q Water"],Samples],
					DeveloperObject->True
				]
			};

			immersionContainerPackets={
				Association[
					Object->immersionContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test SV20 immersion container for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			};
			(* ↑↑↑ CREATE OBJECTS HERE ↑↑↑ *)

			(* Make sure DeveloperObject->True *)
			Upload[Join[
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			]];

			(* Put all containers onto the test bench. *)
			UploadLocation[
				Join[fiberContainerObjects,wettingLiquidContainerObjects,immersionContainerObjects],
				{"Work Surface",testBench}
			];

			(* Put all samples into the containers and update StorageCondition. *)
			MapThread[
				(
					UploadLocation[#1,{"A1",#2}];
					UploadStorageCondition[#1,AmbientStorage]
				)&,
				{Join[fiberObjects,wettingLiquidObjects],Join[fiberContainerObjects,wettingLiquidContainerObjects]}
			];
		]
	},
	SymbolTearDown:>{
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ExperimentMeasureContactAnglePreview unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];
			Unset[$CreatedObjects]
		]
	},
	Stubs:>{
		(* Important stub that prevents the tester from getting a bunch of notifications *)
		$PersonID=Object[User,"Test user for notebook-less test protocols"]
	}
];


(* ::Subsection:: *)
(*ExperimentMeasureContactAngleOptions*)


DefineTests[ExperimentMeasureContactAngleOptions,
	{
		(* --- Basic Examples --- *)
		Example[{Basic,"Generate a table of resolved options for a MeasureContactAngle experiment with a single sample:"},
			ExperimentMeasureContactAngleOptions[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID]
			],
			_Grid
		],
		Example[{Basic,"Generate a table of resolved options for a MeasureContactAngle experiment with a multiple sample:"},
			ExperimentMeasureContactAngleOptions[
				{
					Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
					Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID]
				},
				{
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
					Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID]
				}
			],
			_Grid
		],
		Example[{Basic,"Generate a table of resolved options for a MeasureContactAngle experiment with a sample in a container:"},
			ExperimentMeasureContactAngleOptions[
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID]
			],
			_Grid
		],
		(* --- Options Examples --- *)
		Example[{Options,OutputFormat,"Generate a resolved list of options for a MeasureContactAngle experiment with a single sample:"},
			ExperimentMeasureContactAngleOptions[
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				OutputFormat->List
			],
			{_Rule..}
		]
	},
	(* Every time a test is run reset $CreatedObjects and erase objects created during that test at the end. *)
	(* Noted that SetUp/TearDown here will be overwritten if you also put them after individual test. *)
	SetUp:>(
		$CreatedObjects={};
		ClearMemoization[];
		Off[Warning::SamplesOutOfStock];
		Off[Warning::DeprecatedProduct];
	),
	TearDown:>(
		EraseObject[$CreatedObjects,Force->True];
		Unset[$CreatedObjects];
		On[Warning::SamplesOutOfStock];
		On[Warning::DeprecatedProduct];
	),
	(* SymbolSetUp/SymbolTearDown only runs once in the beginning and in the end of unit tests. *)
	SymbolSetUp:>(
		(* Double check again to make sure all test objects are removed before setting up new objects. *)
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 2 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 3 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test discarded fiber object 4 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV10 immersion container for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]]
		];

		(* Setup phase *)
		Module[
			{
				fiberModel,
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects,

				testBench,
				testCart,
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			},

			$CreatedObjects={};
			ClearMemoization[];


			fiberModel=Model[Sample,"Human hair"];

			(* ↓↓↓ CREATE OBJECTS HERE ↓↓↓ *)
			{
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects
			}={
				CreateID[ConstantArray[Object[Container,Vessel,Bag],3]],
				CreateID[ConstantArray[Object[Sample],4]],
				CreateID[ConstantArray[Object[Container,Vessel],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],2]]
			};

			(* Create object packets and upload in the end. *)
			(* Or UploadSample[] directly. *)

			testBench=Upload[
				Association[
					Type->Object[Container,Bench],
					Name->"Test bench for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					Model->Link[Model[Container,Bench,"The Bench of Testing"],Objects],
					Site->Link[$Site],
					DeveloperObject->True
				]
			];

			testCart=Upload[
				Association[
					Type->Object[Container,OperatorCart],
					Model->Link[Model[Container,OperatorCart,"Chemistry Lab Cart"],Objects],
					Name->"Test operator cart for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			];

			fiberContainerObjectPackets=MapThread[
				Association[
					Object->#1,
					Type->Object[Container,Vessel,Bag],
					Model->Link[Model[Container,Vessel,Bag,"Medium clear plastic zip-lock bag for solid sample"],Objects],
					Name->"Test fiber container bag object "<>ToString[#2]<>" for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					DeveloperObject->True
				]&,
				{fiberContainerObjects,Range[Length[fiberContainerObjects]]}
			];

			fiberObjectPackets={
				Association[
					Object->fiberObjects[[1]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					FiberCircumference->200 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					DeveloperObject->True
				],
				Association[
					Object->fiberObjects[[2]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 2 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					FiberCircumference->150 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					DeveloperObject->True
				],
				Association[
					Object->fiberObjects[[3]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					DeveloperObject->True
				],
				Association[
					Object->fiberObjects[[4]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test discarded fiber object 4 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					Status->Discarded,
					DeveloperObject->True
				]
			};

			wettingLiquidContainerPackets={
				Association[
					Object->wettingLiquidContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test wetting liquid container object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					DeveloperObject->True
				]
			};

			wettingLiquidPackets={
				Association[
					Object->wettingLiquidObjects[[1]],
					Type->Object[Sample],
					Model->Link[Model[Sample,"Milli-Q water"],Objects],
					Name->"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					State->Liquid,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					SurfaceTension->Quantity[72.8, ("Millinewtons")/("Meters")],
					Product->Link[Object[Product,"Milli-Q Water"],Samples],
					DeveloperObject->True
				]
			};

			immersionContainerPackets={
				Association[
					Object->immersionContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV10 glass sample vessel"],Objects],
					Name->"Test SV10 immersion container for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					DeveloperObject->True
				],
				Association[
					Object->immersionContainerObjects[[2]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test SV20 immersion container for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			};
			(* ↑↑↑ CREATE OBJECTS HERE ↑↑↑ *)

			(* Make sure DeveloperObject->True *)
			Upload[Join[
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			]];

			(* Put all containers onto the test bench. *)
			UploadLocation[
				Join[fiberContainerObjects,wettingLiquidContainerObjects,immersionContainerObjects],
				{"Work Surface",testBench}
			];

			(* Put all samples into the containers and update StorageCondition. *)
			MapThread[
				(
					UploadLocation[#1,{"A1",#2}];
					UploadStorageCondition[#1,AmbientStorage]
				)&,
				{Join[Most[fiberObjects],wettingLiquidObjects],Join[fiberContainerObjects,wettingLiquidContainerObjects]}
			];
		]
	),
	SymbolTearDown:>{
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 2 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 3 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 2 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 3 without FiberCircumference for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test discarded fiber object 4 for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV10 immersion container for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ExperimentMeasureContactAngleOptions unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];
			Unset[$CreatedObjects]
		]
	},
	Stubs:>{
		(* Important stub that prevents the tester from getting a bunch of notifications *)
		$PersonID=Object[User,"Test user for notebook-less test protocols"]
	}
];


(* ::Subsection:: *)
(*ValidExperimentMeasureContactAngleQ*)


DefineTests[ValidExperimentMeasureContactAngleQ,
	{
		Example[{Basic,"Verify that the experiment can be run without issue:"},
			ValidExperimentMeasureContactAngleQ[
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID]
			],
			True
		],
		Example[{Basic,"Return False if there are problems with the inputs:"},
			ValidExperimentMeasureContactAngleQ[
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID]
			],
			False
		],
		Example[{Basic,"Return False if there are problems with the options:"},
			ValidExperimentMeasureContactAngleQ[
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				StartImmersionDepth->5 Millimeter,
				EndImmersionDepth->2 Millimeter
			],
			False
		],
		Example[{Options,OutputFormat,"Return a test summary:"},
			ValidExperimentMeasureContactAngleQ[
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				OutputFormat->TestSummary
			],
			_EmeraldTestSummary
		],
		Example[{Options,Verbose,"Print verbose messages reporting test passage/failure:"},
			ValidExperimentMeasureContactAngleQ[
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Verbose->True
			],
			True
		]
	},
	SymbolSetUp:>{
		(* Double check again to make sure all test objects are removed before setting up new objects. *)
		Module[
			{
				(* Symbol Cleanup *)
				objects,existsFilter,
				(* Symbol Setup *)
				fiberModel,
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects,

				testBench,
				testCart,
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			},

			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];


			(* Setup phase *)

			$CreatedObjects={};
			ClearMemoization[];

			fiberModel=Model[Sample,"Human hair"];

			(* ↓↓↓ CREATE OBJECTS HERE ↓↓↓ *)
			{
				fiberContainerObjects,
				fiberObjects,
				wettingLiquidContainerObjects,
				wettingLiquidObjects,
				immersionContainerObjects
			}={
				CreateID[ConstantArray[Object[Container,Vessel,Bag],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],1]],
				CreateID[ConstantArray[Object[Sample],1]],
				CreateID[ConstantArray[Object[Container,Vessel],1]]
			};

			(* Create object packets and upload in the end. *)
			(* Or UploadSample[] directly. *)

			testBench=Upload[
				Association[
					Type->Object[Container,Bench],
					Name->"Test bench for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					Model->Link[Model[Container,Bench,"The Bench of Testing"],Objects],
					Site->Link[$Site],
					DeveloperObject->True
				]
			];

			testCart=Upload[
				Association[
					Type->Object[Container,OperatorCart],
					Model->Link[Model[Container,OperatorCart,"Chemistry Lab Cart"],Objects],
					Name->"Test operator cart for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			];

			fiberContainerObjectPackets=MapThread[
				Association[
					Object->#1,
					Type->Object[Container,Vessel,Bag],
					Model->Link[Model[Container,Vessel,Bag,"Medium clear plastic zip-lock bag for solid sample"],Objects],
					Name->"Test fiber container bag object "<>ToString[#2]<>" for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					DeveloperObject->True
				]&,
				{fiberContainerObjects,Range[Length[fiberContainerObjects]]}
			];

			fiberObjectPackets={
				Association[
					Object->fiberObjects[[1]],
					Type->Object[Sample],
					Model->Link[fiberModel,Objects],
					Name->"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					FiberCircumference->200 Micrometer,
					SampleHandling->Itemized,
					State->Solid,
					Fiber->True,
					DeveloperObject->True
				]
			};

			wettingLiquidContainerPackets={
				Association[
					Object->wettingLiquidContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test wetting liquid container object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					DeveloperObject->True
				]
			};

			wettingLiquidPackets={
				Association[
					Object->wettingLiquidObjects[[1]],
					Type->Object[Sample],
					Model->Link[Model[Sample,"Milli-Q water"],Objects],
					Name->"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					State->Liquid,
					StorageCondition->Link[Model[StorageCondition,"Ambient Storage"]],
					Product->Link[Object[Product,"Milli-Q Water"],Samples],
					DeveloperObject->True
				]
			};

			immersionContainerPackets={
				Association[
					Object->immersionContainerObjects[[1]],
					Type->Object[Container,Vessel],
					Model->Link[Model[Container,Vessel,"Kruss SV20 glass sample vessel"],Objects],
					Name->"Test SV20 immersion container for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID,
					DeveloperObject->True
				]
			};
			(* ↑↑↑ CREATE OBJECTS HERE ↑↑↑ *)

			(* Make sure DeveloperObject->True *)
			Upload[Join[
				fiberContainerObjectPackets,
				fiberObjectPackets,
				wettingLiquidContainerPackets,
				wettingLiquidPackets,
				immersionContainerPackets
			]];

			(* Put all containers onto the test bench. *)
			UploadLocation[
				Join[fiberContainerObjects,wettingLiquidContainerObjects,immersionContainerObjects],
				{"Work Surface",testBench}
			];

			(* Put all samples into the containers and update StorageCondition. *)
			MapThread[
				(
					UploadLocation[#1,{"A1",#2}];
					UploadStorageCondition[#1,AmbientStorage]
				)&,
				{Join[fiberObjects,wettingLiquidObjects],Join[fiberContainerObjects,wettingLiquidContainerObjects]}
			];
		]
	},
	SymbolTearDown:>{
		Module[{objects,existsFilter},
			(* List all test objects to erase. Can use SetUpTestObjects[]+ObjectToString[] to get the comprehensive list. *)
			objects={
				Object[Container,Bench,"Test bench for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,OperatorCart,"Test operator cart for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,Vessel,Bag,"Test fiber container bag object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test fiber object 1 for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test wetting liquid container object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Sample,"Test wetting liquid object for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID],
				Object[Container,Vessel,"Test SV20 immersion container for ValidExperimentMeasureContactAngleQ unit test "<>$SessionUUID]
			};

			(* Check whether the names we want to give below already exist in the database *)
			existsFilter=DatabaseMemberQ[objects];

			(* Erase any objects that we failed to erase in the last unit test. *)
			Quiet[EraseObject[PickList[objects,existsFilter],Force->True,Verbose->False]];
			Unset[$CreatedObjects]
		]
	},
	Stubs:>{
		(* Important stub that prevents the tester from getting a bunch of notifications *)
		$PersonID=Object[User,"Test user for notebook-less test protocols"],

		(* ValidObjectQ is super slow so just doing this here *)
		ValidObjectQ[objs_,OutputFormat->Boolean]:=ConstantArray[True,Length[objs]]
	}
];

