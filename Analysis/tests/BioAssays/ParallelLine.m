(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Title:: *)
(*ParallelLine: Tests*)


(* ::Section:: *)
(*Unit Testing*)


(* ::Subsection:: *)
(*AnalyzeParallelLine*)


(* ::Subsubsection:: *)
(*AnalyzeParallelLine*)


DefineTests[AnalyzeParallelLine, {

	(* --------------------- BASIC --------------------*)
	Example[{Basic, "Fit a Four Parameter Logistic Regression to each of the standard and analyte data:"},
		PlotObject[AnalyzeParallelLine[rawDataSTD, rawDataAnalyte]],
		_?ValidGraphicsQ
	],
	
	Example[{Basic, "Can also be applied on quantity data:"},
		PlotObject[AnalyzeParallelLine[quantityDataSTD, quantityDataAnalyte]],
		_?ValidGraphicsQ
	],
	
	Example[{Basic, "The y-axis data can be a distribution:"},
		PlotObject[AnalyzeParallelLine[quantityDataSTD, quantityDataDistAnalyte]],
		_?ValidGraphicsQ
	],
	
	Example[{Basic, "The function can take in a list of analyte data to compare to the standard data:"},
		PlotObject[AnalyzeParallelLine[rawDataSTD, {rawDataAnalyte, quantityDataAnalyte}]],
		{_?ValidGraphicsQ, _?ValidGraphicsQ}
	],

	
	
	(* --------------------- OPTIONS --------------------*)	
	Example[{Options,Exclude, "If there are known outliers in the data set, they can be excluded from fitting by listing them in the Exclude list:"},
		PlotObject[AnalyzeParallelLine[rawDataSTD, rawDataAnalyte, Exclude->{{7.9,5913}}]],
		_?ValidGraphicsQ
	],
	
	Example[{Options,Domain, "Points outside Domain will be excluded from fitting:"},
		PlotObject[AnalyzeParallelLine[rawDataSTD, rawDataAnalyte, Domain->{-3,7}]],
		_?ValidGraphicsQ
	],
	
	Example[{Options,ExcludeOutliers, "If ExcludeOutliers->True, any points detected as outliers will be excluded from fitting:"},
		PlotObject[AnalyzeParallelLine[quantityDataSTD, quantityDataAnalyte, ExcludeOutliers -> True]],
		_?ValidGraphicsQ
	],
	
	Example[{Options,OutlierDistance, "Control the distance at which points are labeled as outliers:"},
		PlotObject[AnalyzeParallelLine[quantityDataSTD, quantityDataAnalyte, OutlierDistance -> 1000]],
		_?ValidGraphicsQ
	],
	
	Example[{Options,LogBase, "The log base used to transform concentrations to log scale:"},
		PlotObject[AnalyzeParallelLine[rawDataSTD, rawDataAnalyte, LogBase -> 10]],
		_?ValidGraphicsQ
	],
	
	Example[{Options,Name, "Name to be used as the name of Object[Analysis, ParallelLine] generated by the analysis:"},
		randomStr = CreateUUID[];
		Name/.Download[AnalyzeParallelLine[rawDataSTD,rawDataAnalyte,Name->randomStr]],
		_String
	],
	Example[{Options,LogTransformed,"True when the input x axis is log-transformed, False otherwise:"},
		PlotObject[AnalyzeParallelLine[rawDataSTDNoLog,rawDataAnalyteNoLog,LogTransformed->False]],
		_?ValidGraphicsQ
	],
	
	Example[{Options,Template, "Use options from previous parallel line analysis to fit a cubic:"},
		PlotObject[AnalyzeParallelLine[rawDataSTD, rawDataAnalyte, Template -> Object[Analysis,ParallelLine,"id:AEqRl9KKjpx5"]]],
		_?ValidGraphicsQ
	],

	Test["Upload result:",
		AnalyzeParallelLine[rawDataSTD, rawDataAnalyte, Upload -> True],
		ObjectP[]
	]


},
	Variables:>{rawDataSTD, rawDataAnalyte, quantityDataSTD, quantityDataAnalyte, quantityDataDistAnalyte, rawDataSTDNoLog, rawDataAnalyteNoLog},
	SetUp:>(
		rawDataSTD = {{7.9,5913},{6.24332`,10729.`},{4.52085`,20825.`},{2.79839`,50478.5`},{1.07592`,119492.5`},{-0.646546`,196904.5`},{-2.36901`,224309.`},{-4.09148`,229128.`}};
		rawDataAnalyte = {{7.9,5717},{6.24332`,8843.5`},{4.52085`,15175.5`},{2.79839`,34229.`},{1.07592`,84553.`},{-0.646546`,164801.5`},{-2.36901`,213613.5`},{-4.09148`,226544.5`}};
		quantityDataSTD = {{Quantity[7.96578,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{4901.,6925.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[6.24332,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{10083.,11375.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[4.52085,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{18658.,22992.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[2.79839,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{45019.,55938.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[1.07592,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{106481.,132504.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-0.646546,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{185559.,208250.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-2.36901,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{217533.,231085.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-4.09148,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{222652.,235604.},False},1,2,IndependentUnit["Rfus"]]}};
		quantityDataAnalyte = {{Quantity[7.96578, "Micrograms"/"Milliliters"], Quantity[5717., IndependentUnit["Rfus"]]}, {Quantity[6.24332, "Micrograms"/"Milliliters"], Quantity[8843.5, IndependentUnit["Rfus"]]}, {Quantity[4.52085, "Micrograms"/"Milliliters"], Quantity[15175.5, IndependentUnit["Rfus"]]}, {Quantity[2.79839, "Micrograms"/"Milliliters"], Quantity[34229., IndependentUnit["Rfus"]]}, {Quantity[1.07592, "Micrograms"/"Milliliters"], Quantity[84553., IndependentUnit["Rfus"]]}, {Quantity[-0.646546, "Micrograms"/"Milliliters"], Quantity[164801.5, IndependentUnit["Rfus"]]}, {Quantity[-2.36901, "Micrograms"/"Milliliters"], Quantity[213613.5, IndependentUnit["Rfus"]]}, {Quantity[-4.09148, "Micrograms"/"Milliliters"], Quantity[226544.5, IndependentUnit["Rfus"]]}};
		quantityDataDistAnalyte = {{Quantity[7.96578, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {5111., 6323.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[6.24332, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {8144., 9543.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[4.52085, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {12688., 17663.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[2.79839, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {27037., 41421.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[1.07592, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {67646., 101460.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[-0.646546, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {143051., 186552.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[-2.36901, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {201405., 225822.}, False}, 1, 2, IndependentUnit["Rfus"]]}, {Quantity[-4.09148, "Micrograms"/"Milliliters"], DataDistribution["Empirical", {{0.5, 0.5}, {220332., 232757.}, False}, 1, 2, IndependentUnit["Rfus"]]}};
		rawDataSTDNoLog = {{250,76.89603370785777`},{75.7576`,103.58088626768937`},{22.957`,144.30869689661813`},{6.957`,224.67420857766473`},{2.11`,345.67687223764335`},{0.639`,443.73922522130044`},{0.19358`,473.6127109780733`},{0.05866`,478.673166158288`}};
		rawDataAnalyteNoLog = {{250,75.61084578286372`},{75.7576`,94.03988515518296`},{22.957`,123.18887936822868`},{6.957`,185.0108104949546`},{2.11`,290.77998555609014`},{0.639`,405.95751009188143`},{0.19358`,462.1834051542742`},{0.05866`,475.966910614593`}}
	)
];



(* ::Subsubsection:: *)
(*AnalyzeParallelLineOptions*)


DefineTests[AnalyzeParallelLineOptions, {
	Example[{Basic,"Return all options with Automatic resolved to a fixed value:"},
		AnalyzeParallelLineOptions[rawDataSTD,rawDataAnalyte, Domain->Automatic],
		_Grid
	],
	Example[{Basic,"The input objects can be stored in reference field:"},
		AnalyzeParallelLineOptions[Object[Analysis,Fit,"id:Vrbp1jKKAJoW"], Object[Analysis,Fit,"id:XnlV5jKKorRn"]],
		_Grid
	],
	Example[{Basic,"The exlcude option can be auto-resulved based on domain option:"},
		AnalyzeParallelLineOptions[rawDataSTD,rawDataAnalyte, Domain->{-3,7}],
		_Grid
	],
	Example[{Options,OutputFormat,"Return the options as a list:"},
		AnalyzeParallelLineOptions[rawDataSTD,rawDataAnalyte, Domain->Automatic, Upload->False, OutputFormat->List],
		{Exclude -> {}, Domain -> {{-4.09148, 7.9}}, ExcludeOutliers -> False, OutlierDistance -> 1.5, LogTransformed -> True, LogBase -> 2, Name -> Null, Template -> Null}
	]
},
	Variables:>{rawDataSTD, rawDataAnalyte},
	SetUp:>(
		rawDataSTD = {{7.9,5913},{6.24332`,10729.`},{4.52085`,20825.`},{2.79839`,50478.5`},{1.07592`,119492.5`},{-0.646546`,196904.5`},{-2.36901`,224309.`},{-4.09148`,229128.`}};
		rawDataAnalyte = {{7.9,5717},{6.24332`,8843.5`},{4.52085`,15175.5`},{2.79839`,34229.`},{1.07592`,84553.`},{-0.646546`,164801.5`},{-2.36901`,213613.5`},{-4.09148`,226544.5`}}
	)
];


(* ::Subsubsection:: *)
(*AnalyzeParallelLinePreview*)


DefineTests[AnalyzeParallelLinePreview, {
	Example[{Basic,"Return a graphical display for the calculated parallel line analysi on top of input data:"},
		AnalyzeParallelLinePreview[rawDataSTD,rawDataAnalyte],
		ValidGraphicsP[]
	],
	Example[{Basic,"Can work with quantity inputs:"},
		AnalyzeParallelLinePreview[quantityDataSTD,quantityDataAnalyte],
		ValidGraphicsP[]
	],
	Example[{Basic,"Can work with object inputs:"},
		AnalyzeParallelLinePreview[Object[Analysis,Fit,"id:Vrbp1jKKAJoW"], Object[Analysis,Fit,"id:XnlV5jKKorRn"]],
		ValidGraphicsP[]
	]
},
	Variables:>{rawDataSTD, rawDataAnalyte, quantityDataSTD, quantityDataAnalyte},
	SetUp:>(
		rawDataSTD = {{7.9,5913},{6.24332`,10729.`},{4.52085`,20825.`},{2.79839`,50478.5`},{1.07592`,119492.5`},{-0.646546`,196904.5`},{-2.36901`,224309.`},{-4.09148`,229128.`}};
		rawDataAnalyte = {{7.9,5717},{6.24332`,8843.5`},{4.52085`,15175.5`},{2.79839`,34229.`},{1.07592`,84553.`},{-0.646546`,164801.5`},{-2.36901`,213613.5`},{-4.09148`,226544.5`}};
		quantityDataSTD = {{Quantity[7.96578,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{4901.,6925.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[6.24332,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{10083.,11375.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[4.52085,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{18658.,22992.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[2.79839,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{45019.,55938.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[1.07592,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{106481.,132504.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-0.646546,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{185559.,208250.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-2.36901,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{217533.,231085.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-4.09148,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{222652.,235604.},False},1,2,IndependentUnit["Rfus"]]}};
		quantityDataAnalyte = {{Quantity[7.96578, "Micrograms"/"Milliliters"], Quantity[5717., IndependentUnit["Rfus"]]}, {Quantity[6.24332, "Micrograms"/"Milliliters"], Quantity[8843.5, IndependentUnit["Rfus"]]}, {Quantity[4.52085, "Micrograms"/"Milliliters"], Quantity[15175.5, IndependentUnit["Rfus"]]}, {Quantity[2.79839, "Micrograms"/"Milliliters"], Quantity[34229., IndependentUnit["Rfus"]]}, {Quantity[1.07592, "Micrograms"/"Milliliters"], Quantity[84553., IndependentUnit["Rfus"]]}, {Quantity[-0.646546, "Micrograms"/"Milliliters"], Quantity[164801.5, IndependentUnit["Rfus"]]}, {Quantity[-2.36901, "Micrograms"/"Milliliters"], Quantity[213613.5, IndependentUnit["Rfus"]]}, {Quantity[-4.09148, "Micrograms"/"Milliliters"], Quantity[226544.5, IndependentUnit["Rfus"]]}}
	)

];


(* ::Subsubsection:: *)
(*ValidAnalyzeParallelLineQ*)


DefineTests[ValidAnalyzeParallelLineQ, {
	Example[{Basic,"Return test results for all the gathered tests/warning:"},
		ValidAnalyzeParallelLineQ[rawDataSTD,rawDataAnalyte],
		True
	],
	Example[{Basic,"The function also checks if the input objects are valid:"},
		ValidAnalyzeParallelLineQ[Object[Analysis,Fit,"id:Vrbp1jKKAJoW"], Object[Analysis,Fit,"id:XnlV5jKKorRn"]],
		True
	],
	Example[{Basic,"Can work with quantity inputs:"},
		ValidAnalyzeParallelLineQ[quantityDataSTD,quantityDataAnalyte],
		True
	],
	Example[{Options,OutputFormat,"Specify OutputFormat to be TestSummary:"},
		ValidAnalyzeParallelLineQ[rawDataSTD,rawDataAnalyte,OutputFormat->TestSummary],
		_EmeraldTestSummary
	],
	Example[{Options,Verbose,"Specify Verbose to be True:"},
		ValidAnalyzeParallelLineQ[rawDataSTD,rawDataAnalyte, Verbose->True],
		True
	]
	
},
	Variables:>{rawDataSTD, rawDataAnalyte, quantityDataSTD, quantityDataAnalyte},
	SetUp:>(
		rawDataSTD = {{7.9,5913},{6.24332`,10729.`},{4.52085`,20825.`},{2.79839`,50478.5`},{1.07592`,119492.5`},{-0.646546`,196904.5`},{-2.36901`,224309.`},{-4.09148`,229128.`}};
		rawDataAnalyte = {{7.9,5717},{6.24332`,8843.5`},{4.52085`,15175.5`},{2.79839`,34229.`},{1.07592`,84553.`},{-0.646546`,164801.5`},{-2.36901`,213613.5`},{-4.09148`,226544.5`}};
		quantityDataSTD = {{Quantity[7.96578,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{4901.,6925.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[6.24332,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{10083.,11375.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[4.52085,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{18658.,22992.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[2.79839,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{45019.,55938.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[1.07592,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{106481.,132504.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-0.646546,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{185559.,208250.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-2.36901,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{217533.,231085.},False},1,2,IndependentUnit["Rfus"]]},{Quantity[-4.09148,("Micrograms")/("Milliliters")],DataDistribution["Empirical",{{0.5,0.5},{222652.,235604.},False},1,2,IndependentUnit["Rfus"]]}};
		quantityDataAnalyte = {{Quantity[7.96578, "Micrograms"/"Milliliters"], Quantity[5717., IndependentUnit["Rfus"]]}, {Quantity[6.24332, "Micrograms"/"Milliliters"], Quantity[8843.5, IndependentUnit["Rfus"]]}, {Quantity[4.52085, "Micrograms"/"Milliliters"], Quantity[15175.5, IndependentUnit["Rfus"]]}, {Quantity[2.79839, "Micrograms"/"Milliliters"], Quantity[34229., IndependentUnit["Rfus"]]}, {Quantity[1.07592, "Micrograms"/"Milliliters"], Quantity[84553., IndependentUnit["Rfus"]]}, {Quantity[-0.646546, "Micrograms"/"Milliliters"], Quantity[164801.5, IndependentUnit["Rfus"]]}, {Quantity[-2.36901, "Micrograms"/"Milliliters"], Quantity[213613.5, IndependentUnit["Rfus"]]}, {Quantity[-4.09148, "Micrograms"/"Milliliters"], Quantity[226544.5, IndependentUnit["Rfus"]]}}
	)

];


(* ::Section:: *)
(*End Test Package*)
