(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Title:: *)
(*Kinetics.m Tests*)


(* Mathematica package *)



(* ::Section:: *)
(*Unit Testing*)


(* ::Subsection:: *)
(*AnalyzeKinetics*)


(* ::Subsubsection:: *)
(*AnalyzeKinetics*)


DefineTests[AnalyzeKinetics, {
	(* ---- Basic ---- *)

	Example[{Basic, "Fit kinetic trajectory data to a single folding reaction:"},
		PlotKineticRates@AnalyzeKinetics[{Trajectory[{a}, {{0.00005}, {0.00004980379125636031}, {0.00004797931401312467}, {0.000043921823261030936}, {0.000032507551474818494}, {0.00002170547720691797}, {0.000011861840783041548}, {6.375696269131603*^-6}, {3.3373451059190416*^-6}, {1.9021492230925243*^-6}, {1.2242099507378387*^-6}, {9.039750582645019*^-7}, {7.527071055108151*^-7}, {6.757504183720116*^-7}, {6.414159471045256*^-7}, {6.262064659859293*^-7}, {6.204060490584712*^-7}}, {0., 0.001965993132733192, 0.020631996487825627, 0.06486088055877585, 0.21594998786034716, 0.42018871544292336, 0.7307266835875093, 1.0612087858073724, 1.43157915617779, 1.8019495265482077, 2.1723198969110284, 2.542690267273849, 2.9130606376366694, 3.327854466708063, 3.7648600251337427, 4.256207556953706, 4.774726075470811}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}], Trajectory[{a}, {{9.999999999999999*^-6}, {9.960758251272061*^-6}, {9.595862803001483*^-6}, {8.784364653583353*^-6}, {6.501510296494001*^-6}, {4.341095442760453*^-6}, {2.3723681575621905*^-6}, {1.2751392543929068*^-6}, {6.674690214558047*^-7}, {3.8042984474904684*^-7}, {2.448419902075521*^-7}, {1.8079501168044175*^-7}, {1.5054142111479797*^-7}, {1.3515008368026306*^-7}, {1.282831894236088*^-7}, {1.2524129319822078*^-7}, {1.2408120981205644*^-7}}, {0., 0.001965993132733192, 0.020631996468194726, 0.06486088048025224, 0.2159499877418627, 0.4201887152817146, 0.7307266833780494, 1.0612087855644254, 1.4315791559308837, 1.8019495262973422, 2.1723198966669943, 2.542690267036646, 2.913060637406298, 3.32785446646055, 3.764860024857102, 4.256207556667308, 4.774726075184341}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}]}, a \[Equilibrium] b],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],

	Example[{Basic, "Plot results of fitting catch-and-release data to ReactionMechanism with three reactions:"},
		PlotKineticRates[AnalyzeKinetics[trajectoriesB, {{f + q \[Equilibrium] fq, kf1, kb1}, {fq + r \[Equilibrium] f + qr, kf2, kb2}, {q + r \[Equilibrium] qr, kf3, kb3}},
			InitialConcentration -> initialConcentrationB,Injections -> injectionsB, InitialVolume -> initialVolumeB]],
		ValidGraphicsP[],
		TimeConstraint -> 900
	],


	Example[{Basic, "Fit fluorescence kinetics data to a single pairing reaction:"},
		PlotKineticRates@AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[],
		TimeConstraint -> 900
	],
	Test["Fit fluorescence kinetics data to a single pairing reaction:",
		AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		Analysis`Private`validAnalysisPacketP[Object[Analysis, Kinetics],
			{
				Replace[Species] -> {Structure[{Strand[DNA["AAAAAAA"],	Modification["Fluorescein"]]}, {}],
					Structure[{	Strand[	Modification["Dabcyl"],	DNA["TTTTTTT"]]}, {}],
					Structure[{	Strand[	DNA["AAAAAAA"],	Modification["Fluorescein"]],	Strand[	Modification["Dabcyl"],	DNA["TTTTTTT"]]}, {	Bond[{1, 1,	Span[1, 7]}, {2, 2,	Span[1, 7]}]}]},
				Append[Reference]->{Link[Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], RateFittingAnalyses],	Link[Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"], RateFittingAnalyses],Link[Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"], RateFittingAnalyses]},
				Replace[TrainingData] -> {Repeated[{_State,InjectionsFormatP,_Trajectory,VolumeP},{3}]},
				Replace[Rates] -> {{_Symbol?(StringMatchQ[SymbolName[#],"kb"~~___]&), _?NumericQ}, {_Symbol?(StringMatchQ[SymbolName[#],"kf"~~___]&), _?NumericQ}},
				ReactionMechanism->ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1 ;; 7}, {2, 2 ;; 8}]}]}, _?NumericQ, _?NumericQ]],
				PredictedTrajectories -> {_Trajectory, _Trajectory,_Trajectory},
				NumberOfIterations->RangeP[50,200,1],
				Residual -> _Real?(#<.00100&)
			}
		],
		TimeConstraint -> 900
	],

	Example[{Basic, "Fit to all kinetic data in a protocol:"},
		PlotKineticRates[AnalyzeKinetics[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],
			ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],

	Test["Fit to all kinetic data in an AbsorbanceKinetics protocol:",
		PlotKineticRates[AnalyzeKinetics[Object[Protocol, AbsorbanceKinetics, "AbsorbanceKinetics AnalyzeKinetics Test Protocol"],
			ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False, StandardCurve -> Object[Analysis, Fit, "AbsorbanceKinetics AnalyzeKinetics Test Fit"]]
		],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],

	Test["Fit to all kinetic data in a LuminescenceKinetics protocol:",
		PlotKineticRates[AnalyzeKinetics[Object[Protocol, LuminescenceKinetics, "LuminescenceKinetics AnalyzeKinetics Test Protocol"],
			ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False, StandardCurve -> Object[Analysis, Fit, "LuminescenceKinetics AnalyzeKinetics Test Fit"]]
		],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],


	Example[{Basic,"Specify kinetics equations to fit to:"},
		AnalyzeKinetics[
			assocDissocData,
			{
				A'[t] == 0,
				R'[t] == 10^kon * A[t] * Rmax - R[t]*(10^kon * A[t] + 10^koff),
				WhenEvent[t > 2000, {A[t] -> 0}]
			},
			ObservedSpecies -> Table[{R}, Length[assocDissocData]],
			InitialConcentration -> Table[{R -> 0, A -> A0}, {A0, analyteConcentrations}],
			Output -> Preview
		],
		ValidGraphicsP[]
	],

(* --------- ADDITIONAL ------------ *)


	Example[{Additional, "Reaction Specifications", "Reactions can be specified as implicit reactions or a ReactionMechanism:"},
		PlotKineticRates[AnalyzeKinetics[trajectoriesA, ReactionMechanism[Reaction[{a, b}, {c}, kf, kb]],InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA, Upload -> False]],
		ValidGraphicsP[],
		TimeConstraint -> 900
	],

	Example[{Additional, "Reaction Specifications","Symbolic rate names are automatically generated if unspecified:"},
		PlotKineticRates@AnalyzeKinetics[trajectoriesA, a + b \[Equilibrium] c,InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA,Upload -> False],
		ValidGraphicsP[],
		TimeConstraint -> 900
	],
	Example[{Additional, "Reaction Specifications", "Reactions can contain mixture of known numeric rates and unknown symblic rates:"},
		PlotKineticRates@AnalyzeKinetics[trajectoriesB, {{f + q \[Equilibrium] fq, kf1, 2*10^-5}, {fq + r \[Equilibrium] f + qr, kf2, kb2}, {q + r \[Equilibrium] qr, 10^6, kb3}},
			InitialConcentration -> initialConcentrationB,Injections -> injectionsB, InitialVolume -> initialVolumeB,Upload -> False],
		ValidGraphicsP[],
		TimeConstraint -> 900
	],

	Example[{Additional, "Observed Species", "Trajectories can be observations on different species:"},
		PlotKineticRates[AnalyzeKinetics[trajectoriesC, {{f + q \[Equilibrium] fq, kf1, kb1}, {fq + r \[Equilibrium] f + qr,kf2, kb2}},
			InitialConcentration -> initialConcentrationC,Injections -> injectionsC, InitialVolume -> initialVolumeC,Upload -> False]],
		ValidGraphicsP[],
		TimeConstraint -> 900
	],



	(* --------- OPTIONS ------------ *)

	Example[{Options, Rates, "Specify guesses for the initial rates:"},
		PlotKineticRates@AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Rates->{kf->10^5.1,kb->10^-5.4},StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 900
	],
	Example[{Options, Rates, "Specify intervals in which you expect to the true rate values to lie:"},
		PlotKineticRates[AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Rates->{kf->{10^4,10^6},kb->{10^-6,10^-4}},StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 1000
	],
	Example[{Options, Rates, "Use simulation object for initial guesses:"},
		PlotKineticRates@AnalyzeKinetics[trajectoriesA, {{a + b \[Equilibrium] c, kf, kb}},InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA,Rates -> Object[Simulation, Kinetics, "id:6V0npvK7Y6Bq"],Upload -> False],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 1000
	],

	Example[{Options, OptimizationType, "Use global search with rate intervals:"},
		PlotKineticRates@AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],OptimizationType->Global,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 1000
	],
	Example[{Options, OptimizationType, "Use local search with rate guesses:"},
		PlotKineticRates[AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],OptimizationType->Local,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 1000
	],

	Example[{Options, OptimizationOptions, "Specify accuracy and precision of optimization:"},
		PlotKineticRates@AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			OptimizationOptions->{PrecisionGoal->4,AccuracyGoal->4}, Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 1000
	],

	Example[{Options, Template, "Use resolved options from previous rate fitting analysis:"},
		PlotKineticRates@AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]},
			{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Template->Object[Analysis,Kinetics,"id:6V0npvmmPGj1"]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[4],
		TimeConstraint -> 1000
	],

	Example[{Options, Domain, "Exclude from the fitting calculation any data points beyond 500 seconds:"},
		PlotKineticRates[AnalyzeKinetics[trajectoriesA, {{a + b \[Equilibrium] c, kf, kb}},InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA,Domain->{0*Second,500*Second},Upload -> False]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 1000
	],
	Test["Domain as mixture of All and time:",
		PlotKineticRates@AnalyzeKinetics[trajectoriesA, {{a + b \[Equilibrium] c, kf, kb}},InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA,Domain->{All,500*Second},Upload -> False],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 1000
	],

	Example[{Options, StandardCurve, "Specify fit object containing standard curve:"},
		PlotKineticRates[AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:L8kPEjNLPGZl"], Object[Data, FluorescenceKinetics, "id:E8zoYveRop3w"],
			Object[Data, FluorescenceKinetics, "id:AEqRl954R1a1"]}, {{a + b \[Equilibrium] c, kf, kb}}, Upload -> False, StandardCurve -> Object[Analysis, Fit, "id:dORYzZn0XRbq"],ObservedSpecies->c,InitialConcentration->{{a -> Quantity[50., "Nanomolar"]}, {a ->
				Quantity[50., "Nanomolar"]}, {a -> Quantity[50., "Nanomolar"]}},Injections->{{{Quantity[1800., "Seconds"], b, Quantity[5., "Microliters"],
			Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,	"Seconds"], b, Quantity[7., "Microliters"],	Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,		"Seconds"], b, Quantity[9., "Microliters"],
			Quantity[0.5, ("Micromoles")/("Liters")]}}},InitialVolume->{Quantity[155, "Microliters"], Quantity[147, "Microliters"],	Quantity[143, "Microliters"]}]],
			ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		Messages:>{Warning::PredictedValueOutOfDomain, AnalyzeKinetics::PoorOptimization},
		TimeConstraint -> 1000
	],
	Example[{Options, StandardCurve, "Specify standard curve datas and concentrations:"},
		PlotKineticRates[AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:L8kPEjNLPGZl"], Object[Data, FluorescenceKinetics, "id:E8zoYveRop3w"],
			Object[Data, FluorescenceKinetics, "id:AEqRl954R1a1"]}, {{a + b \[Equilibrium] c, kf, kb}}, Upload -> False, StandardCurve -> {{Object[Data, FluorescenceKinetics, "id:bq9LA0dBLvXm"], Quantity[0, "Nanomolar"]}, {Object[Data, FluorescenceKinetics, "id:dORYzZn0Y00G"], Quantity[10, "Nanomolar"]}, {Object[Data, FluorescenceKinetics, "id:Z1lqpMGjqJd9"], Quantity[20, "Nanomolar"]}, {Object[Data, FluorescenceKinetics, "id:R8e1PjRD1Eqj"], Quantity[30, "Nanomolar"]}, {Object[Data, FluorescenceKinetics, "id:01G6nvkK6JlE"], Quantity[40, "Nanomolar"]}, {Object[Data, FluorescenceKinetics, "id:4pO6dMWv6vKo"], Quantity[50, "Nanomolar"]}},Rates -> {kf1 -> 10^5, kb1 -> 10^-5},ObservedSpecies->c,InitialConcentration->{{a -> Quantity[50., "Nanomolar"]}, {a ->
				Quantity[50., "Nanomolar"]}, {a -> Quantity[50., "Nanomolar"]}},Injections->{{{Quantity[1800., "Seconds"], b, Quantity[5., "Microliters"],
			Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,	"Seconds"], b, Quantity[7., "Microliters"],	Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,		"Seconds"], b, Quantity[9., "Microliters"],
			Quantity[0.5, ("Micromoles")/("Liters")]}}},InitialVolume->{Quantity[155, "Microliters"], Quantity[147, "Microliters"],	Quantity[143, "Microliters"]}]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[6],
		Messages:>{Warning::PredictedValueOutOfDomain},
		TimeConstraint -> 1000
	],
	Example[{Options, StandardCurve, "Specify standard curve fluorescences and concentrations:"},
		PlotKineticRates[AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:L8kPEjNLPGZl"], Object[Data, FluorescenceKinetics, "id:E8zoYveRop3w"],
			Object[Data, FluorescenceKinetics, "id:AEqRl954R1a1"]}, {{a + b \[Equilibrium] c, kf, kb}}, Upload -> False, StandardCurve -> {{Quantity[20660., IndependentUnit["Rfus"]], Quantity[0, "Nanomolar"]}, {Quantity[67290., IndependentUnit["Rfus"]], Quantity[10, "Nanomolar"]},
			{Quantity[104900., IndependentUnit["Rfus"]], Quantity[20, "Nanomolar"]}, {Quantity[143100., IndependentUnit["Rfus"]], Quantity[30, "Nanomolar"]}, {Quantity[183100., IndependentUnit["Rfus"]], Quantity[40, "Nanomolar"]}, {Quantity[232600., IndependentUnit["Rfus"]], Quantity[50, "Nanomolar"]}},Rates -> {kf1 -> 10^5, kb1 -> 10^-5},ObservedSpecies->c,InitialConcentration->{{a -> Quantity[50., "Nanomolar"]}, {a ->
				Quantity[50., "Nanomolar"]}, {a -> Quantity[50., "Nanomolar"]}},Injections->{{{Quantity[1800., "Seconds"], b, Quantity[5., "Microliters"],
			Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,	"Seconds"], b, Quantity[7., "Microliters"],	Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,		"Seconds"], b, Quantity[9., "Microliters"],
			Quantity[0.5, ("Micromoles")/("Liters")]}}},InitialVolume->{Quantity[155, "Microliters"], Quantity[147, "Microliters"],	Quantity[143, "Microliters"]}]],
			ValidGraphicsP[],
		TimeConstraint -> 1000
	],

	Example[{Options, StandardCurveFitType, "Fit a cubic standard curve:"},
		PlotKineticRates[
			AnalyzeKinetics[{Object[Data, FluorescenceKinetics,
				"id:L8kPEjNLPGZl"],
				Object[Data, FluorescenceKinetics, "id:E8zoYveRop3w"],
				Object[Data, FluorescenceKinetics,
					"id:AEqRl954R1a1"]}, {{a + b \[Equilibrium] c, kf, kb}},
				Upload -> False,
				StandardCurve -> {{Quantity[20660., IndependentUnit["Rfus"]],
					Quantity[0, "Nanomolar"]}, {Quantity[67290.,
					IndependentUnit["Rfus"]],
					Quantity[10, "Nanomolar"]}, {Quantity[104900.,
					IndependentUnit["Rfus"]],
					Quantity[20, "Nanomolar"]}, {Quantity[143100.,
					IndependentUnit["Rfus"]],
					Quantity[30, "Nanomolar"]}, {Quantity[183100.,
					IndependentUnit["Rfus"]],
					Quantity[40, "Nanomolar"]}, {Quantity[232600.,
					IndependentUnit["Rfus"]], Quantity[50, "Nanomolar"]}},
				Rates -> {kf1 -> 10^5, kb1 -> 10^-5}, ObservedSpecies -> c,
				InitialConcentration -> {{a -> Quantity[50., "Nanomolar"]}, {a ->
						Quantity[50., "Nanomolar"]}, {a -> Quantity[50., "Nanomolar"]}},
				Injections -> {{{Quantity[1800., "Seconds"], b,
					Quantity[5., "Microliters"],
					Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,
					"Seconds"], b, Quantity[7., "Microliters"],
					Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,
					"Seconds"], b, Quantity[9., "Microliters"],
					Quantity[0.5, ("Micromoles")/("Liters")]}}},
				InitialVolume -> {Quantity[155, "Microliters"],
					Quantity[147, "Microliters"], Quantity[143, "Microliters"]},
				StandardCurveFitType -> Cubic]],
		ValidGraphicsP[],
		TimeConstraint -> 1000
	],

	Example[{Options, StandardCurveFitOptions, "Specify options for standard fitting:"},
		PlotKineticRates[
			AnalyzeKinetics[{Object[Data, FluorescenceKinetics,
				"id:L8kPEjNLPGZl"],
				Object[Data, FluorescenceKinetics, "id:E8zoYveRop3w"],
				Object[Data, FluorescenceKinetics,
					"id:AEqRl954R1a1"]}, {{a + b \[Equilibrium] c, kf, kb}},
				Upload -> False,
				StandardCurve -> {{Quantity[20660., IndependentUnit["Rfus"]],
					Quantity[0, "Nanomolar"]}, {Quantity[67290.,
					IndependentUnit["Rfus"]],
					Quantity[10, "Nanomolar"]}, {Quantity[104900.,
					IndependentUnit["Rfus"]],
					Quantity[20, "Nanomolar"]}, {Quantity[143100.,
					IndependentUnit["Rfus"]],
					Quantity[30, "Nanomolar"]}, {Quantity[183100.,
					IndependentUnit["Rfus"]],
					Quantity[40, "Nanomolar"]}, {Quantity[232600.,
					IndependentUnit["Rfus"]], Quantity[50, "Nanomolar"]}},
				Rates -> {kf1 -> 10^5, kb1 -> 10^-5}, ObservedSpecies -> c,
				InitialConcentration -> {{a -> Quantity[50., "Nanomolar"]}, {a ->
						Quantity[50., "Nanomolar"]}, {a -> Quantity[50., "Nanomolar"]}},
				Injections -> {{{Quantity[1800., "Seconds"], b,
					Quantity[5., "Microliters"],
					Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,
					"Seconds"], b, Quantity[7., "Microliters"],
					Quantity[0.5, ("Micromoles")/("Liters")]}}, {{Quantity[1800.,
					"Seconds"], b, Quantity[9., "Microliters"],
					Quantity[0.5, ("Micromoles")/("Liters")]}}},
				InitialVolume -> {Quantity[155, "Microliters"],
					Quantity[147, "Microliters"], Quantity[143, "Microliters"]},
				StandardCurveFitOptions -> {Method -> NMinimize}]],
		ValidGraphicsP[],
		TimeConstraint -> 1000,
		Messages:>{NonlinearModelFit::lmnl}
	],

	Example[{Options, ObservedSpecies, "Specify which species in the mechansim corresponds to the fluorescence datas:"},
		PlotKineticRates[AnalyzeKinetics[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],
			ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			ObservedSpecies->Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}],Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],

	Example[{Options, AssayWells, "Specify which data wells to fit to:"},
		PlotKineticRates[AnalyzeKinetics[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"], ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], AssayWells->{"A1","A3"},Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],


	Example[{Options, Injections, "Specify the injections corresponding to each input data:"},
		PlotKineticRates[
			AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"],
				Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]},
				ReactionMechanism[
					Reaction[{Structure[{Strand[DNA["AAAAAAA"],
						Modification["Fluorescein"]]}, {}],
						Structure[{Strand[Modification["Dabcyl"],
							DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"],
						Modification["Fluorescein"]],
						Strand[Modification["Dabcyl"],
							DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]},
						kf, kb]],
				Injections -> {{{Quantity[30., "Minutes"],
					Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}],
					Quantity[5., "Microliters"],
					Quantity[0.5, "Micromoles"/"Liters"]}}, {{Quantity[30.,
					"Minutes"],
					Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}],
					Quantity[25., "Microliters"],
					Quantity[0.5, "Micromoles"/"Liters"]}}}, Upload -> False,
				StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],
	Example[{Options, InitialConcentration, "Specify the initial concentrations in each data well:"},
		PlotKineticRates[
			AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"],
				Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]},
				ReactionMechanism[
					Reaction[{Structure[{Strand[DNA["AAAAAAA"],
						Modification["Fluorescein"]]}, {}],
						Structure[{Strand[Modification["Dabcyl"],
							DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"],
						Modification["Fluorescein"]],
						Strand[Modification["Dabcyl"],
							DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]},
						kf, kb]],
				InitialConcentration -> {{Structure[{Strand[DNA["AAAAAAA"],
					Modification["Fluorescein"]]}, {}] ->
						Quantity[0.05,
							"Micromoles"/
									"Liters"]}, {Structure[{Strand[DNA["AAAAAAA"],
					Modification["Fluorescein"]]}, {}] ->
						Quantity[0.05, "Micromoles"/"Liters"]}}, Upload -> False,
				StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],
	Example[{Options, InitialVolume, "Specify the initial volume for each data:"},
		PlotKineticRates[
			AnalyzeKinetics[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"],
				Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]},
				ReactionMechanism[
					Reaction[{Structure[{Strand[DNA["AAAAAAA"],
						Modification["Fluorescein"]]}, {}],
						Structure[{Strand[Modification["Dabcyl"],
							DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"],
						Modification["Fluorescein"]],
						Strand[Modification["Dabcyl"],
							DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]},
						kf, kb]],
				InitialVolume -> {Quantity[0.00015, "Liters"],
					Quantity[0.00015, "Liters"]}, Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]]],
		ValidGraphicsP[],
		EquivalenceFunction -> RoundMatchQ[3],
		TimeConstraint -> 900
	],

(*	Example[{Options, Output, "Return the detailed ReactionMechanism instead of Rates:"},
		AnalyzeKinetics[trajectoriesA, {{a + b \[Equilibrium] c, kf, kb}},InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA,Output->ReactionMechanism,Upload -> False],
		ReactionMechanism[Reaction[{a, b}, {c}, _?NumericQ, _?NumericQ]],
		EquivalenceFunction -> RoundMatchQ[6],
		TimeConstraint -> 1000
	],*)


	Example[{Options, InitialSpecies, "Specify which species in the ReactionMechanism is in the wells initially:"},
		PlotKineticRates[
			AnalyzeKinetics[
				Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],
				ReactionMechanism[Reaction[{a, b}, {c}, kf, kb]], Upload -> False,
				InitialSpecies -> a, ObservedSpecies -> a,
				StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],
				PrimaryInjectionSpecies -> b]],
			ValidGraphicsP[],
		TimeConstraint -> 1000
	],
	Example[{Options, PrimaryInjectionSpecies, "Specify which species in the ReactionMechanism is injected during primary injection:"},
		PlotKineticRates[
			AnalyzeKinetics[
				Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],
				ReactionMechanism[Reaction[{a, b}, {c}, kf, kb]], Upload -> False,
				InitialSpecies -> a, ObservedSpecies -> a,
				StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],
				PrimaryInjectionSpecies -> b]],
		ValidGraphicsP[],
		TimeConstraint -> 1000
	],
	Example[{Options, SecondaryInjectionSpecies, "Specify which species in the ReactionMechanism is injected during secondary injection:"},
		PlotKineticRates[
			AnalyzeKinetics[
				Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],
				ReactionMechanism[Reaction[{a, b}, {c}, kf, kb]], Upload -> False,
				InitialSpecies -> a, ObservedSpecies -> a,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],
				PrimaryInjectionSpecies -> b, SecondaryInjectionSpecies -> b]],
		ValidGraphicsP[],
		TimeConstraint -> 1000
	],
	Example[{Options, TertiaryInjectionSpecies, "Specify which species in the ReactionMechanism is injected during tertiary injection:"},
		PlotKineticRates[
			AnalyzeKinetics[
				Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],
				ReactionMechanism[Reaction[{a, b}, {c}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],
				InitialSpecies -> a, ObservedSpecies -> a,PrimaryInjectionSpecies -> b, SecondaryInjectionSpecies -> b,
				TertiaryInjectionSpecies -> b]],
		ValidGraphicsP[],
		TimeConstraint -> 1000
	],



	(* ---- Messages ---- *)

	Example[{Messages, "NoUnknownRates", "No unknown rates in the given ReactionMechanism:"},
		AnalyzeKinetics[trajectoriesA, {{a + b \[Equilibrium] c, 10^5, 10^-3}},InitialConcentration -> initialConcentrationA,Injections -> injectionsA, InitialVolume -> initialVolumeA,Upload -> False],
		$Failed,
		Messages :> {Error::NoUnknownRates}
	],
	Example[{Messages, "InvalidObservedSpecies", "ObservedSpecies must exist in given ReactionMechanism:"},
		AnalyzeKinetics[{Trajectory[{a}, {{0.00005}, {0.00004980379125636031}, {0.00004797931401312467}, {0.000043921823261030936}, {0.000032507551474818494}, {0.00002170547720691797}, {0.000011861840783041548}, {6.375696269131603*^-6}, {3.3373451059190416*^-6}, {1.9021492230925243*^-6}, {1.2242099507378387*^-6}, {9.039750582645019*^-7}, {7.527071055108151*^-7}, {6.757504183720116*^-7}, {6.414159471045256*^-7}, {6.262064659859293*^-7}, {6.204060490584712*^-7}}, {0., 0.001965993132733192, 0.020631996487825627, 0.06486088055877585, 0.21594998786034716, 0.42018871544292336, 0.7307266835875093, 1.0612087858073724, 1.43157915617779, 1.8019495265482077, 2.1723198969110284, 2.542690267273849, 2.9130606376366694, 3.327854466708063, 3.7648600251337427, 4.256207556953706, 4.774726075470811}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}], Trajectory[{a}, {{9.999999999999999*^-6}, {9.960758251272061*^-6}, {9.595862803001483*^-6}, {8.784364653583353*^-6}, {6.501510296494001*^-6}, {4.341095442760453*^-6}, {2.3723681575621905*^-6}, {1.2751392543929068*^-6}, {6.674690214558047*^-7}, {3.8042984474904684*^-7}, {2.448419902075521*^-7}, {1.8079501168044175*^-7}, {1.5054142111479797*^-7}, {1.3515008368026306*^-7}, {1.282831894236088*^-7}, {1.2524129319822078*^-7}, {1.2408120981205644*^-7}}, {0., 0.001965993132733192, 0.020631996468194726, 0.06486088048025224, 0.2159499877418627, 0.4201887152817146, 0.7307266833780494, 1.0612087855644254, 1.4315791559308837, 1.8019495262973422, 2.1723198966669943, 2.542690267036646, 2.913060637406298, 3.32785446646055, 3.764860024857102, 4.256207556667308, 4.774726075184341}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}]}, a \[Equilibrium] b, Upload -> False,ObservedSpecies->X],
		$Failed,
		Messages :> {Error::InvalidObservedSpecies}
	],
	Example[{Messages, "InvalidInjectionSpecies", "InvalidInjectionSpecies must exist in given ReactionMechanism:"},
		AnalyzeKinetics[trajectoriesB, {{f + q \[Equilibrium] fq, kf1, kb1}, {fq + r \[Equilibrium] f + qr, kf2, kb2}, {q + r \[Equilibrium] qr, kf3, kb3}},
			InitialConcentration -> initialConcentrationB,Injections -> {{{Quantity[100., "Seconds"], q, Quantity[20, "Microliters"],
		Quantity[50., "Nanomolar"]}, {Quantity[1100., "Seconds"], X,
		Quantity[30, "Microliters"],
		Quantity[125., "Nanomolar"]}}, {{Quantity[100., "Seconds"], q,
		Quantity[50, "Microliters"],
		Quantity[150., "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[30, "Microliters"],
		Quantity[150., "Nanomolar"]}}, {{Quantity[100., "Seconds"], q,
		Quantity[80, "Microliters"],
		Quantity[250, "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[30, "Microliters"], Quantity[175, "Nanomolar"]}}}, InitialVolume -> initialVolumeB,	Upload -> False],
		$Failed,
		Messages :> {Error::InvalidInjectionSpecies}
	],
	Example[{Messages, "NoAssayWells", "Protocol must have at least 1 well linked to data:"},
		AnalyzeKinetics[Object[Protocol, FluorescenceKinetics, "id:0"], {{a + b \[Equilibrium] c, kf,
			kb}}, Upload -> False, StandardCurve -> Object[Analysis, Fit, "id:dORYzZn0XRbq"],	ObservedSpecies -> c],
		$Failed,
		Messages :> {Error::NoAssayWells},
		Stubs:>{Download[Object[Protocol, FluorescenceKinetics, "id:0"],___]:=<||>}
	],


	Example[{Messages, "InvalidAnalyzeKineticsOption", "Option lengths must match:"},
		AnalyzeKinetics[trajectoriesA, {{a + b \[Equilibrium] c, 10^5,
			10^-3}}, InitialConcentration -> initialConcentrationA,
			Injections -> injectionsA, InitialVolume -> Most[initialVolumeA],
			Upload -> False],
		$Failed,
		Messages :> {Error::InvalidAnalyzeKineticsOption}
	],

	Example[{Messages, "PredictedValueOutOfDomain", "Warning if fluorescence data points lies outside of range of standard curve fit:"},
		PlotKineticRates@AnalyzeKinetics[{Object[Data, FluorescenceKinetics,
			"id:L8kPEjNLPGZl"],
			Object[Data, FluorescenceKinetics, "id:E8zoYveRop3w"],
			Object[Data, FluorescenceKinetics,
				"id:AEqRl954R1a1"]}, {{a + b \[Equilibrium] c, kf, kb}},
			Upload -> False,
			StandardCurve -> {{Object[Data, FluorescenceKinetics,
				"id:bq9LA0dBLvXm"],
				Quantity[0, "Nanomolar"]}, {Object[Data, FluorescenceKinetics,
				"id:dORYzZn0Y00G"],
				Quantity[10, "Nanomolar"]}, {Object[Data, FluorescenceKinetics,
				"id:Z1lqpMGjqJd9"],
				Quantity[20, "Nanomolar"]}, {Object[Data, FluorescenceKinetics,
				"id:R8e1PjRD1Eqj"],
				Quantity[30, "Nanomolar"]}, {Object[Data, FluorescenceKinetics,
				"id:01G6nvkK6JlE"],
				Quantity[40, "Nanomolar"]}, {Object[Data, FluorescenceKinetics,
				"id:4pO6dMWv6vKo"], Quantity[50, "Nanomolar"]}},
			Rates -> {kf1 -> 10^5, kb1 -> 1/10^5}, ObservedSpecies -> c,
			InitialConcentration -> {{a -> Quantity[50.`, "Nanomolar"]}, {a ->
					Quantity[50.`, "Nanomolar"]}, {a ->
					Quantity[50.`, "Nanomolar"]}},
			Injections -> {{{Quantity[1800.`, "Seconds"], b,
				Quantity[5.`, "Microliters"],
				Quantity[0.5`, ("Micromoles")/("Liters")]}}, {{Quantity[1800.`,
				"Seconds"], b, Quantity[7.`, "Microliters"],
				Quantity[0.5`, ("Micromoles")/("Liters")]}}, {{Quantity[1800.`,
				"Seconds"], b, Quantity[9.`, "Microliters"],
				Quantity[0.5`, ("Micromoles")/("Liters")]}}},
			InitialVolume -> {Quantity[155, "Microliters"],
				Quantity[147, "Microliters"], Quantity[143, "Microliters"]}],
		ValidGraphicsP[],
		Messages :> {Warning::PredictedValueOutOfDomain},
		EquivalenceFunction -> RoundMatchQ[6]
	],
	Example[{Messages, "ReturningInitialGuess", "Data for which the rate constants cannot be optimized returns the initial guess:"},
		AnalyzeKinetics[
			{Trajectory[{f}, {{0},{0},{0}}, {0,2,4}, {Quantity[1,"Seconds"],Quantity[1,"Nanomolar"]}]},
			ReactionMechanism[{Reaction[{f,q},{r},kf]}],
			InitialConcentration -> {{f->1 Molar}},
			ObservedSpecies -> f,
			Output -> Result,
			Upload -> False,
			Rates -> {kf -> 10^5},
			OptimizationType -> Local
		],
		ObjectP[Object[Analysis, Kinetics]],
		Messages :> {AnalyzeKinetics::PoorOptimization}
	],

	(*
	Example[{Messages, "NoData", "Protocol must have data objects linked to it:"},
		AnalyzeKinetics[Object[Protocol, FluorescenceKinetics, "id:0"], {{a + b \[Equilibrium] c, kf,
			kb}}, Upload -> False, StandardCurve -> Object[Analysis, Fit, "id:dORYzZn0XRbq"],	ObservedSpecies -> c],
		$Failed,
		Messages :> {AnalyzeKinetics::NoData},
		Stubs:>{Download[Object[Protocol, FluorescenceKinetics, "id:0"],___]:=NullPacket[protocol[FluorescenceKinetics]]}
	],
*)

	(* ---- Tests ---- *)

	Test["Upload result:",
		AnalyzeKinetics[{Trajectory[{a}, {{0.00005}, {0.00004980379125636031}, {0.00004797931401312467}, {0.000043921823261030936}, {0.000032507551474818494}, {0.00002170547720691797}, {0.000011861840783041548}, {6.375696269131603*^-6}, {3.3373451059190416*^-6}, {1.9021492230925243*^-6}, {1.2242099507378387*^-6}, {9.039750582645019*^-7}, {7.527071055108151*^-7}, {6.757504183720116*^-7}, {6.414159471045256*^-7}, {6.262064659859293*^-7}, {6.204060490584712*^-7}}, {0., 0.001965993132733192, 0.020631996487825627, 0.06486088055877585, 0.21594998786034716, 0.42018871544292336, 0.7307266835875093, 1.0612087858073724, 1.43157915617779, 1.8019495265482077, 2.1723198969110284, 2.542690267273849, 2.9130606376366694, 3.327854466708063, 3.7648600251337427, 4.256207556953706, 4.774726075470811}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}], Trajectory[{a}, {{9.999999999999999*^-6}, {9.960758251272061*^-6}, {9.595862803001483*^-6}, {8.784364653583353*^-6}, {6.501510296494001*^-6}, {4.341095442760453*^-6}, {2.3723681575621905*^-6}, {1.2751392543929068*^-6}, {6.674690214558047*^-7}, {3.8042984474904684*^-7}, {2.448419902075521*^-7}, {1.8079501168044175*^-7}, {1.5054142111479797*^-7}, {1.3515008368026306*^-7}, {1.282831894236088*^-7}, {1.2524129319822078*^-7}, {1.2408120981205644*^-7}}, {0., 0.001965993132733192, 0.020631996468194726, 0.06486088048025224, 0.2159499877418627, 0.4201887152817146, 0.7307266833780494, 1.0612087855644254, 1.4315791559308837, 1.8019495262973422, 2.1723198966669943, 2.542690267036646, 2.913060637406298, 3.32785446646055, 3.764860024857102, 4.256207556667308, 4.774726075184341}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}]}, a \[Equilibrium] b, Upload -> True],
		ObjectReferenceP[Object[Analysis,Kinetics]]
	]


},
Variables:>{
	injectionsA,initialConcentrationA,initialVolumeA,trajectoriesA,
	injectionsB, initialConcentrationB, initialVolumeB, trajectoriesB,
	injectionsC, initialConcentrationC, initialVolumeC, trajectoriesC,
	assocDissocData,analyteConcentrations
},
SetUp :> (
	initialConcentrationA = {{a -> Quantity[60, "Nanomolar"]},  {a -> Quantity[60, "Nanomolar"]},  {a -> Quantity[60, "Nanomolar"]}};
	injectionsA = {{{Quantity[100, "Seconds"], b, Quantity[10., "Microliters"],
		Quantity[40., "Nanomolar"]}},  {{Quantity[100, "Seconds"], b,
		Quantity[23.33, "Microliters"],
		Quantity[57.78, "Nanomolar"]}}, {{Quantity[100, "Seconds"], b,
		Quantity[36.67, "Microliters"], Quantity[75.56, "Nanomolar"]}}};
	initialVolumeA = {Quantity[240., "Microliters"], Quantity[226.7, "Microliters"], Quantity[213.3, "Microliters"]};
	trajectoriesA = {Trajectory[{c}, {{5.634`*^-11}, {1.78`*^-11}, {4.49`*^-11},
		{-9.649`*^-12}, {-5.051`*^-11}, {-2.548`*^-10}, {1.224`*^-11},
		{-1.3`*^-10}, {1.753`*^-10}, {2.433`*^-10}, {5.132`*^-10},
		{9.188`*^-10}, {1.064`*^-9}, {1.137`*^-9}, {1.413`*^-9},
		{1.381`*^-9}, {1.492`*^-9}, {1.531`*^-9}, {1.423`*^-9}, {1.629`*^-9},
		{1.579`*^-9}, {1.663`*^-9}, {1.569`*^-9}, {1.59`*^-9}, {1.473`*^-9},
		{1.637`*^-9}, {1.483`*^-9}, {1.853`*^-9}, {1.793`*^-9}, {1.553`*^-9},
		{1.643`*^-9}, {1.572`*^-9}, {1.522`*^-9}, {1.384`*^-9}, {1.69`*^-9},
		{1.538`*^-9}, {1.487`*^-9}, {1.813`*^-9}, {1.562`*^-9}, {1.594`*^-9},
		{1.674`*^-9}, {1.618`*^-9}, {1.525`*^-9}, {1.642`*^-9}, {1.725`*^-9},
		{1.629`*^-9}, {1.584`*^-9}, {1.503`*^-9}, {1.67`*^-9}, {1.821`*^-9},
		{1.622`*^-9}, {1.518`*^-9}, {1.811`*^-9}, {1.614`*^-9}, {1.818`*^-9},
		{1.594`*^-9}, {1.594`*^-9}, {1.69`*^-9}, {1.561`*^-9}, {1.749`*^-9},
		{1.569`*^-9}, {1.52`*^-9}}, {0.`, 9.487`, 39.49`, 69.49`, 99.49`,
		100.`, 100.`, 101.2`, 103.9`, 108.1`, 115.1`, 124.8`, 134.4`,
		152.2`, 170.`, 187.8`, 209.7`, 231.6`, 253.6`, 275.5`, 297.4`,
		321.7`, 346.`, 370.3`, 400.3`, 430.3`, 460.3`, 490.3`, 520.3`,
		550.3`, 580.3`, 610.3`, 640.3`, 670.3`, 700.3`, 730.3`, 760.3`,
		790.3`, 820.3`, 850.3`, 880.3`, 910.3`, 940.3`, 970.3`, 1000.`,
		1030.`, 1060.`, 1090.`, 1120.`, 1150.`, 1180.`, 1210.`, 1240.`,
		1270.`, 1300.`, 1330.`, 1360.`, 1390.`, 1420.`, 1450.`, 1480.`,
		1500.`}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}],
		Trajectory[{c}, {{1.677`*^-10}, {2.298`*^-11}, {-1.796`*^-10},
			{3.432`*^-11}, {-4.351`*^-11}, {1.45`*^-11}, {-1.237`*^-10},
			{-4.638`*^-11}, {4.336`*^-10}, {7.088`*^-10}, {1.073`*^-9},
			{2.03`*^-9}, {2.311`*^-9}, {3.339`*^-9}, {3.625`*^-9}, {4.112`*^-9},
			{4.53`*^-9}, {4.932`*^-9}, {5.194`*^-9}, {5.146`*^-9}, {5.248`*^-9},
			{5.298`*^-9}, {5.318`*^-9}, {5.426`*^-9}, {5.249`*^-9}, {5.583`*^-9},
			{5.537`*^-9}, {5.379`*^-9}, {5.297`*^-9}, {5.481`*^-9}, {5.479`*^-9},
			{5.372`*^-9}, {5.493`*^-9}, {5.363`*^-9}, {5.43`*^-9}, {5.413`*^-9},
			{5.54`*^-9}, {5.32`*^-9}, {5.325`*^-9}, {5.342`*^-9}, {5.358`*^-9},
			{5.255`*^-9}, {5.394`*^-9}, {5.314`*^-9}, {5.472`*^-9}, {5.44`*^-9},
			{5.264`*^-9}, {5.437`*^-9}, {5.468`*^-9}, {5.474`*^-9}, {5.535`*^-9},
			{5.273`*^-9}, {5.393`*^-9}, {5.428`*^-9}, {5.492`*^-9}, {5.317`*^-9},
			{5.288`*^-9}, {5.226`*^-9}, {5.113`*^-9}, {5.284`*^-9}, {5.608`*^-9},
			{5.291`*^-9}}, {0.`, 9.487`, 39.49`, 69.49`, 99.49`, 100.`, 100.`,
			100.8`, 102.8`, 105.9`, 111.5`, 119.4`, 127.4`, 141.8`, 156.2`,
			170.7`, 192.5`, 214.4`, 236.2`, 259.5`, 284.`, 308.6`, 333.2`,
			357.8`, 384.`, 412.`, 440.`, 469.`, 499.`, 529.`, 559.`, 589.`,
			619.`, 649.`, 679.`, 709.`, 739.`, 769.`, 799.`, 829.`, 859.`,
			889.`, 919.`, 949.`, 979.`, 1009.`, 1039.`, 1069.`, 1099.`, 1129.`,
			1159.`, 1189.`, 1219.`, 1249.`, 1279.`, 1309.`, 1339.`, 1369.`,
			1399.`, 1429.`, 1459.`, 1487.`}, {Quantity[1, "Seconds"],
			Quantity[1, "Molar"]}],
		Trajectory[{c}, {{-7.404`*^-11}, {-1.396`*^-10}, {-3.708`*^-11},
			{-5.593`*^-11}, {6.358`*^-11}, {-3.83`*^-11}, {-7.667`*^-11},
			{3.591`*^-11}, {3.323`*^-10}, {1.085`*^-9}, {1.792`*^-9},
			{3.094`*^-9}, {3.914`*^-9}, {5.388`*^-9}, {6.645`*^-9}, {7.458`*^-9},
			{8.456`*^-9}, {9.149`*^-9}, {9.823`*^-9}, {1.002`*^-8}, {1.039`*^-8},
			{1.068`*^-8}, {1.067`*^-8}, {1.076`*^-8}, {1.095`*^-8}, {1.102`*^-8},
			{1.1`*^-8}, {1.087`*^-8}, {1.103`*^-8}, {1.105`*^-8}, {1.083`*^-8},
			{1.113`*^-8}, {1.107`*^-8}, {1.117`*^-8}, {1.112`*^-8}, {1.105`*^-8},
			{1.108`*^-8}, {1.104`*^-8}, {1.11`*^-8}, {1.109`*^-8}, {1.112`*^-8},
			{1.103`*^-8}, {1.099`*^-8}, {1.11`*^-8}, {1.096`*^-8}, {1.099`*^-8},
			{1.096`*^-8}, {1.097`*^-8}, {1.106`*^-8}, {1.101`*^-8}, {1.115`*^-8},
			{1.103`*^-8}, {1.096`*^-8}, {1.103`*^-8}, {1.117`*^-8}, {1.117`*^-8},
			{1.118`*^-8}, {1.105`*^-8}, {1.121`*^-8}, {1.102`*^-8}, {1.117`*^-8},
			{1.105`*^-8}}, {0.`, 9.487`, 39.49`, 69.49`, 99.49`, 100.`, 100.`,
			100.6`, 102.2`, 104.8`, 109.4`, 116.2`, 122.9`, 135.1`, 147.4`,
			159.6`, 178.`, 196.3`, 214.6`, 237.3`, 264.3`, 291.3`, 318.4`,
			348.1`, 377.9`, 407.6`, 437.4`, 467.2`, 497.2`, 527.2`, 557.2`,
			587.2`, 617.2`, 647.2`, 677.2`, 707.2`, 737.2`, 767.2`, 797.2`,
			827.2`, 857.2`, 887.2`, 917.2`, 947.2`, 977.2`, 1007.`, 1037.`,
			1067.`, 1097.`, 1127.`, 1157.`, 1187.`, 1217.`, 1247.`, 1277.`,
			1307.`, 1337.`, 1367.`, 1397.`, 1427.`, 1457.`,
			1486.`}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}]};

	initialConcentrationB={{f -> Quantity[50, "Nanomolar"]}, {f ->
			Quantity[50, "Nanomolar"]}, {f -> Quantity[50, "Nanomolar"]}};
	injectionsB = {{{Quantity[100., "Seconds"], q, Quantity[20, "Microliters"],
		Quantity[50., "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[30, "Microliters"],
		Quantity[125., "Nanomolar"]}}, {{Quantity[100., "Seconds"], q,
		Quantity[50, "Microliters"],
		Quantity[150., "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[30, "Microliters"],
		Quantity[150., "Nanomolar"]}}, {{Quantity[100., "Seconds"], q,
		Quantity[80, "Microliters"],
		Quantity[250, "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[30, "Microliters"], Quantity[175, "Nanomolar"]}}};
	initialVolumeB = {Quantity[200., "Microliters"], Quantity[170., "Microliters"],
		Quantity[140., "Microliters"]};
	trajectoriesB = {Trajectory[{f}, {{4.9915`*^-8}, {4.9998`*^-8}, {4.9976`*^-8},
		{4.9948`*^-8}, {4.5578`*^-8}, {4.5407`*^-8}, {4.5213`*^-8},
		{4.5249`*^-8}, {4.4711`*^-8}, {4.4476`*^-8}, {4.3757`*^-8},
		{4.3201`*^-8}, {4.2711`*^-8}, {4.2146`*^-8}, {4.1872`*^-8},
		{4.1638`*^-8}, {4.1478`*^-8}, {4.1114`*^-8}, {4.1083`*^-8},
		{4.099`*^-8}, {4.0984`*^-8}, {4.0991`*^-8}, {4.0948`*^-8},
		{4.0994`*^-8}, {4.0915`*^-8}, {4.0873`*^-8}, {4.0891`*^-8},
		{4.0933`*^-8}, {4.089`*^-8}, {4.1047`*^-8}, {4.0825`*^-8},
		{4.0896`*^-8}, {4.0801`*^-8}, {4.0869`*^-8}, {4.0934`*^-8},
		{4.0907`*^-8}, {4.1066`*^-8}, {4.0876`*^-8}, {4.1093`*^-8},
		{4.0628`*^-8}, {3.5991`*^-8}, {3.6056`*^-8}, {3.5958`*^-8},
		{3.6045`*^-8}, {3.6589`*^-8}, {3.7219`*^-8}, {3.7429`*^-8},
		{3.8078`*^-8}, {3.8335`*^-8}, {3.8669`*^-8}, {3.8813`*^-8},
		{3.9342`*^-8}, {3.9515`*^-8}, {3.9407`*^-8}, {3.9781`*^-8},
		{3.9727`*^-8}, {3.9924`*^-8}, {3.9827`*^-8}, {3.9923`*^-8},
		{3.9796`*^-8}, {3.9924`*^-8}, {3.9898`*^-8}, {3.9822`*^-8},
		{3.9939`*^-8}, {3.9943`*^-8}, {3.9936`*^-8}, {4.0126`*^-8},
		{4.0056`*^-8}, {4.0178`*^-8}, {4.0031`*^-8}, {4.0163`*^-8},
		{3.9932`*^-8}}, {0.`, 13.282`, 55.282`, 97.282`, 100.`, 100.01`,
		101.02`, 103.58`, 107.68`, 114.79`, 124.91`, 135.04`, 153.3`,
		171.56`, 189.83`, 217.62`, 245.42`, 273.22`, 301.88`, 331.41`,
		360.94`, 390.46`, 423.6`, 456.74`, 489.87`, 531.87`, 573.87`,
		615.87`, 657.87`, 699.87`, 741.87`, 783.87`, 825.87`, 867.87`,
		909.87`, 951.87`, 993.87`, 1035.9`, 1077.9`, 1100.`, 1100.`,
		1100.7`, 1102.1`, 1107.3`, 1112.4`, 1124.5`, 1136.6`, 1153.4`,
		1174.9`, 1196.5`, 1223.4`, 1255.6`, 1287.8`, 1324.9`, 1366.9`,
		1408.9`, 1450.9`, 1492.9`, 1534.9`, 1576.9`, 1618.9`, 1660.9`,
		1702.9`, 1744.9`, 1786.9`, 1828.9`, 1870.9`, 1912.9`, 1954.9`,
		1996.9`, 2038.9`, 2079.9`}, {Quantity[1, "Seconds"],
		Quantity[1, "Molar"]}],
		Trajectory[{f}, {{4.9722`*^-8}, {4.9869`*^-8}, {5.0069`*^-8},
			{4.9908`*^-8}, {3.8712`*^-8}, {3.883`*^-8}, {3.8484`*^-8},
			{3.785`*^-8}, {3.6875`*^-8}, {3.5064`*^-8}, {3.2932`*^-8},
			{3.1219`*^-8}, {2.8059`*^-8}, {2.5991`*^-8}, {2.4002`*^-8},
			{2.1378`*^-8}, {1.9307`*^-8}, {1.7731`*^-8}, {1.5889`*^-8},
			{1.4139`*^-8}, {1.3133`*^-8}, {1.1789`*^-8}, {1.0543`*^-8},
			{1.0053`*^-8}, {9.3156`*^-9}, {8.6914`*^-9}, {8.2333`*^-9},
			{7.7003`*^-9}, {7.409`*^-9}, {7.1905`*^-9}, {6.8891`*^-9},
			{6.7314`*^-9}, {6.6049`*^-9}, {6.2555`*^-9}, {6.2013`*^-9},
			{6.0916`*^-9}, {5.992`*^-9}, {5.9598`*^-9}, {5.6712`*^-9},
			{5.7975`*^-9}, {5.7112`*^-9}, {4.8103`*^-9}, {4.9052`*^-9},
			{4.9816`*^-9}, {5.4465`*^-9}, {6.0972`*^-9}, {7.0117`*^-9},
			{8.4572`*^-9}, {9.466`*^-9}, {1.1236`*^-8}, {1.2526`*^-8},
			{1.3793`*^-8}, {1.5119`*^-8}, {1.6375`*^-8}, {1.7066`*^-8},
			{1.8342`*^-8}, {1.8974`*^-8}, {1.9572`*^-8}, {1.9969`*^-8},
			{2.0581`*^-8}, {2.0956`*^-8}, {2.1265`*^-8}, {2.1487`*^-8},
			{2.1486`*^-8}, {2.1768`*^-8}, {2.1806`*^-8}, {2.1907`*^-8},
			{2.192`*^-8}, {2.1981`*^-8}, {2.2043`*^-8}, {2.2035`*^-8},
			{2.2026`*^-8}, {2.1963`*^-8}, {2.1877`*^-8}, {2.2023`*^-8},
			{2.2128`*^-8}, {2.2041`*^-8}, {2.201`*^-8}, {2.2082`*^-8},
			{2.2014`*^-8}, {2.1909`*^-8}}, {0.`, 13.282`, 55.282`, 97.282`, 100.`,
			100.`, 100.39`, 101.58`, 103.55`, 107.19`, 112.51`, 117.82`,
			127.59`, 137.35`, 147.12`, 163.28`, 179.43`, 195.58`, 219.28`,
			242.98`, 266.69`, 300.93`, 335.17`, 369.41`, 411.41`, 453.41`,
			495.41`, 537.41`, 579.41`, 621.41`, 663.41`, 705.41`, 747.41`,
			789.41`, 831.41`, 873.41`, 915.41`, 957.41`, 999.41`, 1041.4`,
			1083.4`, 1100.`, 1100.`, 1100.3`, 1101.3`, 1102.9`, 1105.8`,
			1109.9`, 1114.`, 1121.4`, 1128.9`, 1136.3`, 1148.3`, 1160.3`,
			1172.3`, 1189.3`, 1206.4`, 1223.5`, 1246.9`, 1270.4`, 1293.8`,
			1324.9`, 1356.`, 1387.1`, 1426.8`, 1466.4`, 1506.`, 1548.`, 1590.`,
			1632.`, 1674.`, 1716.`, 1758.`, 1800.`, 1842.`, 1884.`, 1926.`,
			1968.`, 2010.`, 2052.`, 2086.5`}, {Quantity[1, "Seconds"],
			Quantity[1, "Molar"]}],
		Trajectory[{f}, {{4.9825`*^-8}, {5.0064`*^-8}, {4.9981`*^-8},
			{4.9881`*^-8}, {3.17`*^-8}, {3.1732`*^-8}, {3.1517`*^-8},
			{3.0781`*^-8}, {2.9391`*^-8}, {2.7256`*^-8}, {2.4335`*^-8},
			{2.1853`*^-8}, {1.8104`*^-8}, {1.5065`*^-8}, {1.283`*^-8},
			{9.6353`*^-9}, {7.5452`*^-9}, {5.7591`*^-9}, {4.1873`*^-9},
			{3.0896`*^-9}, {2.1606`*^-9}, {1.5653`*^-9}, {1.1924`*^-9},
			{6.3518`*^-10}, {5.6641`*^-10}, {2.5994`*^-10}, {2.955`*^-10},
			{2.9354`*^-10}, {4.8531`*^-11}, {1.0771`*^-10}, {2.4452`*^-11},
			{6.9943`*^-11}, {-6.2938`*^-11}, {5.5374`*^-11}, {5.4893`*^-11},
			{-5.8074`*^-11}, {2.2302`*^-10}, {2.17`*^-10}, {-6.3482`*^-11},
			{-2.1879`*^-11}, {1.686`*^-10}, {-1.2287`*^-11}, {-1.5797`*^-10},
			{5.4531`*^-11}, {4.9818`*^-11}, {1.3763`*^-10}, {1.3711`*^-10},
			{-1.083`*^-10}, {1.9363`*^-10}, {8.6681`*^-12}, {3.0736`*^-10},
			{1.8708`*^-10}, {1.6057`*^-10}, {2.1037`*^-10}, {3.4383`*^-10},
			{2.5657`*^-10}, {5.5975`*^-10}, {1.1981`*^-9}, {1.7002`*^-9},
			{1.9891`*^-9}, {2.4282`*^-9}, {2.8439`*^-9}, {3.502`*^-9},
			{3.7775`*^-9}, {4.0193`*^-9}, {4.131`*^-9}, {4.0667`*^-9},
			{4.0818`*^-9}, {3.7064`*^-9}, {3.77`*^-9}, {3.4331`*^-9},
			{3.1033`*^-9}, {2.9149`*^-9}, {2.5259`*^-9}, {2.1827`*^-9},
			{2.1884`*^-9}, {1.7826`*^-9}, {1.6517`*^-9}, {1.4144`*^-9},
			{1.2307`*^-9}, {1.1897`*^-9}, {8.8986`*^-10}, {7.8501`*^-10},
			{6.1696`*^-10}, {6.4174`*^-10}, {5.0198`*^-10}, {5.6934`*^-10},
			{3.8664`*^-10}, {1.8624`*^-10}, {1.2829`*^-10}, {2.6484`*^-10},
			{6.647`*^-11}, {1.7498`*^-10}, {1.055`*^-10}, {1.946`*^-10},
			{2.2106`*^-10}, {-1.923`*^-11}, {-4.6871`*^-11}, {2.1466`*^-10},
			{1.0607`*^-10}, {3.574`*^-10}, {3.1519`*^-10}, {5.4506`*^-11},
			{1.262`*^-10}, {2.1061`*^-10}, {7.257`*^-11}, {4.9571`*^-11},
			{9.7716`*^-11}, {1.1585`*^-10}, {1.2006`*^-10}, {9.0157`*^-11}}, {0.`,
			13.282`, 55.282`, 97.282`, 100.`, 100.`, 100.22`, 100.92`,
			102.11`, 104.35`, 107.65`, 110.95`, 117.03`, 123.12`, 129.2`,
			138.77`, 148.34`, 157.91`, 170.74`, 183.57`, 196.4`, 212.6`,
			228.8`, 245.01`, 264.35`, 283.7`, 303.05`, 325.13`, 347.22`,
			369.3`, 395.04`, 420.77`, 446.51`, 476.15`, 505.8`, 535.45`,
			571.69`, 607.93`, 647.06`, 689.06`, 731.06`, 773.06`, 815.06`,
			857.06`, 899.06`, 941.06`, 983.06`, 1025.1`, 1067.1`, 1100.`,
			1100.`, 1100.`, 1100.1`, 1100.3`, 1100.5`, 1100.9`, 1101.3`,
			1102.8`, 1104.3`, 1105.8`, 1107.3`, 1110.1`, 1113.`, 1115.9`,
			1120.`, 1125.4`, 1130.8`, 1136.8`, 1143.4`, 1150.1`, 1157.5`,
			1165.5`, 1173.6`, 1182.2`, 1191.4`, 1200.6`, 1210.3`, 1220.5`,
			1230.8`, 1242.`, 1254.3`, 1266.5`, 1279.2`, 1292.3`, 1305.4`,
			1320.3`, 1337.2`, 1354.`, 1373.3`, 1392.5`, 1415.5`, 1438.6`,
			1471.1`, 1513.1`, 1555.1`, 1588.5`, 1613.2`, 1638.`, 1658.4`,
			1678.8`, 1704.1`, 1729.4`, 1771.4`, 1813.4`, 1855.4`, 1897.4`,
			1939.4`, 1981.4`, 2023.4`, 2065.4`,
			2100.`}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}]};

	initialConcentrationC = {{f -> Quantity[50, "Nanomolar"]}, {f ->Quantity[50, "Nanomolar"]}, {f -> Quantity[50, "Nanomolar"]}};
	injectionsC = {{{Quantity[100., "Seconds"], q, Quantity[50, "Microliters"],
		Quantity[150., "Nanomolar"]}}, {{Quantity[100., "Seconds"], q,
		Quantity[75, "Microliters"],
		Quantity[150., "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[60, "Microliters"],
		Quantity[150, "Nanomolar"]}}, {{Quantity[100., "Seconds"], q,
		Quantity[50, "Microliters"],
		Quantity[150., "Nanomolar"]}, {Quantity[1100., "Seconds"], r,
		Quantity[30, "Microliters"], Quantity[150., "Nanomolar"]}}};
	initialVolumeC = {Quantity[200., "Microliters"], Quantity[185., "Microliters"],	Quantity[170., "Microliters"]};
	trajectoriesC = {Trajectory[{f}, {{5.0526`*^-8}, {5.0216`*^-8}, {4.9752`*^-8},
		{4.9998`*^-8}, {4.0335`*^-8}, {4.0012`*^-8}, {3.9996`*^-8},
		{3.9166`*^-8}, {3.8287`*^-8}, {3.6676`*^-8}, {3.4758`*^-8},
		{3.2923`*^-8}, {3.0629`*^-8}, {2.7792`*^-8}, {2.535`*^-8},
		{2.3913`*^-8}, {2.1912`*^-8}, {2.0211`*^-8}, {1.8245`*^-8},
		{1.7331`*^-8}, {1.6312`*^-8}, {1.5378`*^-8}, {1.3566`*^-8},
		{1.3586`*^-8}, {1.2492`*^-8}, {1.2533`*^-8}, {1.1762`*^-8},
		{1.1264`*^-8}, {1.1074`*^-8}, {1.1231`*^-8}, {1.0422`*^-8},
		{1.0765`*^-8}, {1.0536`*^-8}, {1.046`*^-8}, {1.0653`*^-8},
		{1.0695`*^-8}, {1.0429`*^-8}, {1.047`*^-8}, {1.0382`*^-8},
		{1.0051`*^-8}, {1.0345`*^-8}, {1.0531`*^-8}, {1.0378`*^-8},
		{1.0464`*^-8}, {1.0181`*^-8}, {9.911`*^-9}, {1.0165`*^-8},
		{1.0647`*^-8}, {1.0368`*^-8}, {1.0471`*^-8}, {1.0886`*^-8},
		{1.0326`*^-8}, {1.0233`*^-8}, {1.0227`*^-8}, {1.0083`*^-8},
		{1.0662`*^-8}, {1.0203`*^-8}, {1.0296`*^-8}, {1.0175`*^-8},
		{1.0313`*^-8}, {1.0321`*^-8}, {1.0142`*^-8}, {1.0397`*^-8},
		{1.0514`*^-8}, {9.9891`*^-9}}, {0.`, 13.282`, 55.282`, 97.282`, 100.`,
		100.`, 100.42`, 101.66`, 103.73`, 107.54`, 113.09`, 118.65`,
		128.85`, 139.05`, 149.25`, 166.05`, 182.85`, 199.65`, 224.09`,
		248.53`, 272.97`, 307.67`, 342.37`, 377.07`, 419.07`, 461.07`,
		503.07`, 545.07`, 587.07`, 629.07`, 671.07`, 713.07`, 755.07`,
		797.07`, 839.07`, 881.07`, 923.07`, 965.07`, 1007.1`, 1049.1`,
		1091.1`, 1133.1`, 1175.1`, 1217.1`, 1259.1`, 1301.1`, 1343.1`,
		1385.1`, 1427.1`, 1469.1`, 1511.1`, 1553.1`, 1595.1`, 1637.1`,
		1679.1`, 1721.1`, 1763.1`, 1805.1`, 1847.1`, 1889.1`, 1931.1`,
		1973.1`, 2015.1`, 2057.1`, 2089.`}, {Quantity[1, "Seconds"],
		Quantity[1, "Molar"]}],
		Trajectory[{f}, {{5.0145`*^-8}, {5.0044`*^-8}, {5.0777`*^-8},
			{5.0128`*^-8}, {3.5627`*^-8}, {3.5298`*^-8}, {3.5257`*^-8},
			{3.51`*^-8}, {3.3482`*^-8}, {3.1456`*^-8}, {2.9907`*^-8},
			{2.7455`*^-8}, {2.4565`*^-8}, {2.2206`*^-8}, {1.9786`*^-8},
			{1.6719`*^-8}, {1.4901`*^-8}, {1.2744`*^-8}, {1.0814`*^-8},
			{9.2661`*^-9}, {7.7972`*^-9}, {7.3469`*^-9}, {5.0369`*^-9},
			{5.2946`*^-9}, {4.2555`*^-9}, {3.3759`*^-9}, {2.4959`*^-9},
			{2.4174`*^-9}, {1.8174`*^-9}, {1.3221`*^-9}, {1.8278`*^-9},
			{1.0819`*^-9}, {1.6756`*^-9}, {9.463`*^-10}, {7.8073`*^-10},
			{1.1872`*^-9}, {9.8165`*^-10}, {1.0822`*^-9}, {1.803`*^-10},
			{2.9727`*^-10}, {3.5569`*^-10}, {1.4109`*^-10}, {5.1478`*^-10},
			{1.822`*^-10}, {8.5962`*^-10}, {1.6239`*^-9}, {1.9165`*^-9},
			{3.4218`*^-9}, {4.9497`*^-9}, {6.2224`*^-9}, {7.9793`*^-9},
			{9.1482`*^-9}, {1.055`*^-8}, {1.2106`*^-8}, {1.278`*^-8},
			{1.4643`*^-8}, {1.5473`*^-8}, {1.6196`*^-8}, {1.69`*^-8},
			{1.8263`*^-8}, {1.8205`*^-8}, {1.9017`*^-8}, {1.9152`*^-8},
			{1.9451`*^-8}, {1.9902`*^-8}, {2.0138`*^-8}, {2.0657`*^-8},
			{2.0685`*^-8}, {2.1409`*^-8}, {2.1358`*^-8}, {2.2015`*^-8},
			{2.1538`*^-8}, {2.1292`*^-8}, {2.115`*^-8}, {2.187`*^-8},
			{2.1665`*^-8}, {2.2087`*^-8}, {2.2586`*^-8}, {2.2057`*^-8},
			{2.1824`*^-8}, {2.1772`*^-8}, {2.1864`*^-8}, {2.1473`*^-8},
			{2.2199`*^-8}}, {0.`, 13.282`, 55.282`, 97.282`, 100.`, 100.`,
			100.35`, 101.43`, 103.24`, 106.59`, 111.48`, 116.37`, 125.38`,
			134.38`, 143.39`, 158.27`, 173.14`, 188.02`, 209.79`, 231.56`,
			253.32`, 284.57`, 315.82`, 347.07`, 389.07`, 431.07`, 473.07`,
			515.07`, 557.07`, 599.07`, 641.07`, 683.07`, 725.07`, 767.07`,
			809.07`, 851.07`, 893.07`, 935.07`, 977.07`, 1019.1`, 1061.1`,
			1100.`, 1100.`, 1100.1`, 1100.3`, 1101.4`, 1102.5`, 1105.3`,
			1108.1`, 1112.`, 1117.1`, 1122.2`, 1128.9`, 1137.2`, 1145.5`,
			1155.7`, 1167.7`, 1179.8`, 1194.4`, 1211.5`, 1228.6`, 1248.9`,
			1272.4`, 1295.9`, 1323.5`, 1355.1`, 1386.7`, 1423.2`, 1464.6`,
			1506.`, 1547.7`, 1589.7`, 1631.7`, 1673.7`, 1715.7`, 1757.7`,
			1799.7`, 1841.7`, 1883.7`, 1925.7`, 1967.7`, 2009.7`, 2051.7`,
			2086.4`}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}],
		Trajectory[{fq,
			qr}, {{-1.4148`*^-10,
			7.5737`*^-11}, {-1.7772`*^-10, -2.2608`*^-10}, {-2.2022`*^-10,
			-5.3256`*^-11}, {-2.4356`*^-10, -1.8362`*^-10}, {9.7871`*^-11,
			-1.8717`*^-11}, {2.7661`*^-10,
			1.0156`*^-10}, {4.969`*^-11, -6.6681`*^-10}, {6.2433`*^-10,
			1.5291`*^-11}, {1.6078`*^-9,
			5.0282`*^-11}, {3.4891`*^-9, -2.5507`*^-10}, {5.5879`*^-9,
			-2.1714`*^-10}, {7.744`*^-9,
			4.692`*^-10}, {1.0303`*^-8, -5.2311`*^-11}, {1.2786`*^-8,
			9.9192`*^-11}, {1.4574`*^-8, -2.5969`*^-10}, {1.722`*^-8,
			-3.3495`*^-10}, {1.9323`*^-8, -2.545`*^-10}, {2.1039`*^-8,
			-1.243`*^-10}, {2.2631`*^-8,
			5.3102`*^-10}, {2.4369`*^-8, -3.3355`*^-10}, {2.532`*^-8,
			-2.0567`*^-10}, {2.631`*^-8, 4.848`*^-10}, {2.7479`*^-8,
			1.7921`*^-10}, {2.8645`*^-8, -2.1356`*^-12}, {2.9454`*^-8,
			-5.3194`*^-10}, {3.0097`*^-8, 1.7019`*^-10}, {3.0094`*^-8,
			2.9373`*^-10}, {3.0655`*^-8, 4.031`*^-10}, {3.163`*^-8,
			3.5187`*^-10}, {3.1666`*^-8, -4.3951`*^-10}, {3.1501`*^-8,
			-3.1154`*^-10}, {3.2062`*^-8, -4.019`*^-10}, {3.2418`*^-8,
			-3.5498`*^-10}, {3.2242`*^-8, 1.1728`*^-11}, {3.2042`*^-8,
			2.4524`*^-10}, {3.2835`*^-8, 6.3379`*^-11}, {3.2517`*^-8,
			1.334`*^-10}, {3.291`*^-8, 8.7536`*^-11}, {3.3336`*^-8,
			6.1049`*^-10}, {3.2539`*^-8,
			9.076`*^-10}, {3.3196`*^-8, -1.259`*^-10}, {2.9033`*^-8,
			2.4286`*^-10}, {2.9094`*^-8, 6.1317`*^-10}, {2.9097`*^-8,
			1.7697`*^-10}, {2.8433`*^-8, 3.7697`*^-10}, {2.7361`*^-8,
			8.9174`*^-10}, {2.6829`*^-8, 2.5089`*^-9}, {2.5539`*^-8,
			3.4629`*^-9}, {2.4184`*^-8, 4.6181`*^-9}, {2.2499`*^-8,
			6.7183`*^-9}, {2.132`*^-8, 8.1144`*^-9}, {2.0301`*^-8,
			9.2824`*^-9}, {1.9162`*^-8, 1.059`*^-8}, {1.7781`*^-8,
			1.2201`*^-8}, {1.6718`*^-8, 1.3308`*^-8}, {1.5697`*^-8,
			1.3521`*^-8}, {1.5591`*^-8, 1.5024`*^-8}, {1.3822`*^-8,
			1.5361`*^-8}, {1.3952`*^-8, 1.49`*^-8}, {1.349`*^-8,
			1.5886`*^-8}, {1.242`*^-8, 1.6609`*^-8}, {1.273`*^-8,
			1.728`*^-8}, {1.2722`*^-8, 1.751`*^-8}, {1.278`*^-8,
			1.7773`*^-8}, {1.2343`*^-8, 1.7555`*^-8}, {1.2019`*^-8,
			1.8027`*^-8}, {1.2175`*^-8, 1.7369`*^-8}, {1.213`*^-8,
			1.7909`*^-8}, {1.2019`*^-8, 1.8051`*^-8}, {1.1869`*^-8,
			1.7879`*^-8}, {1.2168`*^-8, 1.7409`*^-8}, {1.1866`*^-8,
			1.8311`*^-8}, {1.1637`*^-8, 1.7635`*^-8}, {1.2159`*^-8,
			1.8229`*^-8}, {1.1904`*^-8, 1.8254`*^-8}, {1.1833`*^-8,
			1.7888`*^-8}, {1.1599`*^-8, 1.8206`*^-8}, {1.1919`*^-8,
			1.8384`*^-8}, {1.1525`*^-8, 1.7968`*^-8}, {1.1983`*^-8,
			1.7646`*^-8}, {1.19`*^-8, 1.7471`*^-8}}, {0.`, 13.282`, 55.282`,
			97.282`, 100.`, 100.`, 100.39`, 101.58`, 103.55`, 107.19`, 112.51`,
			117.82`, 127.59`, 137.35`, 147.12`, 163.28`, 179.43`, 195.58`,
			219.28`, 242.98`, 266.69`, 300.93`, 335.17`, 369.41`, 411.41`,
			453.41`, 495.41`, 537.41`, 579.41`, 621.41`, 663.41`, 705.41`,
			747.41`, 789.41`, 831.41`, 873.41`, 915.41`, 957.41`, 999.41`,
			1041.4`, 1083.4`, 1100.`, 1100.`, 1100.3`, 1101.3`, 1102.9`,
			1105.8`, 1109.9`, 1114.`, 1121.4`, 1128.9`, 1136.3`, 1148.3`,
			1160.3`, 1172.3`, 1189.3`, 1206.4`, 1223.5`, 1246.9`, 1270.4`,
			1293.8`, 1324.9`, 1356.`, 1387.1`, 1426.8`, 1466.4`, 1506.`,
			1548.`, 1590.`, 1632.`, 1674.`, 1716.`, 1758.`, 1800.`, 1842.`,
			1884.`, 1926.`, 1968.`, 2010.`, 2052.`,
			2086.5`}, {Quantity[1, "Seconds"], Quantity[1, "Molar"]}]};
			assocDissocData = {{{0, -0.00190152}, {20, 0.0833547}, {40, 0.145203}, {60,
   0.222428}, {80, 0.296043}, {100, 0.355642}, {120, 0.432519}, {140,
   0.486746}, {160, 0.544197}, {180, 0.598193}, {200, 0.654275}, {220,
    0.708408}, {240, 0.753475}, {260, 0.803658}, {280,
   0.849112}, {300, 0.888033}, {320, 0.928932}, {340, 0.96229}, {360,
   1.01725}, {380, 1.04864}, {400, 1.07613}, {420, 1.11494}, {440,
   1.14348}, {460, 1.18681}, {480, 1.19998}, {500, 1.24418}, {520,
   1.26586}, {540, 1.28561}, {560, 1.3223}, {580, 1.33162}, {600,
   1.35536}, {620, 1.39114}, {640, 1.41576}, {660, 1.43326}, {680,
   1.45551}, {700, 1.46751}, {720, 1.47548}, {740, 1.51109}, {760,
   1.52852}, {780, 1.52556}, {800, 1.55858}, {820, 1.56741}, {840,
   1.57187}, {860, 1.58252}, {880, 1.60137}, {900, 1.61787}, {920,
   1.63647}, {940, 1.63611}, {960, 1.64515}, {980, 1.66314}, {1000,
   1.66993}, {1020, 1.67374}, {1040, 1.68955}, {1060, 1.70486}, {1080,
    1.70751}, {1100, 1.7123}, {1120, 1.72306}, {1140, 1.72851}, {1160,
    1.72856}, {1180, 1.75444}, {1200, 1.76048}, {1220,
   1.76738}, {1240, 1.75867}, {1260, 1.77731}, {1280, 1.76957}, {1300,
    1.77146}, {1320, 1.7897}, {1340, 1.78138}, {1360, 1.79834}, {1380,
    1.79476}, {1400, 1.79603}, {1420, 1.81105}, {1440,
   1.81436}, {1460, 1.81776}, {1480, 1.8249}, {1500, 1.83104}, {1520,
   1.83608}, {1540, 1.82352}, {1560, 1.8302}, {1580, 1.83845}, {1600,
   1.83677}, {1620, 1.83718}, {1640, 1.83491}, {1660, 1.85413}, {1680,
    1.85521}, {1700, 1.85205}, {1720, 1.85944}, {1740,
   1.85364}, {1760, 1.86185}, {1780, 1.85121}, {1800, 1.85694}, {1820,
    1.87292}, {1840, 1.86793}, {1860, 1.87431}, {1880,
   1.85892}, {1900, 1.86533}, {1920, 1.86437}, {1940, 1.87857}, {1960,
    1.87933}, {1980, 1.87324}, {2000, 1.886}, {2000, 1.88275}, {2020,
   1.86408}, {2040, 1.8654}, {2060, 1.86204}, {2080, 1.85317}, {2100,
   1.86658}, {2120, 1.85735}, {2140, 1.85452}, {2160, 1.84492}, {2180,
    1.85205}, {2200, 1.84319}, {2220, 1.84254}, {2240,
   1.84075}, {2260, 1.81965}, {2280, 1.83171}, {2300, 1.81613}, {2320,
    1.81511}, {2340, 1.82132}, {2360, 1.80563}, {2380,
   1.81145}, {2400, 1.79519}, {2420, 1.78968}, {2440, 1.79448}, {2460,
    1.79277}, {2480, 1.77887}, {2500, 1.77936}, {2520,
   1.78558}, {2540, 1.78007}, {2560, 1.76469}, {2580, 1.76138}, {2600,
    1.77566}, {2620, 1.75443}, {2640, 1.76755}, {2660,
   1.74654}, {2680, 1.75661}, {2700, 1.7576}, {2720, 1.75303}, {2740,
   1.74782}, {2760, 1.73384}, {2780, 1.73793}, {2800, 1.73495}, {2820,
    1.72896}, {2840, 1.7308}, {2860, 1.71216}, {2880, 1.70846}, {2900,
    1.71165}, {2920, 1.70907}, {2940, 1.71238}, {2960,
   1.71104}, {2980, 1.70051}, {3000, 1.6959}, {3020, 1.68923}, {3040,
   1.68219}, {3060, 1.6895}, {3080, 1.69221}, {3100, 1.68846}, {3120,
   1.685}, {3140, 1.66751}, {3160, 1.67756}, {3180, 1.67073}, {3200,
   1.65627}, {3220, 1.65726}, {3240, 1.65693}, {3260, 1.64973}, {3280,
    1.64132}, {3300, 1.65422}, {3320, 1.63897}, {3340,
   1.64998}, {3360, 1.64548}, {3380, 1.63006}, {3400, 1.6291}, {3420,
   1.62008}, {3440, 1.62818}, {3460, 1.61534}, {3480, 1.626}, {3500,
   1.6152}, {3520, 1.60311}, {3540, 1.61652}, {3560, 1.59767}, {3580,
   1.60726}, {3600, 1.60726}, {3620, 1.58967}, {3640, 1.59005}, {3660,
    1.58612}, {3680, 1.59226}, {3700, 1.578}, {3720, 1.57596}, {3740,
   1.58214}, {3760, 1.56716}, {3780, 1.56277}, {3800, 1.559}, {3820,
   1.56672}, {3840, 1.57022}, {3860, 1.56587}, {3880, 1.54793}, {3900,
    1.55702}, {3920, 1.54077}, {3940, 1.53892}, {3960,
   1.54115}, {3980, 1.54403}, {4000, 1.53248}, {4020, 1.53278}, {4040,
    1.5385}, {4060, 1.5351}, {4080, 1.51519}, {4100, 1.52011}, {4120,
   1.52738}, {4140, 1.50563}, {4160, 1.50576}, {4180, 1.50675}, {4200,
    1.50793}, {4220, 1.5041}, {4240, 1.50467}, {4260, 1.49707}, {4280,
    1.48981}, {4300, 1.49891}, {4320, 1.4927}, {4340, 1.47676}, {4360,
    1.47292}, {4380, 1.47528}, {4400, 1.47718}, {4420,
   1.47921}, {4440, 1.47533}, {4460, 1.47357}, {4480, 1.46396}, {4500,
    1.46476}, {4520, 1.46694}, {4540, 1.45696}, {4560,
   1.45373}, {4580, 1.44305}, {4600, 1.44395}, {4620, 1.44558}, {4640,
    1.43797}, {4660, 1.43017}, {4680, 1.43983}, {4700,
   1.42664}, {4720, 1.43432}, {4740, 1.43171}, {4760, 1.41853}, {4780,
    1.4253}, {4800, 1.4138}, {4820, 1.42387}, {4840, 1.42121}, {4860,
   1.40181}, {4880, 1.39826}, {4900, 1.40518}, {4920, 1.40117}, {4940,
    1.40395}, {4960, 1.38676}, {4980, 1.39613}, {5000,
   1.38626}, {5020, 1.39423}, {5040, 1.38405}, {5060, 1.38869}, {5080,
    1.37182}, {5100, 1.36668}, {5120, 1.36446}, {5140,
   1.37915}, {5160, 1.36837}, {5180, 1.36673}, {5200, 1.35655}, {5220,
    1.36516}, {5240, 1.35328}, {5260, 1.35815}, {5280,
   1.34343}, {5300, 1.34611}, {5320, 1.35331}, {5340, 1.33769}, {5360,
    1.34718}, {5380, 1.34451}, {5400, 1.34038}, {5420, 1.3386}, {5440,
    1.33581}, {5460, 1.32745}, {5480, 1.32678}, {5500,
   1.31456}, {5520, 1.3107}, {5540, 1.31056}, {5560, 1.31872}, {5580,
   1.30984}, {5600, 1.31555}, {5620, 1.30637}, {5640, 1.30828}, {5660,
    1.30625}, {5680, 1.29161}, {5700, 1.29606}, {5720,
   1.29993}, {5740, 1.28677}, {5760, 1.28862}, {5780, 1.29072}, {5800,
    1.2798}, {5820, 1.28553}, {5840, 1.26857}, {5860, 1.28407}, {5880,
    1.27962}, {5900, 1.2733}, {5920, 1.26907}, {5940, 1.25992}, {5960,
    1.26846}, {5980, 1.26163}, {6000,
   1.25848}}, {{0, -0.00197987}, {20, 0.0390201}, {40,
   0.0829276}, {60, 0.121757}, {80, 0.160544}, {100, 0.19468}, {120,
   0.231063}, {140, 0.256441}, {160, 0.29339}, {180, 0.330324}, {200,
   0.3628}, {220, 0.383712}, {240, 0.42713}, {260, 0.448056}, {280,
   0.477052}, {300, 0.501939}, {320, 0.542401}, {340, 0.571479}, {360,
    0.592507}, {380, 0.624985}, {400, 0.652378}, {420,
   0.679956}, {440, 0.695476}, {460, 0.730822}, {480, 0.736245}, {500,
    0.777862}, {520, 0.801282}, {540, 0.809754}, {560,
   0.840234}, {580, 0.850924}, {600, 0.874251}, {620, 0.899137}, {640,
    0.928791}, {660, 0.94024}, {680, 0.950731}, {700, 0.976355}, {720,
    1.00366}, {740, 1.0071}, {760, 1.03398}, {780, 1.05522}, {800,
   1.07247}, {820, 1.07528}, {840, 1.10058}, {860, 1.10475}, {880,
   1.13145}, {900, 1.14484}, {920, 1.16729}, {940, 1.17128}, {960,
   1.17784}, {980, 1.20651}, {1000, 1.21239}, {1020, 1.22261}, {1040,
   1.2384}, {1060, 1.25572}, {1080, 1.26169}, {1100, 1.27976}, {1120,
   1.29224}, {1140, 1.30475}, {1160, 1.31735}, {1180, 1.31951}, {1200,
    1.32408}, {1220, 1.35069}, {1240, 1.35213}, {1260,
   1.36883}, {1280, 1.37681}, {1300, 1.37835}, {1320, 1.39983}, {1340,
    1.39507}, {1360, 1.40702}, {1380, 1.42592}, {1400,
   1.43792}, {1420, 1.43035}, {1440, 1.45376}, {1460, 1.45803}, {1480,
    1.45461}, {1500, 1.47115}, {1520, 1.47191}, {1540,
   1.49115}, {1560, 1.48735}, {1580, 1.4905}, {1600, 1.50541}, {1620,
   1.50706}, {1640, 1.52706}, {1660, 1.53026}, {1680, 1.52754}, {1700,
    1.54651}, {1720, 1.54245}, {1740, 1.55725}, {1760,
   1.55231}, {1780, 1.55535}, {1800, 1.56741}, {1820, 1.56354}, {1840,
    1.58155}, {1860, 1.58321}, {1880, 1.58173}, {1900,
   1.58813}, {1920, 1.59993}, {1940, 1.59446}, {1960, 1.60408}, {1980,
    1.61303}, {2000, 1.61646}, {2000, 1.62636}, {2020, 1.6081}, {2040,
    1.61266}, {2060, 1.61548}, {2080, 1.60962}, {2100,
   1.59384}, {2120, 1.592}, {2140, 1.58905}, {2160, 1.59525}, {2180,
   1.58381}, {2200, 1.5897}, {2220, 1.58698}, {2240, 1.58313}, {2260,
   1.58163}, {2280, 1.56288}, {2300, 1.57385}, {2320, 1.55871}, {2340,
    1.55652}, {2360, 1.55211}, {2380, 1.56098}, {2400,
   1.56168}, {2420, 1.55772}, {2440, 1.55414}, {2460, 1.55229}, {2480,
    1.54926}, {2500, 1.53121}, {2520, 1.52682}, {2540,
   1.53726}, {2560, 1.52391}, {2580, 1.53528}, {2600, 1.51681}, {2620,
    1.52744}, {2640, 1.51535}, {2660, 1.51879}, {2680,
   1.50529}, {2700, 1.50993}, {2720, 1.50782}, {2740, 1.50243}, {2760,
    1.50349}, {2780, 1.4991}, {2800, 1.50104}, {2820, 1.48788}, {2840,
    1.49199}, {2860, 1.48321}, {2880, 1.47642}, {2900,
   1.47119}, {2920, 1.48338}, {2940, 1.47717}, {2960, 1.4601}, {2980,
   1.46374}, {3000, 1.46938}, {3020, 1.45916}, {3040, 1.45363}, {3060,
    1.46273}, {3080, 1.4436}, {3100, 1.45071}, {3120, 1.44156}, {3140,
    1.45252}, {3160, 1.43875}, {3180, 1.44452}, {3200,
   1.44211}, {3220, 1.43257}, {3240, 1.43307}, {3260, 1.42269}, {3280,
    1.42795}, {3300, 1.42862}, {3320, 1.41765}, {3340,
   1.41932}, {3360, 1.41201}, {3380, 1.4077}, {3400, 1.4025}, {3420,
   1.40417}, {3440, 1.40536}, {3460, 1.38715}, {3480, 1.39069}, {3500,
    1.39358}, {3520, 1.39304}, {3540, 1.39273}, {3560,
   1.38617}, {3580, 1.38744}, {3600, 1.37681}, {3620, 1.37564}, {3640,
    1.36564}, {3660, 1.37544}, {3680, 1.36824}, {3700,
   1.37151}, {3720, 1.35562}, {3740, 1.36291}, {3760, 1.36472}, {3780,
    1.34868}, {3800, 1.34767}, {3820, 1.34762}, {3840,
   1.35066}, {3860, 1.35166}, {3880, 1.33924}, {3900, 1.3442}, {3920,
   1.34428}, {3940, 1.33618}, {3960, 1.33416}, {3980, 1.32611}, {4000,
    1.31468}, {4020, 1.32542}, {4040, 1.31913}, {4060,
   1.32314}, {4080, 1.3057}, {4100, 1.30295}, {4120, 1.31557}, {4140,
   1.29971}, {4160, 1.29334}, {4180, 1.30805}, {4200, 1.29338}, {4220,
    1.2894}, {4240, 1.29072}, {4260, 1.29882}, {4280, 1.28966}, {4300,
    1.29102}, {4320, 1.27369}, {4340, 1.27603}, {4360,
   1.27551}, {4380, 1.27449}, {4400, 1.27869}, {4420, 1.27892}, {4440,
    1.26101}, {4460, 1.25573}, {4480, 1.25868}, {4500,
   1.25046}, {4520, 1.25633}, {4540, 1.26386}, {4560, 1.24872}, {4580,
    1.24209}, {4600, 1.24345}, {4620, 1.25038}, {4640,
   1.23946}, {4660, 1.23189}, {4680, 1.23649}, {4700, 1.22966}, {4720,
    1.23176}, {4740, 1.22365}, {4760, 1.23618}, {4780,
   1.22837}, {4800, 1.21313}, {4820, 1.21764}, {4840, 1.21275}, {4860,
    1.2223}, {4880, 1.21351}, {4900, 1.20198}, {4920, 1.21189}, {4940,
    1.2099}, {4960, 1.19627}, {4980, 1.19846}, {5000, 1.19242}, {5020,
    1.20077}, {5040, 1.19364}, {5060, 1.19702}, {5080,
   1.19665}, {5100, 1.18523}, {5120, 1.17779}, {5140, 1.1903}, {5160,
   1.18469}, {5180, 1.17032}, {5200, 1.17831}, {5220, 1.168}, {5240,
   1.17602}, {5260, 1.1684}, {5280, 1.16837}, {5300, 1.15423}, {5320,
   1.15563}, {5340, 1.16177}, {5360, 1.15229}, {5380, 1.15196}, {5400,
    1.15091}, {5420, 1.14781}, {5440, 1.14463}, {5460,
   1.13725}, {5480, 1.14999}, {5500, 1.13141}, {5520, 1.12784}, {5540,
    1.14424}, {5560, 1.13953}, {5580, 1.12363}, {5600,
   1.13096}, {5620, 1.11689}, {5640, 1.12886}, {5660, 1.12842}, {5680,
    1.1183}, {5700, 1.12039}, {5720, 1.1094}, {5740, 1.11355}, {5760,
   1.10807}, {5780, 1.10265}, {5800, 1.10017}, {5820, 1.10535}, {5840,
    1.09535}, {5860, 1.09269}, {5880, 1.10164}, {5900,
   1.09191}, {5920, 1.09142}, {5940, 1.09293}, {5960, 1.08634}, {5980,
    1.07734}, {6000, 1.07858}}, {{0, -0.00126638}, {20,
   0.019974}, {40, 0.0455104}, {60, 0.0560041}, {80, 0.0699188}, {100,
    0.0957712}, {120, 0.107125}, {140, 0.131154}, {160,
   0.153234}, {180, 0.16801}, {200, 0.197753}, {220, 0.199578}, {240,
   0.223845}, {260, 0.244937}, {280, 0.260009}, {300, 0.270025}, {320,
    0.282332}, {340, 0.302344}, {360, 0.313779}, {380,
   0.346823}, {400, 0.355679}, {420, 0.366434}, {440, 0.379057}, {460,
    0.397089}, {480, 0.41848}, {500, 0.42599}, {520, 0.45064}, {540,
   0.452023}, {560, 0.471788}, {580, 0.482064}, {600, 0.496631}, {620,
    0.526357}, {640, 0.521514}, {660, 0.535386}, {680,
   0.563096}, {700, 0.564396}, {720, 0.585932}, {740, 0.592131}, {760,
    0.613089}, {780, 0.625379}, {800, 0.64479}, {820, 0.651927}, {840,
    0.6539}, {860, 0.664528}, {880, 0.683458}, {900, 0.69132}, {920,
   0.700882}, {940, 0.713529}, {960, 0.736336}, {980,
   0.737125}, {1000, 0.755581}, {1020, 0.765265}, {1040,
   0.765296}, {1060, 0.783533}, {1080, 0.790791}, {1100,
   0.801212}, {1120, 0.818443}, {1140, 0.829478}, {1160,
   0.843199}, {1180, 0.850143}, {1200, 0.851876}, {1220,
   0.871749}, {1240, 0.880629}, {1260, 0.884008}, {1280,
   0.895398}, {1300, 0.907738}, {1320, 0.91279}, {1340,
   0.923207}, {1360, 0.929233}, {1380, 0.936826}, {1400,
   0.937825}, {1420, 0.95395}, {1440, 0.955723}, {1460,
   0.978758}, {1480, 0.972419}, {1500, 0.981598}, {1520,
   0.989612}, {1540, 0.997563}, {1560, 1.0135}, {1580,
   1.02358}, {1600, 1.02792}, {1620, 1.02749}, {1640, 1.04395}, {1660,
    1.05314}, {1680, 1.06716}, {1700, 1.07322}, {1720,
   1.06794}, {1740, 1.07244}, {1760, 1.09023}, {1780, 1.09306}, {1800,
    1.09277}, {1820, 1.11333}, {1840, 1.11354}, {1860,
   1.11873}, {1880, 1.12444}, {1900, 1.12522}, {1920, 1.14592}, {1940,
    1.14428}, {1960, 1.15589}, {1980, 1.16291}, {2000,
   1.16418}, {2000, 1.16692}, {2020, 1.17223}, {2040, 1.16128}, {2060,
    1.14946}, {2080, 1.14816}, {2100, 1.15688}, {2120, 1.1528}, {2140,
    1.1391}, {2160, 1.15251}, {2180, 1.15046}, {2200, 1.14007}, {2220,
    1.13516}, {2240, 1.13993}, {2260, 1.12759}, {2280,
   1.13906}, {2300, 1.12982}, {2320, 1.13226}, {2340, 1.11834}, {2360,
    1.12889}, {2380, 1.12261}, {2400, 1.12063}, {2420,
   1.12492}, {2440, 1.11998}, {2460, 1.11101}, {2480, 1.11334}, {2500,
    1.11589}, {2520, 1.11543}, {2540, 1.10422}, {2560, 1.0931}, {2580,
    1.09025}, {2600, 1.09054}, {2620, 1.10098}, {2640,
   1.10126}, {2660, 1.09658}, {2680, 1.09594}, {2700, 1.08843}, {2720,
    1.08909}, {2740, 1.08617}, {2760, 1.0827}, {2780, 1.0776}, {2800,
   1.07522}, {2820, 1.07852}, {2840, 1.07663}, {2860, 1.07557}, {2880,
    1.0684}, {2900, 1.06938}, {2920, 1.05639}, {2940, 1.05893}, {2960,
    1.04889}, {2980, 1.04943}, {3000, 1.05711}, {3020,
   1.04315}, {3040, 1.04338}, {3060, 1.05626}, {3080, 1.0551}, {3100,
   1.04322}, {3120, 1.04201}, {3140, 1.04638}, {3160, 1.03048}, {3180,
    1.04271}, {3200, 1.03107}, {3220, 1.03659}, {3240,
   1.02121}, {3260, 1.02202}, {3280, 1.02583}, {3300, 1.03184}, {3320,
    1.02511}, {3340, 1.0136}, {3360, 1.01143}, {3380, 1.0145}, {3400,
   1.01325}, {3420, 1.01002}, {3440, 1.01753}, {3460, 1.0108}, {3480,
   1.01361}, {3500, 1.00159}, {3520, 1.00417}, {3540,
   0.996231}, {3560, 0.994931}, {3580, 0.995169}, {3600,
   0.985188}, {3620, 0.99118}, {3640, 0.981296}, {3660,
   0.984492}, {3680, 0.993564}, {3700, 0.991687}, {3720,
   0.976783}, {3740, 0.974962}, {3760, 0.9668}, {3780,
   0.971026}, {3800, 0.966981}, {3820, 0.97203}, {3840,
   0.976876}, {3860, 0.961844}, {3880, 0.959934}, {3900,
   0.966694}, {3920, 0.955222}, {3940, 0.963886}, {3960,
   0.96617}, {3980, 0.949084}, {4000, 0.94429}, {4020,
   0.944881}, {4040, 0.956223}, {4060, 0.95422}, {4080,
   0.945279}, {4100, 0.942596}, {4120, 0.938274}, {4140,
   0.936704}, {4160, 0.942477}, {4180, 0.927494}, {4200,
   0.92921}, {4220, 0.938269}, {4240, 0.92887}, {4260,
   0.926765}, {4280, 0.923982}, {4300, 0.927748}, {4320,
   0.925108}, {4340, 0.924572}, {4360, 0.910493}, {4380,
   0.925862}, {4400, 0.922202}, {4420, 0.906583}, {4440,
   0.908549}, {4460, 0.913648}, {4480, 0.912309}, {4500,
   0.912471}, {4520, 0.900296}, {4540, 0.906181}, {4560,
   0.902065}, {4580, 0.905125}, {4600, 0.902146}, {4620,
   0.898436}, {4640, 0.903005}, {4660, 0.882848}, {4680,
   0.889224}, {4700, 0.891022}, {4720, 0.881246}, {4740,
   0.881832}, {4760, 0.880299}, {4780, 0.887439}, {4800,
   0.872862}, {4820, 0.886068}, {4840, 0.88115}, {4860,
   0.873876}, {4880, 0.873039}, {4900, 0.866395}, {4920,
   0.861396}, {4940, 0.873704}, {4960, 0.873118}, {4980,
   0.856385}, {5000, 0.854558}, {5020, 0.851109}, {5040,
   0.860433}, {5060, 0.8571}, {5080, 0.850218}, {5100,
   0.863287}, {5120, 0.852361}, {5140, 0.851133}, {5160,
   0.845495}, {5180, 0.851739}, {5200, 0.838255}, {5220,
   0.846767}, {5240, 0.842466}, {5260, 0.84373}, {5280,
   0.829528}, {5300, 0.836663}, {5320, 0.83414}, {5340,
   0.833626}, {5360, 0.834788}, {5380, 0.8289}, {5400,
   0.829643}, {5420, 0.82081}, {5440, 0.822051}, {5460,
   0.825126}, {5480, 0.821513}, {5500, 0.81814}, {5520,
   0.825031}, {5540, 0.811398}, {5560, 0.805892}, {5580,
   0.823179}, {5600, 0.820299}, {5620, 0.818461}, {5640,
   0.815964}, {5660, 0.802026}, {5680, 0.796358}, {5700,
   0.80926}, {5720, 0.802885}, {5740, 0.795065}, {5760,
   0.807403}, {5780, 0.795878}, {5800, 0.794308}, {5820,
   0.790685}, {5840, 0.802262}, {5860, 0.790188}, {5880,
   0.788256}, {5900, 0.796763}, {5920, 0.782036}, {5940,
   0.777522}, {5960, 0.78337}, {5980, 0.791688}, {6000, 0.79041}}};
	 analyteConcentrations = {100, 50, 25}*10^-9;
)

];


(* ::Subsubsection:: *)
(*AnalyzeKineticsOptions*)


DefineTests[AnalyzeKineticsOptions, {
	Example[{Basic,"Return all options with Automatic resolved to a fixed value:"},
		AnalyzeKineticsOptions[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],Injections->Automatic],
		_Grid
	],
	Example[{Basic,"Return all options with Automatic resolved to a fixed value:"},
		AnalyzeKineticsOptions[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"], InitialVolume->Automatic, InitialConcentration->Automatic],
		_Grid
	],
	Example[{Options,OutputFormat,"Return the options as a list:"},
		AnalyzeKineticsOptions[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],Injections->Automatic,OutputFormat->List],
		{Domain -> {Quantity[0., "Seconds"], Quantity[6000., "Seconds"]}, StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"], StandardCurveFitType -> Linear, StandardCurveFitOptions -> {}, OptimizationType -> Global, OptimizationOptions -> {AccuracyGoal -> 6, PrecisionGoal -> 6}, Rates -> {kf -> {GreaterP[10^3], GreaterP[10^5]}, kb -> {LessP[10^-2], LessP[10^-2]}}, InitialVolume -> {Quantity[0.00015, "Liters"], Quantity[0.00015, "Liters"], Quantity[0.00015, "Liters"]}, InitialConcentration -> {{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}] -> Quantity[0.05, "Micromolar"]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}] -> Quantity[0.05, "Micromolar"]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}] -> Quantity[0.05, "Micromolar"]}}, AssayWells -> {"A1", "A3", "A5"}, Injections -> {{{Quantity[30., "Minutes"], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}], Quantity[5., "Microliters"], Null, Quantity[0.5, "Micromolar"]}}, {{Quantity[30., "Minutes"], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}], Quantity[15., "Microliters"], Null, Quantity[0.5, "Micromolar"]}}, {{Quantity[30., "Minutes"], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}], Quantity[25., "Microliters"], Null, Quantity[0.5, "Micromolar"]}}}, ObservedSpecies -> {{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}]}}, InitialSpecies -> Null, PrimaryInjectionSpecies -> Null, SecondaryInjectionSpecies -> Null, TertiaryInjectionSpecies -> Null, Template -> Null}
	]
}
];


(* ::Subsubsection:: *)
(*AnalyzeKineticsPreview*)


DefineTests[AnalyzeKineticsPreview, {
	Example[{Basic,"Return a graphical display for the rate fitting analysis:"},
		AnalyzeKineticsPreview[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[]
	],
	Example[{Basic,"Return a graphical display for the rate fitting analysis:"},
		AnalyzeKineticsPreview[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[]
	],
	Example[{Basic,"Specifies well positions:"},
		AnalyzeKineticsPreview[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"], ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], AssayWells->{"A1","A3"},Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		ValidGraphicsP[]
	]
}

];


(* ::Subsubsection:: *)
(*ValidAnalyzeKineticsQ*)


DefineTests[ValidAnalyzeKineticsQ, {
	Example[{Basic,"Return test results for all the gathered tests/warning:"},
		ValidAnalyzeKineticsQ[{Object[Data, FluorescenceKinetics, "id:mnk9jO3qO0AR"], Object[Data, FluorescenceKinetics, "id:3em6Zv9Nv4KV"],
			Object[Data, FluorescenceKinetics, "id:eGakld01d8BB"]}, ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		True
	],
	Example[{Basic,"The function also checks if the input objects are valid:"},
		ValidAnalyzeKineticsQ[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"]],
		True
	],
	Example[{Options,OutputFormat,"Specify OutputFormat to be TestSummary:"},
		ValidAnalyzeKineticsQ[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"], ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]], AssayWells->{"A1","A3"},Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],
		OutputFormat->TestSummary],
		_EmeraldTestSummary
	],
	Example[{Options,Verbose,"Specify Verbose to be True:"},
		ValidAnalyzeKineticsQ[Object[Protocol, FluorescenceKinetics, "id:bq9LA0dBDBkL"],ReactionMechanism[Reaction[{Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]]}, {}], Structure[{Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {}]}, {Structure[{Strand[DNA["AAAAAAA"], Modification["Fluorescein"]], Strand[Modification["Dabcyl"], DNA["TTTTTTT"]]}, {Bond[{1, 1, 1 ;; 7}, {2, 2, 1 ;; 7}]}]}, kf, kb]],
			Upload -> False,StandardCurve -> Object[Analysis, Fit, "id:3em6Zv9NqmVL"],Verbose->True],
		True
	]

}
];
