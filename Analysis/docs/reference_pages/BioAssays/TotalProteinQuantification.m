(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Subsubsection::Closed:: *)
(*AnalyzeTotalProteinQuantification*)

DefineUsage[AnalyzeTotalProteinQuantification,
	{
		BasicDefinitions->{
			{
				Definition->{"AnalyzeTotalProteinQuantification[protocol]","object"},
				Description->"calculates the mass concentration of protein present in the input samples of the provided TotalProteinQuantification 'protocol'. The input protocol is generated by ExperimentTotalProteinQuantification.",
				Inputs:>{
					{
						InputName->"protocol",
						Description->"An Object[Protocol, TotalProteinQuantification] Object whose SamplesIn will have their TotalProteinConcentrations calculated.",
						Widget->Widget[
							Type->Object,
							Pattern:>ObjectP[Object[Protocol,TotalProteinQuantification]]
						]
					}
				},
				Outputs:>{
					{
						OutputName->"object",
						Description->"The object containing analysis results from the TotalProteinQuantification protocol.",
						Pattern:>ObjectP[Object[Analysis,TotalProteinQuantification]]
					}
				}
			}
		},
		MoreInformation -> {
			"AnalyzeTotalProteinQuantification creates a standard curve from the absorbance- or fluorescence-spectroscopy data present in the input protocol's QuantificationSpectroscopyProtocol.",
			"By default, the StandardCurveFitType is set to be Sigmoid. Linear and Cubic fits are also available.",
			"The TotalProteinConcentration is calculated for all of the AssaySamples and SamplesIn. The average TotalProteinConcentration is calculated for the unique members of SamplesIn. This average takes into account NumberOfReplicates, as well as any dilution of input samples using the Aliquot Sample Preparation options.",
			"To run AnalyzeTotalProteinQuantification outside of the lab, the input protocol must have a Status of Completed."
		},
		SeeAlso->{
			"ExperimentTotalProteinQuantification",
			"AnalyzeFit",
			"parseTotalProteinQuantification"
		},
		Author->{"scicomp", "brad", "kstepurska", "eqian", "spencer.clark"},
		Guides -> {
			"AnalysisCategories",
			"ExperimentAnalysis"
		},
		Tutorials->{

		},
		Preview->True
	}
];

(* ::Subsubsection::Closed:: *)
(*AnalyzeTotalProteinQuantificationOptions*)


DefineUsage[AnalyzeTotalProteinQuantificationOptions,
	{
		BasicDefinitions->{
			{
				Definition->{"AnalyzeTotalProteinQuantificationOptions[protocol]","resolvedOptions"},
				Description->"returns the resolved options for AnalyzeTotalProteinQuantification when it is called on 'protocol'.",
				Inputs:>{
					{
						InputName->"protocol",
						Description->"An Object[Protocol, TotalProteinQuantification] Object whose SamplesIn will have their TotalProteinConcentrations calculated.",
						Widget->Widget[
							Type->Object,
							Pattern:>ObjectP[Object[Protocol,TotalProteinQuantification]]
						]
					}
				},
				Outputs:>{
					{
						OutputName->"resolvedOptions",
						Description->"Resolved options when AnalyzeTotalProteinQuantification is called on the input protocol.",
						Pattern:>{Rule[_Symbol,Except[Automatic|$Failed]]|RuleDelayed[_Symbol,Except[Automatic|$Failed]]...}
					}
				}
			}
		},
		SeeAlso->{
			"AnalyzeTotalProteinQuantification",
			"AnalyzeTotalProteinQuantificationPreview",
			"ValidAnalyzeTotalProteinQuantificationQ",
			"ExperimentTotalProteinQuantification"
		},
		Author->{"scicomp", "brad", "kstepurska", "eqian", "spencer.clark"}
	}
];


(* ::Subsubsection::Closed:: *)
(*AnalyzeTotalProteinQuantificationPreview*)


DefineUsage[AnalyzeTotalProteinQuantificationPreview,
	{
		BasicDefinitions->{
			{
				Definition->{"AnalyzeTotalProteinQuantificationPreview[protocol]","preview"},
				Description->"returns the graphical preview for AnalyzeTotalProteinQuantification when it is called on 'protocol'. The preview consists of the calculated standard curve, as well as the TotalProteinConcentrations of the AssaySamples and the SamplesIn.",
				Inputs:>{
					{
						InputName->"protocol",
						Description->"An Object[Protocol, TotalProteinQuantification] Object whose SamplesIn will have their TotalProteinConcentrations calculated.",
						Widget->Widget[
							Type->Object,
							Pattern:>ObjectP[Object[Protocol,TotalProteinQuantification]]
						]
					}
				},
				Outputs:>{
					{
						OutputName->"preview",
						Description->"Graphical preview representing the output of AnalyzeTotalProteinQuantification.",
						Pattern:>_TabView
					}
				}
			}
		},
		SeeAlso->{
			"AnalyzeTotalProteinQuantification",
			"AnalyzeTotalProteinQuantificationOptions",
			"ValidAnalyzeTotalProteinQuantificationQ",
			"ExperimentTotalProteinQuantification"
		},
		Author->{"scicomp", "brad", "kstepurska", "eqian", "spencer.clark"}
	}
];


(* ::Subsubsection::Closed:: *)
(*ValidAnalyzeTotalProteinQuantificationQ*)


DefineUsage[ValidAnalyzeTotalProteinQuantificationQ,
	{
		BasicDefinitions->{
			{
				Definition->{"ValidAnalyzeTotalProteinQuantificationQ[protocol]","boolean"},
				Description->"checks whether the provided inputs and specified options are valid for calling AnalyzeTotalProteinQuantification.",
				Inputs:>{
					{
						InputName->"protocol",
						Description->"An Object[Protocol, TotalProteinQuantification] Object whose SamplesIn will have their TotalProteinConcentrations calculated.",
						Widget->Widget[
							Type->Object,
							Pattern:>ObjectP[Object[Protocol,TotalProteinQuantification]]
						]
					}
				},
				Outputs:>{
					{
						OutputName->"boolean",
						Description->"Whether or not the AnalyzeTotalProteinQuantification call is valid. Return value can be changed via the OutputFormat option.",
						Pattern:>_EmeraldTestSummary|BooleanP
					}
				}
			}
		},
		SeeAlso->{
			"AnalyzeTotalProteinQuantification",
			"AnalyzeTotalProteinQuantificationOptions",
			"AnalyzeTotalProteinQuantificationPreview",
			"ExperimentTotalProteinQuantification"
		},
		Author->{"scicomp", "brad", "kstepurska", "eqian", "spencer.clark"}
	}
];