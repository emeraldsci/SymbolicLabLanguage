(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Subsection:: *)
(*AnalyzeFlowCytometry*)

DefineUsage[AnalyzeFlowCytometry,
  {
    BasicDefinitions -> {
      {
        Definition -> {"AnalyzeFlowCytometry[dataObjects]", "analysisObject"},
        Description -> StringJoin[
					"uses clustering analysis to partition the flow cytometry data in 'dataObjects' into clusters of cells, ",
					"and records the partitioning and cell counts in 'analysisObject'."
				],
        Inputs :> {
          IndexMatching[
						{
	            InputName -> "dataObjects",
	            Description -> "A flow cytometry data object.",
	            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Data,FlowCytometry]]]
	          },
						IndexName->"Flow Cytometry Data"
					]
        },
        Outputs :> {
          {
            OutputName -> "analysisObject",
            Description -> "An analysis object containing clustered data and cell counts for the partitioned input flow cytometry data.",
            Pattern :> ObjectP[Object[Analysis,FlowCytometry]]
          }
        }
      },
      {
        Definition -> {"AnalyzeFlowCytometry[flowCytometryProtocol]", "analysisObjects"},
        Description -> StringJoin[
					"uses clustering analysis to partition and count the cells in each flow cytometry data object generated by 'flowCytometryProtocol', ",
					"and stores the results in 'analysisObjects'."
				],
        Inputs :> {
          {
            InputName -> "flowCytometryProtocol",
            Description -> "A completed flow cytometry protocol containing one or more flow cytometry data objects.",
            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Protocol,FlowCytometry]]]
          }
        },
        Outputs :> {
          {
            OutputName -> "analysisObjects",
            Description -> "Analysis objects containing clustered data and cell counts for each flow cytometry data object in 'protocol'.",
            Pattern :> {ObjectP[Object[Analysis,FlowCytometry]]..}
          }
        }
      }
  	},
		MoreInformation -> {
			"AnalyzeFlowCytometry uses AnalyzeClusters to partition datapoints into different clusters for labeling and counting.",
			"Set Method to Automatic to use automatic clustering, or Manual to label clusters using manually drawn gates.",
      "Clustering methods may be mixed-and-matched using subcluster analysis in the AnalyzeFlowCytometry preview app, which utilizes the ClusterAnalysisTree and ActiveSubcluster options to select data to analyze.",
			"See the documentation page for AnalyzeClusters for additional examples."
		},
    SeeAlso -> {
			"ExperimentFlowCytometry",
      "AnalyzeCompensationMatrix",
			"AnalyzeClusters"
    },
    Author -> {"scicomp", "brad", "kevin.hou"},
    Preview->True,
		PreviewOptions->{"Domain","ManualGates","ClusterLabels","ClusterAnalysisTree","ActiveSubcluster"},
    ButtonActionsGuide->{
      {Description->"Select multiple contiguous elements from a list", ButtonSet->"'Shift' + 'LeftClick'"},
      {Description->"Select multiple non-contiguous elements from a list", ButtonSet->"'ControlKey' + 'LeftClick'"},
      {Description->"Move interactive elements such as gating points or thresholds", ButtonSet->"'LeftDrag'"}
    }
  }
];



(* ::Subsection:: *)
(*AnalyzeFlowCytometryOptions*)

DefineUsage[AnalyzeFlowCytometryOptions,
  {
    BasicDefinitions -> {
      {
        Definition -> {"AnalyzeFlowCytometryOptions[dataObjects]", "resolvedOptions"},
        Description -> "returns the resolved options for AnalyzeFlowCytometry when it is called on 'dataObjects'.",
        Inputs :> {
          IndexMatching[
						{
	            InputName -> "dataObjects",
	            Description -> "A flow cytometry data object.",
	            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Data,FlowCytometry]]]
	          },
						IndexName->"Flow Cytometry Data"
					]
        },
        Outputs :> {
          {
            OutputName -> "resolvedOptions",
            Description -> "The resolved options when AnalyzeFlowCytometry is called on the given inputs.",
            Pattern :> {Rule[_Symbol,Except[Automatic|$Failed]]|RuleDelayed[_Symbol,Except[Automatic|$Failed]]...}
          }
        }
      },
      {
        Definition -> {"AnalyzeFlowCytometryOptions[flowCytometryProtocol]", "resolvedOptions"},
        Description -> "returns the resolved options for AnalyzeFlowCytometry when it is called on 'flowCytometryProtocol'.",
        Inputs :> {
          {
            InputName -> "flowCytometryProtocol",
            Description -> "A completed flow cytometry protocol containing one or more flow cytometry data objects.",
            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Protocol,FlowCytometry]]]
          }
        },
        Outputs :> {
          {
            OutputName -> "resolvedOptions",
            Description -> "The resolved options when AnalyzeFlowCytometry is called on the given inputs.",
            Pattern :> {Rule[_Symbol,Except[Automatic|$Failed]]|RuleDelayed[_Symbol,Except[Automatic|$Failed]]...}
          }
        }
      }
  	},
    SeeAlso -> {
			"AnalyzeFlowCytometry",
			"AnalyzeFlowCytometryPreview",
			"ValidAnalyzeFlowCytometryQ"
    },
    Author -> {"scicomp", "brad", "kevin.hou"}
  }
];



(* ::Subsection:: *)
(*AnalyzeFlowCytometryPreview*)

DefineUsage[AnalyzeFlowCytometryPreview,
  {
    BasicDefinitions -> {
      {
        Definition -> {"AnalyzeFlowCytometryPreview[dataObjects]", "preview"},
        Description -> "returns a graphical 'preview' of the output of AnalyzeFlowCytometry when it is called on 'dataObjects'.",
        Inputs :> {
          IndexMatching[
						{
	            InputName -> "dataObjects",
	            Description -> "A flow cytometry data object.",
	            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Data,FlowCytometry]]]
	          },
						IndexName->"Flow Cytometry Data"
					]
        },
        Outputs :> {
          {
	          OutputName -> "preview",
	          Description -> "The graphical preview representing the output of AnalyzeFlowCytometry.",
	          Pattern :> ValidGraphicsP[]
	        }
        }
      },
      {
        Definition -> {"AnalyzeFlowCytometryPreview[flowCytometryProtocol]", "preview"},
        Description -> "returns a graphical 'preview' of the output of AnalyzeFlowCytometry when it is called on 'flowCytometryProtocol'.",
        Inputs :> {
          {
            InputName -> "flowCytometryProtocol",
            Description -> "A completed flow cytometry protocol containing one or more flow cytometry data objects.",
            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Protocol,FlowCytometry]]]
          }
        },
        Outputs :> {
          {
	          OutputName -> "preview",
	          Description -> "The graphical preview representing the output of AnalyzeFlowCytometry.",
	          Pattern :> ValidGraphicsP[]
	        }
        }
      }
  	},
    SeeAlso -> {
			"AnalyzeFlowCytometry",
			"AnalyzeFlowCytometryOptions",
			"ValidAnalyzeFlowCytometryQ"
    },
    Author -> {"scicomp", "brad", "kevin.hou"}
  }
];



(* ::Subsection:: *)
(*ValidAnalyzeFlowCytometryQ*)

DefineUsage[ValidAnalyzeFlowCytometryQ,
  {
    BasicDefinitions -> {
      {
        Definition -> {"ValidAnalyzeFlowCytometryQ[dataObjects]", "boolean"},
        Description -> "checks whether 'dataObjects' and any specified options are valid inputs to AnalyzeFlowCytometry.",
        Inputs :> {
          IndexMatching[
						{
	            InputName -> "dataObjects",
	            Description -> "A flow cytometry data object.",
	            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Data,FlowCytometry]]]
	          },
						IndexName->"Flow Cytometry Data"
					]
        },
        Outputs :> {
          {
            OutputName -> "boolean",
            Description -> "A value indicating whether the AnalyzeFlowCytometry call is valid. The return value can be changed with the OutputFormat option.",
            Pattern :> _EmeraldTestSummary|BooleanP
          }
        }
      },
      {
        Definition -> {"ValidAnalyzeFlowCytometryQ[flowCytometryProtocol]", "boolean"},
        Description -> "checks whether 'flowCytometryProtocol' and any specified options are valid inputs to AnalyzeFlowCytometry.",
        Inputs :> {
          {
            InputName -> "flowCytometryProtocol",
            Description -> "A flow cytometry protocol containing one or more flow cytometry data objects.",
            Widget -> Widget[Type->Object,Pattern:>ObjectP[Object[Protocol,FlowCytometry]]]
          }
        },
        Outputs :> {
          {
            OutputName -> "boolean",
            Description -> "A value indicating whether the AnalyzeFlowCytometry call is valid. The return value can be changed with the OutputFormat option.",
            Pattern :> _EmeraldTestSummary|BooleanP
          }
        }
      }
  	},
    SeeAlso -> {
			"AnalyzeFlowCytometry",
			"AnalyzeFlowCytometryOptions",
			"AnalyzeFlowCytometryPreview"
    },
    Author -> {"scicomp", "brad", "kevin.hou"}
  }
];