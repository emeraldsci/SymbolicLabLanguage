(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Title:: *)
(*Sequence: Tests*)


(* ::Section:: *)
(*Unit Testing*)


(* ::Subsection:: *)
(*Sequence Composition*)


(* ::Subsubsection::Closed:: *)
(*FractionMono*)


DefineTests[FractionMono,{
	Test["Calculate the fraction of a given sequence that is composed of A's:",
		FractionMono["ATGATATA",{"A"}],
		1/2
	],
	Example[{Basic,"Calculate the fraction of a given sequence that is composed of A's or T's:"},
		FractionMono["ATGATATA",{"A","G"}],
		5/8
	],
	Example[{Additional,"The sequence may be explicitly typed:"},
		FractionMono[DNA["ATGATATA"],{"A","G"}],
		5/8
	],
	Example[{Additional,"Explicitly type the Monomers:"},
		FractionMono["ATGATATA",{"A",RNA["U"]}],
		1/2
	],
	Test["Both sequence and Monomers are explicitly typed:",
		FractionMono[DNA["ATGATATA"],{"A",DNA["G"]}],
		5/8
	],
	Example[{Additional,"All arguments may be explicitly typed:"},
		FractionMono[DNA["ATGATATA"],{DNA["A"],DNA["G"]}],
		5/8
	],
	Example[{Additional,"Count monomer fraction for a LNAChimera oligomer:"},
		FractionMono[LNAChimera["+A+TfG"],{"+A","+T"}],
		2/3
	],
	Example[{Additional,"Count monomer fraction for a LNAChimera oligomer with a degenerate alphabet:"},
		FractionMono[LNAChimera["N+A+TfG"],{"+A","+T"}],
		7/13
	],
	Example[{Basic,"Calculate the fraction of a given RNA sequence that is composed of A's or U's:"},
		FractionMono[RNA["AUGUAUC"],{"A","U"}],
		5/7
	],
	Test["Calculate the fraction of A's or U's in a sequence:",
		FractionMono["AUGUAUC",{"A","U"}],
		5/7
	],
	Example[{Attributes,Listable,"Calculate the fraction of A's and U's in each sequence of a list:"},
		FractionMono[{"AUGUAUC","AGGCACAA","ACCACAC"},{"A","U"}],
		{5/7,1/2,3/7}
	],
	Test["Check for Monomers of any type:",
		FractionMono[{"AUGUAUC","AGGCACAA","ATGCA"},{"A","U"}],
		{5/7,1/2,2/5}
	],
	Example[{Attributes,Listable,"MapThreads through arguments if multiple sets of Monomers are given:"},
		FractionMono[{"AUGUAUC","AGGCACAA"},{{"A","G"},{"U"}}],
		{3/7,0}
	],
	Test["Return $Failed for non-sequences:",
		FractionMono[{"A","Fish","ATGCA"},{"A","U"}],
		{1,$Failed,2/5},
		Messages :> Message[Monomers::unknownPolymer,"Fish"]
	],
	Example[{Options,Degeneracy, "By default, degenerate Monomers will count for a 1/4 of each monomer:"},
		FractionMono["NNNN",{"A"}],
		1/4
	],
	Example[{Options,Polymer,"Designate the polymer type that defines the monomer alphabet:"},
		FractionMono["NNNN",{"A","U"},Polymer->RNA],
		1/2
	],
	Test["Degeneracy works for RNA:",
		FractionMono[RNA["NNNN"],{"A","U"}],
		1/2
	],
	Test["More degeneracy testing:",
		FractionMono[PNA["NANNN"],{"A"}],
		2/5
	],
	Test["Wildcard Monomers count as 1/4 A:",
		FractionMono[DNA[5],{"A"}],
		1/4
	],
	Test["Test all the things:",
		FractionMono[{DNA[5],"ATGATAC","NNCACA"},{"A","T","G"}],
		{3/4,6/7,7/12}
	]
}];


(* ::Subsubsection::Closed:: *)
(*FractionGC*)


DefineTests[FractionGC,
{
	Example[{Basic,"Calculate the fraction of a given sequence that is composed of G's or C's:"},
	FractionGC["AGTATACAG"],
	1/3],

	Example[{Basic,"Calculate the fraction of an explicitly defined sequence that is composed of G's or C's:"},
	FractionGC[DNA["AGTATACAG"]],
	1/3],

	Example[{Basic,"Calculate the fraction of a given RNA sequence that is composed of G's or C's:"},
	FractionGC[RNA["AUGUCUA"]],
	2/7
	],

	Example[{Additional,"Calculate the fraction of a given LNAChimera sequence that is composed of any variant of G or C:"},
		FractionGC[LNAChimera["+A+UmGmU+CfUfA"]],
		2/7
	],

	Example[{Attributes,Listable,"Input can be a list of multiple sequences that can be explicitly or implicitly defined:"},
	FractionGC[{"ATGATATA","GGCAGAAA","GACAGAC"}],
	{1/8,1/2,4/7}
	],

	Example[{Options,Polymer,"Specify the polymer that dictates the monomer alphabet:"},
	FractionGC["AUCUG",Polymer->RNA],
	2/5
	],

	Test["Does not evaluate on non-sequences:",
	FractionGC["Fish"],
	_FractionGC
	],

	Example[{Options,Degeneracy,"Degeneracy defaults to True, meaning the fraction of the degenerate monomer that matches G or C will be included:"},
	FractionGC["AGNN"]
	,1/2
	],

	Example[{Options,Degeneracy,"Degeneracy defaults to True, meaning the fraction of the degenerate monomer that matches G or C will be included:"},
	FractionGC[DNA[6]]
	,1/2
	]

}];


(* ::Subsubsection::Closed:: *)
(*FractionAT*)


DefineTests[FractionAT,
{
	Example[{Basic,"Calculate the fraction of a given DNA or PNA sequence that is composed of A's or T's:"},
	FractionAT["AGTATACAG"],
	2/3],

	Example[{Basic,"Calculate the fraction of an explicitly defined sequence that is composed of A's or T's:"},
	FractionAT[DNA["AGTATACAG"]],
	2/3],

	Example[{Additional,"Calculate the fraction of a given LNAChimera sequence that is composed of any variant of A or T:"},
		FractionAT[LNAChimera["+A+UmGmU+CfUfA"]],
		2/7
	],

	Test["Does not evaluate if input is not a valid sequence for DNA or PNA:",
	FractionAT["AUGUCUA"],
	HoldPattern[FractionAT["AUGUCUA"]]
	],

	Test["Does not evaluate for RNA:",
	FractionAT[RNA["AUGUCUA"]],
	HoldPattern[FractionAT[RNA["AUGUCUA"]]]
	],

	Example[{Attributes,Listable,"Input can be a list of multiple sequences that can be explicitly or implicitly defined:"},
	FractionAT[{"ATGATATA","GGCAGAAA","GACAGAC"}],
	{7/8,1/2,3/7}
	],

	Test["Input can be a list of sequences:",
	FractionAT[{"ATGATATA","GGCAGAAA","GACAGAC"}],
	{7/8,1/2,3/7}
	],

	Test["Does not evaluate on non-DNA or PNA sequences:",
	FractionAT["Fish"],
	_FractionAT
	],

	Example[{Options,Degeneracy,"Degeneracy defaults to True, meaning the fraction of the degenerate monomer that matches A or T will be included:"},
	FractionAT["AGNN"]
	,1/2
	],

	Example[{Options,Degeneracy,"Degeneracy defaults to True, meaning the fraction of the degenerate monomer that matches A or T will be included:"},
	FractionAT[DNA[6]]
	,1/2
	]

}];


(* ::Subsubsection::Closed:: *)
(*FractionAU*)


DefineTests[FractionAU,
{
	Example[{Basic,"Calculate the fraction of a given DNA or PNA sequence that is composed of A's or U's:"},
	FractionAU["AGUAUACAG"],
	2/3],

	Example[{Basic,"Calculate the fraction of an explicitly defined sequence that is composed of A's or U's:"},
	FractionAU[RNA["AGUAUACAG"]],
	2/3],

	Example[{Additional,"Calculate the fraction of a given LNAChimera sequence that is composed of any variant of A or U:"},
		FractionAU[LNAChimera["+A+UmGmU+CfUfA"]],
		5/7
	],

	Test["Does not evaluate if input is not a valid sequence for RNA:",
	FractionAU["ATGUCTA"],
	HoldPattern[FractionAU["ATGUCTA"]]
	],

	Example[{Options,Polymer,"Specify the polymer that dictates the monomer alphabet:"},
	FractionAU["AUCUG",Polymer->RNA],
	3/5
	],

	Example[{Attributes,Listable,"Input can be a list of multiple sequences that can be explicitly or implicitly defined:"},
	FractionAU[{"AUGAUAUA","GGCAGAAA","GACAGAC"}],
	{7/8,1/2,3/7}
	],

	Test["Input can be a list of sequences:",
	FractionAU[{"AUGAUAUA","GGCAGAAA","GACAGAC"}],
	{7/8,1/2,3/7}
	],

	Test["Does not evaluate on non-DNA or PNA sequences:",
	FractionAU["Fish"],
	_FractionAU
	],

	Example[{Options,Degeneracy,"Degeneracy defaults to True, meaning the fraction of the degenerate monomer that matches A or U will be included:"},
	FractionAU["AGNN"]
	,3/8
	],

	Example[{Options,Degeneracy,"Degeneracy defaults to True, meaning the fraction of the degenerate monomer that matches A or U will be included:"},
	FractionAU[RNA[6]]
	,1/2
	]

}];


(* ::Subsubsection::Closed:: *)
(*FractionPyrimidine*)


DefineTests[FractionPyrimidine,{
	Example[{Basic,"Returns the fraction of Monomers in the sequence that are pyrimidines (C,T,U):"},
		FractionPyrimidine["AGTATACAG"],
		1/3
	],
	Test["Works with RNA:",
		FractionPyrimidine["AUGUCUA"],
		4/7
	],
	Example[{Basic,"Works with typed strands:"},
		FractionPyrimidine[RNA["AUGUCUA"]],
		4/7
	],
	Example[{Attributes,Listable,"Maps across lists of sequences:"},
		FractionPyrimidine[{"GCAGAGA",DNA["GGCAGAAA"],"GACAGAC"}],
		{1/7,1/8,2/7}
	],
	Test["Does not evaluate on non-sequence strings:",
		FractionPyrimidine["Fish"],
		_FractionPyrimidine
	],
	Example[{Additional,"Does not evaluate on peptides:"},
		FractionPyrimidine["LysArgGly"],
		_FractionPyrimidine
	],
	Example[{Options,Degeneracy,"Normally assumes wildcard Monomers have a 50% chance of being pyrimidines:"},
		FractionPyrimidine["AGNN"],
		1/4
	],
	Test["Assumes wildcard Monomers have a 50% chance of being pyrimidines:",
		FractionPyrimidine[DNA[6]],
		1/2
	],
	Example[{Options,Polymer,"Set the polymer type that defines the monomer alphabet:"},
		FractionPyrimidine["ACGCGA",Polymer->DNA],
		1/3
	]
}];


(* ::Subsubsection::Closed:: *)
(*FractionPurine*)


DefineTests[FractionPurine,{
	Example[{Basic,"Returns the fraction of Monomers in the sequence that are purines (A,G):"},
		FractionPurine["AGTATACAG"],
		2/3
	],
	Test["Works with RNA:",
		FractionPurine["AUGUCUA"],
		3/7
	],
	Example[{Basic,"Works with typed strands:"},
		FractionPurine[RNA["AUGUCUA"]],
		3/7
	],
	Example[{Attributes,Listable,"Maps across lists of sequences:"},
		FractionPurine[{"GCAGAGA",DNA["GGCAGAAA"],"GACAGAC"}],
		{6/7,7/8,5/7}
	],
	Test["Does not evaluate on non-sequence strings:",
		FractionPurine["Fish"],
		_FractionPurine
	],
	Example[{Additional,"Does not evaluate on peptides:"},
		FractionPurine["LysArgGly"],
		_FractionPurine
	],
	Example[{Options,Degeneracy,"Normally assumes wildcard Monomers have a 50% chance of being purines:"},
		FractionPurine["CTNN"],
		1/4
	],
	Test["Assumes wildcard Monomers have a 50% chance of being purines:",
		FractionPurine[DNA[6]],
		1/2
	],
	Example[{Options,Polymer,"Set the polymer type that defines the monomer alphabet:"},
		FractionPurine["ACGCGA",Polymer->DNA],
		2/3
	]
}];


(* ::Subsection:: *)
(*Sequence Properties*)


(* ::Subsubsection::Closed:: *)
(*FoldingMatrix*)


DefineTests[FoldingMatrix,
{
		Example[{Basic,"Folding matrix of all one-mer interactions:"},
			FoldingMatrix["AAGCCTCGGTCAGTGCGGACTTTAG",1],
			{{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0}}
		],
		Example[{Basic,"Folding matrix of all three-mer interactions:"},
			FoldingMatrix["AAGCCTCGGTCAGTGCGGACTTTAG",3],
			{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
		],
		Example[{Options,Polymer,"Can specify a polymer type:"},
			FoldingMatrix["CGGAAC",2, Polymer ->RNA],
			{{1,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}}
		],
		Example[{Options,Degeneracy,"Can set degeneracy:"},
			FoldingMatrix["AAGUCCCGCUAUUAAUCUUCGGCAG",2, Degeneracy ->True],
			{{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}}
		],
		Example[{Attributes,Listable,"Function is listable:"},
			FoldingMatrix[{"CGGAAC","AAGUCCCGCUAUUAAUCUUCGGCAG"},2],
			{{{1,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0}}}
		],
		Test[
			"Folding matrix for RNA:",
			FoldingMatrix["AAGUCCCGCUAUUAAUCUUCGGCAG",1],
			{{0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0},{0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{1,1,0,0,0,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},{0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0},{0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1},{0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,1,0,1,1,0,0,0,0,0,0},{0,0,0,0,1,1,1,0,1,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0}}
		],
		Test[
			"Folding matrix for peptide:",
			FoldingMatrix["ThrThrThrHisTyrHisLysLeuHisThrGlnValTrpAlaSerHisThrArgSerSerIleThrLeuThrAla",1],
			{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
		],
		Example[{Basic,"Construct folding matrix for a sequence at multiple different minimum fold lengths:"},
			FoldingMatrix["CATCCGGTCT",Range[11]],
			{{{0,0,0,0,0,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,1},{0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{1,0,0,1,1,0,0,0,1,0},{1,0,0,1,1,0,0,0,1,0},{0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,1,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0},{0,0,0,0,1,0,0,0,0},{0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}},{{0,0,0,0,0,0},{0,0,0,0,0,0},{0,0,0,0,0,0},{0,0,0,0,0,0},{0,0,0,0,0,0},{0,0,0,0,0,0}},{{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0},{0,0,0,0,0}},{{0,0,0,0},{0,0,0,0},{0,0,0,0},{0,0,0,0}},{{0,0,0},{0,0,0},{0,0,0}},{{0,0},{0,0}},{{0}},{}}
		],
		Example[{Basic,"Construct folding matrix for a list of sequences:"},
			FoldingMatrix[{"CATCCGGTCT","GGGGGCGTGA","GCACTGTGGC"},3],
			{{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}}}
		],
		Example[{Additional,"Give list of sequences and list of lengths:"},
			FoldingMatrix[{"CATCCGGTCT","GGGGGCGTGA","GCACTGTGGC"},{2,3,4}],
			{{{0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0},{0,0,0,0,1,0,0,0,0},{0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0},{0,0,0,0,0,0,0}}}
		],
		Example[{Basic,"Construct folding matrix for the subsequence specified by the given span:"},
			FoldingMatrix["GGGACGGTGATGCGATGTCTGGATGTGCGGAGCCCAAATAGGTTGCTCTTCGCTATCACTTTGATTGCTACGGCAGCTCTGGTCGGCCCAGCCAGCCATC",3,20;;30],
			{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},
			TimeConstraint->60
		],
		Test[
			"List of spans:",
			FoldingMatrix["TCATTGAGCCAGCACGCATACCTAACATCTTTCTCTCATTAGTTGGCTAGGCCCGGCGTTCGCGGCTACTCCCTATAGGTATCCCGTGGAAGCACCTTAG",3,{20;;30,50;;60}],
			{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}},
			TimeConstraint->60
		],
		Test[
			"List of sequences, single length, list of spans:",
			FoldingMatrix[{"TCATTGAGCCAGCACGCATACCTAACATCTTTCTCTCATTAGTTGGCTAGGCCCGGCGTTCGCGGCTACTCCCTATAGGTATCCCGTGGAAGCACCTTAG","AAAGCCCTCATATATTTATCTCCAACGTATGAGGCAAACCTCCCGATCAGTGCACAACATTCTTTCTGCTCATATTGTCCGTACGACCGAAGCATTTTGA"},3,{20;;30,50;;60}],
			{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0}}},
			TimeConstraint->60
		],
		Test[
			"List of sequences, list of lengths, and a span:",
			FoldingMatrix[{"AACTTCGACCTATTTTCCACTTACGGTAATCTAATATTGCTCAACACTTGTAGAGTCGATTATTGCTTTCAAGTCTTCACCTGGATTGCCCGGTCGTTCG","TGTGTAGCGTGTGTCTTAGCCGAATCGAATGAATAGGAGAAAGACCTAGGGTTTGTGAGTCCCCCTCGGGCGCTTATCAGCATGTGAGTAGGTATGTTCA","TTGTTTCACGTGACCAATGCTTGTGCTGATGGTCGATTTGAACATACGTAGGCCCTTACATAACAAGGTTTGCTTACCCTGGGAGTGGCCTTAATTGCTC"},{2,3,4},20;;30],
			{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}},
			TimeConstraint->60
		]

}];


(* ::Subsubsection::Closed:: *)
(*FoldingSequences*)


DefineTests[FoldingSequences,
{
		Example[{Basic,"Find all 6-mer fold regions:"},
			FoldingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6],
			{"CAGGTA","ACTCAG","TAACTA","AACTAG","ACTAGT","CTAGTT","TAGTTA","TACCTG","CTGAGT","GACGTC"}
		],
		Example[{Additional,"Find folds at a list of lengths:"},
			FoldingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",Range[4,6]],
			{{"CAGG","AGGT","AGGT","AGGT","GGTA","GGTA","GTAC","ACTC","ACTC","CTCA","TCAG","GTCC","CCGG","CCGG","CCGG","GGTA","GGTA","GTAA","AGAC","GACA","ACCT","TTAA","TAAC","AACT","ACTA","CTAG","TAGT","AGTT","GTTA","TTAC","TACC","TACC","ACCT","CCTG","CTGA","TGAG","GAGT","GTCT","TCTG","GGGC","GGCC","CCGG","CCGG","CCGG","GGAC","GGAC","GGAC","GACG","ACGT","CGTC","GCCC","CCGG","CCGG","CCGG","AGCT","TGTC","GTCC","CAGA","GAGT","GTCC","TACC","TACC","ACCT"},{"CAGGT","AGGTA","AGGTA","ACTCA","CTCAG","GGTAA","TAACT","AACTA","ACTAG","CTAGT","TAGTT","AGTTA","TTACC","TACCT","ACCTG","CTGAG","TGAGT","GACGT","ACGTC","TACCT"},{"CAGGTA","ACTCAG","TAACTA","AACTAG","ACTAGT","CTAGTT","TAGTTA","TACCTG","CTGAGT","GACGTC"}}
		],
		Example[{Additional,"Find folds for a list of sequences at a single length:"},
			FoldingSequences[{"CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA","TTAAACGCTAGTCCAGCGGTACGGGCCCGACCGACATATGGATGTGGCACTTCGTTCAATCTAACGTGGTAGTGTATGATTATTAAGCACGAGGTGCAAT","GTATTCATCGATCAGAACTTATCGGATTCTAAGCTTTCTTTGGTTTAAGCAAGGGATTAGGTAGAGGACCAATGGTGTTCCACCCACAGTTCGGAAACTT"},4],
			{{"CAGG","AGGT","AGGT","AGGT","GGTA","GGTA","GTAC","ACTC","ACTC","CTCA","TCAG","GTCC","CCGG","CCGG","CCGG","GGTA","GGTA","GTAA","AGAC","GACA","ACCT","TTAA","TAAC","AACT","ACTA","CTAG","TAGT","AGTT","GTTA","TTAC","TACC","TACC","ACCT","CCTG","CTGA","TGAG","GAGT","GTCT","TCTG","GGGC","GGCC","CCGG","CCGG","CCGG","GGAC","GGAC","GGAC","GACG","ACGT","CGTC","GCCC","CCGG","CCGG","CCGG","AGCT","TGTC","GTCC","CAGA","GAGT","GTCC","TACC","TACC","ACCT"},{"TTAA","TTAA","AACG","CGCT","CTAG","TCCA","AGCG","CGGT","GTAC","CGGG","GGGC","GGCC","GCCC","CCCG","ACCG","ACAT","CATA","CATA","ATAT","TATG","TGGA","ATGT","GCAC","CACT","TCGT","CGTT","CGTT","AATC","AACG","ACGT","CGTG","AGTG","TATG","GATT","TTAA","TTAA","GCAC","CACG","ACGA","GTGC","GTGC","TGCA"},{"ATCG","TCGA","CGAT","CGAT","GATC","AGAA","AGAA","GAAC","GAAC","AACT","CTTA","CTTA","ATCG","TTCT","TCTA","CTAA","TAAG","AAGC","AGCT","GCTT","GCTT","TTTC","TTCT","TTGG","TGGT","GTTT","TTAA","TAAG","AAGC","TTAG","TAGA","ACCA","ACCA","CCAA","TGGT","GGTG","GTTC","TTCC","CACC","AGTT","AGTT","GTTC","GGAA","GAAA","AAAC","AACT"}}
		],
		Test[
			"List of sequences and list of lengths:",
			FoldingSequences[{"CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA","TTAAACGCTAGTCCAGCGGTACGGGCCCGACCGACATATGGATGTGGCACTTCGTTCAATCTAACGTGGTAGTGTATGATTATTAAGCACGAGGTGCAAT","GTATTCATCGATCAGAACTTATCGGATTCTAAGCTTTCTTTGGTTTAAGCAAGGGATTAGGTAGAGGACCAATGGTGTTCCACCCACAGTTCGGAAACTT"},{4,5,6}],
			{{"CAGG","AGGT","AGGT","AGGT","GGTA","GGTA","GTAC","ACTC","ACTC","CTCA","TCAG","GTCC","CCGG","CCGG","CCGG","GGTA","GGTA","GTAA","AGAC","GACA","ACCT","TTAA","TAAC","AACT","ACTA","CTAG","TAGT","AGTT","GTTA","TTAC","TACC","TACC","ACCT","CCTG","CTGA","TGAG","GAGT","GTCT","TCTG","GGGC","GGCC","CCGG","CCGG","CCGG","GGAC","GGAC","GGAC","GACG","ACGT","CGTC","GCCC","CCGG","CCGG","CCGG","AGCT","TGTC","GTCC","CAGA","GAGT","GTCC","TACC","TACC","ACCT"},{"CGGGC","GGGCC","GGCCC","GCCCG","CATAT","ATATG"},{"ATCGAT","AAGCTT"}}
		],
		Example[{Options,MinLevel,"Find all folds at least 2 bases in length:"},
			FoldingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",MinLevel->2],
			{"TAACTAGTTA","CAGGTA","ACTCAG","TACCTG","CTGAGT","GACGTC","AGGTA","GGTAA","TTACC","TACCT","AGGT","GTAC","ACTC","GTCC","CCGG","CCGG","CCGG","GGTA","AGAC","GACA","TTAA","GTCT","TCTG","GGGC","GGCC","CCGG","CCGG","CCGG","GGAC","GGAC","GGAC","GCCC","CCGG","CCGG","CCGG","AGCT","TGTC","GTCC","CAGA","GAGT","GTCC","TACC","ACCT","CAC","AGG","ACT","CTC","CTC","CAG","CAG","CAG","GGT","GTA","GTA","GTA","AAG","ACA","CTT","TAA","AAC","ACT","ACT","ACT","ACT","TAG","TAG","AGT","GTT","TTA","AGT","AGT","CTG","CTG","CTG","GTG","TGG","GGG","GGG","GAC","GAC","GAC","GAC","ACG","CGT","CGT","TCG","GGA","GGA","GGA","CCC","CCG","CCG","CCG","CGG","CGG","CGG","GGA","GGA","GGA","GAG","AGC","GCT","CTG","CTG","CTG","TGT","GTC","GTC","TCC","TCC","TCC","CCA","CAG","CAG","CAG","GAG","AGT","AGT","GTC","GTC","TCC","TCC","TCC","CCC","CTA","TAC","ACC","CCT","CTA","TAC","TAC","ACG","CGA","CA","CA","CA","AC","AC","AC","AA","AA","AA","AC","AC","AC","AC","AC","AC","AC","AC","AC","TA","TA","TA","AG","AG","AG","AG","GT","GT","GT","TT","TT","TT","TA","TA","TA","TA","TA","TA","TA","AC","AC","AC","AC","AC","AC","AC","AC","AC","CT","CT","CT","CT","CT","CT","CT","CT","AG","AG","AG","AG","AG","AG","AG","AG","GT","GT","GT","GT","GT","GT","GT","GT","GT","CT","CT","CT","CT","CT","CT","CT","CT","CT","GT","GT","GT","GT","GT","GT","GT","GT","GT","TG","TG","GG","GG","GG","GG","GG","GG","GG","GG","GC","GC","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","AC","AC","AC","AC","AC","AC","AC","AC","AC","CG","CG","CG","CG","CG","CG","GT","GT","GT","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","TC","CG","CG","CG","CG","CG","CG","CG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GA","GA","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CG","CG","CG","CG","CG","CG","CG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GA","GA","GA","GA","GA","GA","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","GC","CT","CT","CT","CT","CT","CT","CT","CT","CT","TG","TG","TG","TG","TG","GT","GT","GT","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","TC","TC","CC","CC","CC","CC","CC","CC","CC","CA","CA","CA","CA","AG","AG","AG","AG","AG","AG","AG","AG","GA","GA","GA","GA","GA","GA","AG","AG","AG","AG","AG","AG","AG","AG","GT","GT","GT","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","TC","TC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CT","CT","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","AC","AC","AC","AC","AC","AC","AC","AC","AC","CC","CC","CC","CC","CC","CC","CC","CT","CT","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","AC","AC","AC","AC","AC","AC","AC","AC","AC","CG","CG","CG","CG","CG","CG","CG","GA","GA","GA","GA","GA","GA"}
		],
		Example[{Basic,"Find all 4-mer folds the overlap with the given span:"},
			FoldingSequences["UUGAGUCUUUAAUGCCGAGACAAAGCGAGCUUCUGUUUAAAUUGUGCGUACUCUUGUGCAUCCUCGGUGUUAGUAUUCGUUGAUUGCGUGACAUUAGCCG",4,20;;30],
			{"AGAC","ACAA","ACAA","AAAG","AAGC","CGAG","AGCU","GCUU"}
		],
		Example[{Options,Polymer,"Can specify polymer type:"},
			FoldingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6,Polymer->DNA],
			{"CAGGTA","ACTCAG","TAACTA","AACTAG","ACTAGT","CTAGTT","TAGTTA","TACCTG","CTGAGT","GACGTC"}
		],
		Example[{Options,Degeneracy,"Can turn on degeneracy:"},
			FoldingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAANNNNTAACTAGTTACCTGAGTCTGTGGGCCGGACGTNNNAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6,Degeneracy->True],
			{"CAGGTA","ACTCAG","ANNNNT","TAACTA","AACTAG","ACTAGT","CTAGTT","TAGTTA","TACCTG","CTGAGT"}
		],
		Example[{Options,Consolidate,"If no length 'k' is provided counts only the largest occurance of a subsequence (e.g. if a folding subsequence of length 6 exists, and consolidate is true, does not return the composite 5,4,3,2,1-mer folds that exist entirely within the 6mer fold):"},
			FoldingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACC",Consolidate->True],
			{"TAACTAGTTA","GGTAA","TTACC","AGGT","GTAC","CCGG","GGTA","ACCT","TTAA","TACC","ACT","AGT","GTC","GGT","GTA","AAG","GAC","CTT","TAA","AAC","ACT","ACT","AGT","AGT","GTT","TTA","TAC","ACC","CG","GC","TC","CG","CG","GG","GG","GG","GT","GT","GT","GT","GT","GT","AG","AG","AG","GA","AC","AC","AC","AC","CC","CT","CT","TA","TA","AA","AA","AA","AC","AC","AC","AC","CT","CT","CT","CT","TA","TA","TA","TA","TA","AG","AG","AG","GT","GT","GT","GT","GT","GT","TT","TT","TT","TA","TA","TA","TA","TA","AC","AC","AC","AC","CC","CC","G","G","G","G","G","G","G","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","A","A","C","C","C","C","C","C","C","C","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","T","T","T","T","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","G","G","G","G","G","G","G","G","G","G","G","G","G","G","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C"}
		],
		Example[{Attributes,Listable,"Function is listable:"},
			FoldingSequences[{"CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACC","CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA"},6],
			{{"TAACTA","AACTAG","ACTAGT","CTAGTT","TAGTTA"},{"CAGGTA","ACTCAG","TAACTA","AACTAG","ACTAGT","CTAGTT","TAGTTA","TACCTG","CTGAGT","GACGTC"}}
		],
		Test[
			"Given peptide:",
			FoldingSequences["MetCysGluTyrMetArgThrGluSerProPheCysTrpProThrGlySerCysArgArgValHisPheProAsp"],
			{}
		],
		Test[
			"Given peptide and length:",
			FoldingSequences["MetCysGluTyrMetArgThrGluSerProPheCysTrpProThrGlySerCysArgArgValHisPheProAsp",3],
			{}
		],
		Test[
			"Given peptide and range:",
			FoldingSequences["MetCysGluTyrMetArgThrGluSerProPheCysTrpProThrGlySerCysArgArgValHisPheProAsp",Range[10]],
			{{},{},{},{},{},{},{},{},{},{}}
		],
		Example[{Additional,"Find folds for a sequences at a list of span locations:"},
			FoldingSequences["GTGGCCGAGGGCATAGCCTGTCTCTCTAGCCTTTCTATCGGCCCGGTGCATCTGATACAAACACTGTATCTGACGCCTTAGTAAGTACGCTCCGGTTGAA",2,{20;;30,60;;70}],
			{{"TG","TG","TG","TG","GT","GT","GT","GT","GT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","TA","AG","AG","AG","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC"},{"AA","AA","AA","AA","AA","AA","AA","AA","AC","AC","AC","AC","AC","AC","AC","CA","CA","CA","CA","CA","CA","CA","AC","AC","AC","AC","AC","AC","AC","CT","CT","CT","CT","CT","TG","TG","TG","TG","GT","GT","GT","GT","GT","TA","TA","TA","TA","TA","TA","TA","TA","AT","AT","AT","AT","AT","TC","TC","TC","TC","CT","CT","CT","CT","CT"}}
		],
		Test[
			"List of sequences, list of spans, single length:",
			FoldingSequences[{"GTGGCCGAGGGCATAGCCTGTCTCTCTAGCCTTTCTATCGGCCCGGTGCATCTGATACAAACACTGTATCTGACGCCTTAGTAAGTACGCTCCGGTTGAA","ACGTAGCTCGGCTTGTCCACTAGGTTGCGGTGTTCCAAGAACGCTGTCCCGACCCACAACACCAATGGAGTAGATGACATAAGTAACTCAGTATAGGTAA"},2,{20;;30,60;;70}],
			{{"TG","TG","TG","TG","GT","GT","GT","GT","GT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","TA","AG","AG","AG","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC"},{"AC","AC","AC","AC","AC","AC","AC","AC","AC","AC","CA","CA","CA","CA","CA","CA","AC","AC","AC","AC","AC","AC","AC","AC","AC","AC","CC","CC","CC","CC","CC","CA","CA","CA","CA","CA","CA","AA","AA","AA","AT","AT","AT","AT","TG","TG","TG","TG","TG","TG","TG","TG","GG","GG","GG","GG","GG","GG","GG","GA","GA","GA","GA","GA","AG","AG","AG","AG","AG","GT","GT","GT","GT","GT","GT","GT","GT","GT"}}
		],
		Test[
			"List of sequences, list of lenghts, list of spans:",
			FoldingSequences[{"GTGGCCGAGGGCATAGCCTGTCTCTCTAGCCTTTCTATCGGCCCGGTGCATCTGATACAAACACTGTATCTGACGCCTTAGTAAGTACGCTCCGGTTGAA","ACGTAGCTCGGCTTGTCCACTAGGTTGCGGTGTTCCAAGAACGCTGTCCCGACCCACAACACCAATGGAGTAGATGACATAAGTAACTCAGTATAGGTAA"},{2,5},{20;;30,60;;70}],
			{{"TG","TG","TG","TG","GT","GT","GT","GT","GT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TC","TC","TC","TC","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","TA","AG","AG","AG","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC"},{"AACAC","ACACC"}}
		],
		Test[
			"List of spans and different lengths:",
			FoldingSequences["AAATGTTTCCAAGGGTTCCGGAACTATAAGGTTCTTTGGAACCGTTGTCTTGGTCGGGTCAAGGGACGTTGTGGGAGAGCGATTTAATTATGGTATATCG",{4,2},{20;;30,60;;70}],
			{{"TCCG","CCGG","CGGA","GGAA","GGAA","GAAC","GAAC","TATA","TATA","ATAA","GGTT"},{"TC","TC","TC","TC","TC","TC","CA","CA","CA","CA","CA","CA","CA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AG","AG","AG","GG","GG","GG","GG","GG","GG","GA","GA","GA","GA","GA","GA","GA","AC","AC","AC","AC","AC","AC","AC","AC","AC","AC","CG","CG","CG","CG","CG","CG","GT","GT","GT","TT","TT","TT","TT","TT","TT","TT","TT","TG","TG"}}
		],
		Example[{Additional,"Given list of spans:"},
			FoldingSequences["AAATGTTTCCAAGGGTTCCGGAACTATAAGGTTCTTTGGAACCGTTGTCTTGGTCGGGTCAAGGGACGTTGTGGGAGAGCGATTTAATTATGGTATATCG",{20;;30,60;;70}],
			{{"GTTCCGGAAC","GGTTC","GGAA","GAAC","TATA","TATA","ATAA","CCG","CGG","AAC","AAC","AAC","ATA","TAA","AAG","AAG","CG","CG","CG","GA","GA","GA","GA","AA","AA","AC","AC","AC","AC","AC","CT","CT","CT","CT","CT","AT","AT","AT","TA","TA","TA","TA","TA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AA","AG","GG","GG","G","G","G","C","C","C","C","C","C","C","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","G","G","G","G","G","G","G","G","G","G","G","G","G","G"},{"CAAG","ACGT","GTC","CAA","CAA","CAA","AAG","GGA","GGA","GAC","GAC","GAC","ACG","GTT","GTT","TTG","TTG","TC","TC","TC","TC","TC","CA","CA","CA","AA","AA","AA","AA","AA","AA","AA","AG","GG","GG","GG","GG","GA","GA","AC","AC","AC","AC","AC","CG","CG","CG","CG","TT","TT","TT","TT","C","C","C","C","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","G","G","G","G","G","G","G","G","G","G","G","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","G","G","G","G","G","G","G","G","G","G","G","G","G","G","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T"}}
		],
		Example[{Additional,"Given list of spans for RNA sequence:"},
			FoldingSequences["GGCAGUUAUCCUAAUUCCACCGUAAUCUUAAUCUCGGGGCCGAGUGCGAACUUGAGGGCCGCUGGCGGAUACGGUCUAUGUACUGAAGGAUCGUUCAAAU",{20;;30,60;;70}],
			{{"ACCGUA","UUAA","CAC","CCG","CCG","GUA","UAA","AAU","AUC","AUC","CUU","UUA","UUA","UAA","UAA","AAU","AC","AC","AC","AC","CC","CC","CC","CC","CC","CC","CC","CG","CG","CG","CG","CG","GU","GU","AU","AU","AU","AU","UC","UC","UC","UC","CU","CU","CU","UU","UU","UU","UA","UA","UA","UA","UA","UA","AA","AA","AA","AA","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","G","G","G","G","G","G","G","G","G","G","G","G","A","A","A","A","A","A","A","A","A","A","U","U","U","U","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A"},{"UACGGU","GGAUA","GGCC","GGCC","CCGC","GCGG","GCC","GCC","CCG","CCG","CGC","CUG","UGG","CGG","GGA","GAU","GAU","GAU","AUA","UAC","CC","CC","CC","CG","CU","CU","CU","UG","GC","GC","GC","GC","GC","CG","CG","CG","CG","CG","CG","CG","CG","GG","GG","GA","GA","GA","AU","AU","AU","UA","UA","UA","C","C","C","C","C","C","C","C","C","C","C","U","U","U","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","A","A","A","A","A","A","A","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U","U"}}
		],
		Example[{Additional,"List of lengths and spans:"},
			FoldingSequences["CCAAACAGGAACAGATCTGGGGGCTTTGGGGAATGCCCACTTATAAAGTCGAGGCCGCTGCTAAGTCCTTTAGTTAGAAAGGGTTCACGCCAACCTATCG",{3,4},{20;;30,60;;70}],
			{{"TGG","TGG","TGG","GGG","GGG","GGG","GGC","GGC","GGC","CTT","CTT","CTT","TTT","TTT","TTT","TTG","TTG","TGG","TGG","TGG","GGG","GGG","GGA"},{"CTAA","CTAA","TAAG","AAGT","TCCT","CCTT","CTTT","CTTT","TTTA","TTAG"}}
		],
		Example[{Additional,"List of lengths and spans for RNA sequence:"},
			FoldingSequences["ACCUCAGGUCUUCGGCCAAGCUACUGUGUUCUUCCGAUGAAGGCGAUCGUGGAAUGGUCCCGAGCCAUGCACUAUCACAGGGACAAGCUAAGUAAAACAU",{3,4},{20;;30,60;;70}],
			{{"AAG","AAG","AGC","AGC","GCU","GCU","GCU","UAC","ACU","CUG","CUG","UGU","UGU","UGU","GUG","GUG","UGU","UGU","UGU","GUU","UUC","UUC"},{"GUCC","UCCC","CCGA","CCAU","CAUG","UGCA"}}
		]

}];


(* ::Subsubsection::Closed:: *)
(*NumberOfFolds*)


DefineTests[NumberOfFolds,
{
		Example[{Basic,"Find number of 2-mer folds:"},
			NumberOfFolds["ATTAGATAGAGACA",2],
			8
		],
		Example[{Basic,"Find number of 4-mer folds:"},
			NumberOfFolds["CUUGUGGGCCGUCAAGUUAGCCGAU",4],
			3
		],
		Example[{Basic,"Find number of 4-mer folds in multiple sequences:"},
			NumberOfFolds[{"CUUGUGGGCCGUCAAGUUAGCCGAU","ACAACAAGCATCCCTCACTACTTAA"},4],
			{3,1}
		],
		Example[{Basic,"Count folds of different sizes in one sequence:"},
			NumberOfFolds["AACGATCTTTTTTATCACGGGCCGA",{3,4,5}],
			{8,2,0}
		],
		Test[
			"Test 1:",
			NumberOfFolds["CAACCUGCCAUUUACUAUGACUCAA",{3,4,5}],
			{4,0,0}
		],
		Test[
			"Test 2:",
			NumberOfFolds[{"AACGATCTTTTTTATCACGGGCCGA","CGAGTATGATCCAACGAATACCTGC","CCCTTTGCCCCTAGGATTGCATCTA"},{3,4,5}],
			{8,3,2}
		],
		Test[
			"Test 3:",
			NumberOfFolds["SerCysPheLeuCysGlnGluTrpArgSerGlyGlyTyrArgPheIleLysAlaArgArgLysAspHisAspAsp",{3,4,5}],
			{0,0,0}
		],
		Test[
			"Test 4:",
			NumberOfFolds["ATTCACACCGTGAGGTGGTTATTTA",2,10;;20],
			16
		],
		Test[
			"Test 5:",
			NumberOfFolds["Fish",3],
			_NumberOfFolds
		],
		Test[
			"Test 6:",
			NumberOfFolds["ATTCACACCGTGAGGTGGTTATTTA",{2,3,4},10;;20],
			{16,7,2}
		],
		Test[
			"Test 7:",
			NumberOfFolds["CUCCACUAGUUUGCGAUAGGACCUC",{2,3,4},10;;20],
			{17,4,1}
		],
		Test[
			"Test 8:",
			NumberOfFolds[{"ATTCACACCGTGAGGTGGTTATTTA","TGCGAAGGGGATGGAATAACATACC","GGCGCACTTAAAAAACCGACTACGG"},3,10;;20],
			{7,2,3}
		],
		Test[
			"Test 9:",
			NumberOfFolds[{"ATTCACACCGTGAGGTGGTTATTTA","TGCGAAGGGGATGGAATAACATACC","GGCGCACTTAAAAAACCGACTACGG"},{3,2,4},10;;20],
			{7,13,1}
		],
		Test[
			"Test 10:",
			NumberOfFolds["TTTACCTAAGTTTCACGTAGGTCTATCATACAGTCGCTCCGGCTATATAACGTCGACTGACAATCGAACAATGCAAACGTTTGGGGAGTGTCGCACCTTC",4,{10;;20,40;;50}],
			{7,11}
		],
		Test[
			"Test 11:",
			NumberOfFolds["TTTACCTAAGTTTCACGTAGGTCTATCATACAGTCGCTCCGGCTATATAACGTCGACTGACAATCGAACAATGCAAACGTTTGGGGAGTGTCGCACCTTC",{4,3},{10;;20,40;;50}],
			{7,22}
		],
		Test[
			"Test 12:",
			NumberOfFolds["GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC",{4,3},{10;;20,40;;50}],
			{16,26}
		],
		Test[
			"Test 13:",
			NumberOfFolds["GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC",4,{10;;20,40;;50}],
			{16,12}
		],
		Test[
			"Test 14:",
			NumberOfFolds[{"GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC","GGAUAGUUCCUCUUCUACCAUCGGCGCGAGGUGUAGCCAGGACCACGGGCCCGGAUCGGCUGGGCACGUACACUUGAUCGUUCCAUGCCGUGCCACCAAG"},4,{10;;20,40;;50}],
			{16,10}
		],
		Test[
			"Test 15:",
			NumberOfFolds["TCCACCAATGACCAAGTATCGGTCATTTGCACCCGCATTGACAAACTGAGTGGTTTTCGAGTATTTACAAGCCCCGGGGAGTCTAGGGGCAGTACCAAAT"],
			{1414,338,86,24,6,2,1},
			TimeConstraint->60
		],
		Test[
			"Test 16:",
			NumberOfFolds["UCCAAGUCAAACGAGCUGCCCGAUCUAGCGCAGUUUCUCGACUUAAUCUUACGAUUAGCUUGCUGACUUCACUUUUAGAUGACUAGACAGCGCCCAACGU"],
			{1366,353,70,30,10,2},
			TimeConstraint->60
		],
		Test[
			"Check a list of long sequences:",
			NumberOfFolds[{"AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAGTCAATGGGAGGGAGATAATCAGGGGCCGGCC","GTAGGGAATCGTACACCTAAAAATTTATTCCCCAAGAAATCGATTCGCTAGACACGGGTCTAAATTTGCCGGGTT","ACGAAAACTACCCTTGAAATGTATCGAGATTAGAACACACTGATTGCTCGTCGCCTCATAAGACATGT"}],
			{{822, 230, 54, 20, 2, 1},{762, 195, 56, 11, 2, 6, 2, 1},{664, 168, 44, 7, 1}},
			TimeConstraint->120
		],
		Test[
			"Test 17:",
			NumberOfFolds["AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAATCCTACTTTTATGGTGGGGGCGTCAATGGGAGGGAGATAATCAGGGGCCGGCC",10;;20],
			{137,42,16,4},
			TimeConstraint->60
		],
		Test[
			"Test 18:",
			NumberOfFolds["AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAATCCTACTTTTATGGTGGGGGCGTCAATGGGAGGGAGATAATCAGGGGCCGGCC",{10;;20,40;;50}],
			{{137,42,16,4},{139,40,13,3,1}},
			TimeConstraint->60
		],
		Test[
			"Test 19:",
			NumberOfFolds[{"AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAATCCTACTTTTATGGTGGGGGCGTCAATGGGAGGGAGATAATCAGGGGCCGGCC","CGGTTAAGTACGTGACAGCGCAATCTTAAGGGACTGGATAAGACTGTTACCTGAGTAAACTTCCTATGCGCGATCTCTCGCTCACCTTGTTCACCCCAAG"},{40;;50,75;;85}],
			{{139,40,13,3,1},{133,41,7,6}},
			TimeConstraint->60
		],
		Example[{Options,Polymer,"Can specify polymer type:"},
			NumberOfFolds["ATTAGATAGAGACA",2,Polymer->DNA],
			8
		],
		Example[{Options,MinLevel,"Can specify MinLevel:"},
			NumberOfFolds["CUUGUGGGCCGUCAAGUUAGCCGAU",2,MinLevel->5],
			32
		],
		Example[{Options,Consolidate,"Can turn on Condolidate while no length 'k' is provided:"},
			NumberOfFolds["CUUGUGGGCCGUCAAGUUAGCCGAU",Consolidate->True],
			{96,19,2,3}
		],
		Example[{Options,Consolidate,"Can turn off Condolidate while no length 'k' is provided:"},
			NumberOfFolds["CUUGUGGGCCGUCAAGUUAGCCGAU",Consolidate->False],
			{152,32,8,3}
		],
		Example[{Attributes,Listable,"Function is listable:"},
			NumberOfFolds[{"AACGATCTTTTTTATCACGGGCCGA","CGAGTATGATCCAACGAATACCTGC","CCCTTTGCCCCTAGGATTGCATCTA"},{3,4,5}],
			{8,3,2}
		]
}];


(* ::Subsubsection::Closed:: *)
(*FoldsQ*)


DefineTests[FoldsQ,
{
		Test[
			"Test 1:",
			FoldsQ["TTTTACTGTAAATACCTTCCGGTAG",4],
			True
		],
		Test[
			"Test 2:",
			FoldsQ["TTTTACTGTAAATACCTTCCGGTAG",6],
			False
		],
		Test[
			"Test 3:",
			FoldsQ["GGGUUAGGUUCUAGAGCGAACGACA",6],
			True
		],
		Test[
			"Test 4:",
			FoldsQ["GGGUUAGGUUCUAGAGCGAACGACA",8],
			False
		],
		Test[
			"Test 5:",
			FoldsQ["HisHisLysArg",8],
			False
		],
		Test[
			"Test 6:",
			FoldsQ[{"GGTGAGCTAAGACGCCCAAGCGTCC","ATACACAGGGCTTCGTCAAGAGTCG","ACCGCCCTGCTTACTATTTACGCCG"},4],
			{True,False,False}
		],
		Test[
			"Test 7:",
			FoldsQ["CGCTCAGCGTAAAATTGCTGGGGTG",{3,4,5,6}],
			{True,True,False,False}
		],
		Test[
			"Test 8:",
			FoldsQ[{"CGCTCAGCGTAAAATTGCTGGGGTG","TGTTTCCGGGGCAGGACAATGCGTG","GTATCACGCGCGGTAGGAATGAAAC"},{3,4,5}],
			{True,True,True}
		],
		Test[
			"Test 9:",
			FoldsQ["CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG",4,10;;20],
			True
		],
		Test[
			"Test 10:",
			FoldsQ["CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG",9,10;;20],
			False
		],
		Test[
			"Test 11:",
			FoldsQ["CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG",4,{10;;20,40;;50}],
			{True,False}
		],
		Test[
			"Test 12:",
			FoldsQ[{"CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG","CAATACATGTCAAACACCGCTTGCCGCCTTGTGCTGAATCGCCATTATCGAAGCTTCTCAGGCACCGATTAAGCTAGGGGCCTAATTGAGACTGAGCCCA"},{7,2},{10;;20,40;;50}],
			{False,True}
		],
		Example[
			{Basic,"Determines if any one of the subsequences in that list can bind to another:"},
			FoldsQ[{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"}],
			False
		],
		Example[
			{Basic,"Determines if any one of the subsequences in that list can bind to another:"},
			FoldsQ[{"CCCAC","CGACA","GGGTC","GACCC","CCGTT","ATTTG"}],
			True
		],
		Test[
			"Test 13:",
			FoldsQ[AllSequences[4]],
			True
		],
		Test[
			"Test 14:",
			FoldsQ[{"AT"}],
			True
		],
		Example[
			{Basic,"Determines if the test sequence could bind to any sequences in the subsequences list:"},
			FoldsQ[{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"},"ATTTG"],
			False
		],
		Example[
			{Basic,"Determines if the test sequence could bind to any sequences in the subsequences list:"},
			FoldsQ[{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"},"TGTCG"],
			True
		],
		Test[
			"Test 15:",
			FoldsQ[{"AG"}],
			False
		],
		Test[
			"Test 16:",
			FoldsQ[{DNA["AT"]}],
			True
		],
		Test[
			"Test 17:",
			FoldsQ[{DNA["CCCAC"],DNA["CGACA"],DNA["GGGTC"],DNA["GACCC"],DNA["CCGTT"],DNA["ATTTG"]}],
			True
		],
		Test[
			"Test 18:",
			FoldsQ[{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"},DNA["TGTCG"]],
			True
		],
		Test[
			"Test 19:",
			FoldsQ[{DNA["CCCAC"],DNA["CGACA"],DNA["GACCC"],DNA["CCGTT"],DNA["ATTTG"]},"TGTCG"],
			True
		],
		Test[
			"Test 20:",
			FoldsQ[{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"},{"ATTTG","AACGG"}],
			{False,True}
		],
		Test[
			"Test 21:",
			FoldsQ[{AllSequences[2],AllSequences[3]}],
			{True,True}
		],
		Test[
			"Test 22:",
			FoldsQ[{{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"},{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"}},{"ATTTG","AACGG"}],
			{False,True}
		],
		Example[
			{Basic,"Returns true if in the provided strand a fold of lengh 'k' not designated by motif Pairing exists anywhere:"},
			FoldsQ[Strand[DNA["CCATTGATAC"],RNA["GUAUC"]],3,CanonicalPairing->True],
			True
		],
		Example[
			{Additional,"Returns true if in the provided strand a fold of lengh 'k' not designated by motif Pairing exists anywhere:"},
			FoldsQ[Strand[DNA["CCATTGATAC"],RNA["GUAUC"]],3,CanonicalPairing->False],
			False
		],
		Test[
			"Test 23:",
			FoldsQ[Strand[DNA["CCAT"],DNA["TGATAC"],RNA["GUAUC"]],3,CanonicalPairing->True],
			True
		],
		Test[
			"Test 24:",
			FoldsQ[Strand[DNA["CCATTGATAC"],DNA["GTATC"]],3,CanonicalPairing->False],
			True
		],
		Example[
			{Options,CanonicalPairing,"Can allow canonical pairing:"},
			FoldsQ[Strand[DNA["CCATTGATAC"],RNA["GUAUC"]],3,CanonicalPairing->True],
			True
		],
		Example[
			{Options,CanonicalPairing,"Can turn off canonical pairing:"},
			FoldsQ[Strand[DNA["CCATTGATAC"],RNA["GUAUC"]],3,CanonicalPairing->False],
			False
		],
		Example[
			{Options,Polymer,"Can specify polymer type:"},
			FoldsQ[{"CCCAC","CGACA","GACCC","CCGTT","ATTTG"},DNA["TGTCG"], Polymer->DNA],
			True
		],
		Test[
			"Test 25:",
			FoldsQ[Structure[{Strand[DNA["CCATTGATAC"],RNA["GUAUC"]]},{}],3,CanonicalPairing->False],
			False
		],
		Test[
			"Test 26:",
			FoldsQ[Structure[{Strand[DNA["CCATTGATAC"],RNA["GUAUC"]]},{}],3,CanonicalPairing->True],
			True
		]
}];


(* ::Subsubsection::Closed:: *)
(*RepeatingMatrix*)


DefineTests[RepeatingMatrix,
{
		Example[{Basic,"Repeating matrix for 1-mer repeats:"},
			RepeatingMatrix["AAGCCTCGGTCAGTGCGGACTTTAG",1],
			{{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0},{1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0},{0,0,1,0,0,0,0,1,1,0,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1}}
		],
		Example[{Basic,"Repeating matrix for 3-mer repeats:"},
			RepeatingMatrix["AAGCCTCGGTCAGTGCGGACTTTAG",3],
			{{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}}
		],
		Example[{Options,Polymer,"Can specify a polymer type:"},
			RepeatingMatrix["CGGAAC",2, Polymer ->RNA],
			{{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}}
		],
		Example[{Options,Degeneracy,"Can set degeneracy:"},
			RepeatingMatrix["AAGUCCCGCUAUUAAUCUUCGGCAG",2, Degeneracy ->True],
			{{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}}
		],
		Example[{Attributes,Listable,"Function is listable:"},
			RepeatingMatrix[{"CGGAAC","AAGUCCCGCUAUUAAUCUUCGGCAG"},2],
			{{{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}},{{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}}}
		],
		Test[
			"Test 1:",
			RepeatingMatrix["GCCGCCCAAACAGUUGGUUACAGCU",3],
			{{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1}}
		],
		Example[{Basic,"Repeating matrix for 3-mer repeats in a peptide:"},
			RepeatingMatrix["ThrThrThrHisTyrHisLysLeuHisThrGlnValTrpAlaSerHisThrArgSerSerIleThrLeuThrAla",1],
			{{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},{0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{1,1,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1}}
		],
		Test[
			"Test 2:",
			RepeatingMatrix["CATCCGGTCT",Range[11]],
			{{{1,0,0,1,1,0,0,0,1,0},{0,1,0,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,1,0,1},{1,0,0,1,1,0,0,0,1,0},{1,0,0,1,1,0,0,0,1,0},{0,0,0,0,0,1,1,0,0,0},{0,0,0,0,0,1,1,0,0,0},{0,0,1,0,0,0,0,1,0,1},{1,0,0,1,1,0,0,0,1,0},{0,0,1,0,0,0,0,1,0,1}},{{1,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,1,0},{0,0,0,1,0,0,0,0,0},{0,0,0,0,1,0,0,0,0},{0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,1}},{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}},{{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}},{{1,0,0,0,0,0},{0,1,0,0,0,0},{0,0,1,0,0,0},{0,0,0,1,0,0},{0,0,0,0,1,0},{0,0,0,0,0,1}},{{1,0,0,0,0},{0,1,0,0,0},{0,0,1,0,0},{0,0,0,1,0},{0,0,0,0,1}},{{1,0,0,0},{0,1,0,0},{0,0,1,0},{0,0,0,1}},{{1,0,0},{0,1,0},{0,0,1}},{{1,0},{0,1}},{{1}},{}}
		],
		Test[
			"Test 3:",
			RepeatingMatrix[{"CATCCGGTCT","GGGGGCGTGA","GCACTGTGGC"},3],
			{{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}},{{1,1,1,0,0,0,0,0},{1,1,1,0,0,0,0,0},{1,1,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}},{{1,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0},{0,0,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}}}
		],
		Test[
			"Test 4:",
			RepeatingMatrix[{"CATCCGGTCT","GGGGGCGTGA","GCACTGTGGC"},{2,3,4}],
			{{{1,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,1,0},{0,0,0,1,0,0,0,0,0},{0,0,0,0,1,0,0,0,0},{0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,1,0,0},{0,0,1,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,1}},{{1,1,1,0,0,0,0,0},{1,1,1,0,0,0,0,0},{1,1,1,0,0,0,0,0},{0,0,0,1,0,0,0,0},{0,0,0,0,1,0,0,0},{0,0,0,0,0,1,0,0},{0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,1}},{{1,0,0,0,0,0,0},{0,1,0,0,0,0,0},{0,0,1,0,0,0,0},{0,0,0,1,0,0,0},{0,0,0,0,1,0,0},{0,0,0,0,0,1,0},{0,0,0,0,0,0,1}}}
		],
		Test[
			"Test 5:",
			RepeatingMatrix["GGGACGGTGATGCGATGTCTGGATGTGCGGAGCCCAAATAGGTTGCTCTTCGCTATCACTTTGATTGCTACGGCAGCTCTGGTCGGCCCAGCCAGCCATC",3,20;;30],
			{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}
		],
		Test[
			"Test 6:",
			RepeatingMatrix["TCATTGAGCCAGCACGCATACCTAACATCTTTCTCTCATTAGTTGGCTAGGCCCGGCGTTCGCGGCTACTCCCTATAGGTATCCCGTGGAAGCACCTTAG",3,{20;;30,50;;60}],
			{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}}
		],
		Test[
			"Test 7:",
			RepeatingMatrix[{"TCATTGAGCCAGCACGCATACCTAACATCTTTCTCTCATTAGTTGGCTAGGCCCGGCGTTCGCGGCTACTCCCTATAGGTATCCCGTGGAAGCACCTTAG","AAAGCCCTCATATATTTATCTCCAACGTATGAGGCAAACCTCCCGATCAGTGCACAACATTCTTTCTGCTCATATTGTCCGTACGACCGAAGCATTTTGA"},3,{20;;30,50;;60}],
			{{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}}
		],
		Test[
			"Test 8:",
			RepeatingMatrix[{"AACTTCGACCTATTTTCCACTTACGGTAATCTAATATTGCTCAACACTTGTAGAGTCGATTATTGCTTTCAAGTCTTCACCTGGATTGCCCGGTCGTTCG","TGTGTAGCGTGTGTCTTAGCCGAATCGAATGAATAGGAGAAAGACCTAGGGTTTGTGAGTCCCCCTCGGGCGCTTATCAGCATGTGAGTAGGTATGTTCA","TTGTTTCACGTGACCAATGCTTGTGCTGATGGTCGATTTGAACATACGTAGGCCCTTACATAACAAGGTTTGCTTACCCTGGGAGTGGCCTTAATTGCTC"},{2,3,4},20;;30],
			{{{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,1},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0},{0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0}},{{0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0}},{{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}}}
		],
		Test[
			"Test 9:",
			RepeatingMatrix["Fish",1],
			_RepeatingMatrix
		]
}];


(* ::Subsubsection::Closed:: *)
(*RepeatingSequences*)


DefineTests[RepeatingSequences,
{
		Example[{Basic,"Find all 6-mer repeating subsequences:"},
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6],
			{"AGTCCC","CGGAGC","CGGAGC","AGTCCC"}
		],
		Example[{Basic,"Find all repeating subsequences whose length is between 4 and 6:"},
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",Range[4,6]],
			{{"GGTA","AGTC","AGTC","GTCC","GTCC","TCCC","CCCG","CCGG","CCGG","GGTA","ACCT","ACCT","TACC","ACCT","ACCT","GAGT","AGTC","AGTC","CTGT","CCGG","CCGG","CGGA","CGGA","CGGA","CGGA","GGAG","GAGC","CCCG","CCGG","CCGG","CGGA","CGGA","GGAG","GAGC","CTGT","GTCC","GTCC","GAGT","AGTC","AGTC","GTCC","GTCC","TCCC","CCTA","CTAC","TACC","ACCT","ACCT","CCTA","CTAC"},{"AGTCC","GTCCC","CCCGG","TACCT","GAGTC","CCGGA","CGGAG","GGAGC","CCCGG","CCGGA","CGGAG","GGAGC","GAGTC","AGTCC","GTCCC","CCTAC","TACCT","CCTAC"},{"AGTCCC","CGGAGC","CGGAGC","AGTCCC"}}
		],
		Example[{Basic,"Analyze multiple sequences at once:"},
			RepeatingSequences[{"CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA","TTAAACGCTAGTCCAGCGGTACGGGCCCGACCGACATATGGATGTGGCACTTCGTTCAATCTAACGTGGTAGTGTATGATTATTAAGCACGAGGTGCAAT","GTATTCATCGATCAGAACTTATCGGATTCTAAGCTTTCTTTGGTTTAAGCAAGGGATTAGGTAGAGGACCAATGGTGTTCCACCCACAGTTCGGAAACTT"},4]=={{"GGTA","AGTC","AGTC","GTCC","GTCC","TCCC","CCCG","CCGG","CCGG","GGTA","ACCT","ACCT","TACC","ACCT","ACCT","GAGT","AGTC","AGTC","CTGT","CCGG","CCGG","CGGA","CGGA","CGGA","CGGA","GGAG","GAGC","CCCG","CCGG","CCGG","CGGA","CGGA","GGAG","GAGC","CTGT","GTCC","GTCC","GAGT","AGTC","AGTC","GTCC","GTCC","TCCC","CCTA","CTAC","TACC","ACCT","ACCT","CCTA","CTAC"},{"TTAA","AACG","TAGT","GGTA","CCGA","CGAC","CCGA","CGAC","TATG","GTGG","GCAC","CAAT","AACG","GTGG","GGTA","TAGT","TATG","ATTA","ATTA","TTAA","GCAC","CAAT"},{"ATTC","ATCG","AACT","ACTT","ATCG","TCGG","CGGA","GGAT","GATT","ATTC","TTCT","TAAG","AAGC","CTTT","TTCT","CTTT","TGGT","TAAG","AAGC","GGAT","GATT","TGGT","GTTC","CCAC","CCAC","GTTC","TCGG","CGGA","AACT","ACTT"}},
			True
		],
		Example[{Options,Polymer,"Can specify polymer type:"},
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6,Polymer->DNA],
			{"AGTCCC","CGGAGC","CGGAGC","AGTCCC"}
		],
		Example[{Options,Degeneracy,"Can turn on degeneracy:"},
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAANNNNTAACTAGTTACCTGAGTCTGTGGGCCGGACGTNNNAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6,Degeneracy->True],
			{"AGTCCC","AGTCCC"}
		],
		Example[{Options,MinLevel,"Can turn on MinLevel:"},
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAANNNNTAACTAGTTACCTGAGTCTGTGGGCCGGACGTNNNAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",6,MinLevel->10],
			{"AGTCCC","AGTCCC"}
		],
		Example[{Options,Consolidate,"If no length 'k' is provided counts only the largest occurance of a subsequence (e.g. if a folding subsequence of length 6 exists, and consolidate is true, does not return the composite 5,4,3,2,1-mer folds that exist entirely within the 6mer fold):"},
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACC",Consolidate->True],
			{"GGTA","GGTA","CAG","TAC","ACT","CAG","AGT","TAA","AAC","ACC","TTA","TAA","AAC","ACT","AGT","TTA","TAC","ACC","CA","CG","CA","CA","CA","AC","AC","TC","CA","CA","CA","AG","AG","GT","GT","TC","CC","CC","CC","CC","CG","GT","GT","GT","AG","AG","AG","AC","AC","AC","AC","AC","CA","CA","CA","AC","AC","AC","AC","AC","CC","CC","CC","CT","CT","TT","TT","TA","TA","TA","TA","AA","AA","AC","AC","AC","AC","AC","CT","CT","TA","TA","TA","TA","AG","AG","AG","GT","GT","GT","TT","TT","TA","TA","TA","TA","AC","AC","AC","AC","AC","CC","CC","CC","G","G","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","G","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","A","A","G","G","G","G","G","G","G","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","T","A","A","A","A","A","A","A","A","A","A","A","A","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C","C"}
		],
		Example[{Attributes,Listable,"Function is listable:"},
			RepeatingSequences[{"CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACC","CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA"},6],
			{{},{"AGTCCC","CGGAGC","CGGAGC","AGTCCC"}}
		],
		Test[
			"Test 1:",
			RepeatingSequences[{"CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA","TTAAACGCTAGTCCAGCGGTACGGGCCCGACCGACATATGGATGTGGCACTTCGTTCAATCTAACGTGGTAGTGTATGATTATTAAGCACGAGGTGCAAT","GTATTCATCGATCAGAACTTATCGGATTCTAAGCTTTCTTTGGTTTAAGCAAGGGATTAGGTAGAGGACCAATGGTGTTCCACCCACAGTTCGGAAACTT"},{4,5,6}]=={{"GGTA","AGTC","AGTC","GTCC","GTCC","TCCC","CCCG","CCGG","CCGG","GGTA","ACCT","ACCT","TACC","ACCT","ACCT","GAGT","AGTC","AGTC","CTGT","CCGG","CCGG","CGGA","CGGA","CGGA","CGGA","GGAG","GAGC","CCCG","CCGG","CCGG","CGGA","CGGA","GGAG","GAGC","CTGT","GTCC","GTCC","GAGT","AGTC","AGTC","GTCC","GTCC","TCCC","CCTA","CTAC","TACC","ACCT","ACCT","CCTA","CTAC"},{"CCGAC","CCGAC"},{}},
			True
		],
		Test[
			"Test 2:",
			RepeatingSequences["CACGCAGGTACTCAGTCCCGGTAAGACAACCTTTAACTAGTTACCTGAGTCTGTGGGCCGGACGTCGGAGCCCGGAGCTGTCCAGAGTCCCTACCTACGA",MinLevel->2],
			{"AGTCCC","CGGAGC","CGGAGC","AGTCCC","CCCGG","TACCT","GAGTC","CCGGA","CCCGG","CCGGA","GAGTC","CCTAC","TACCT","CCTAC","GGTA","GGTA","ACCT","ACCT","CTGT","CCGG","CCGG","CGGA","CGGA","CTGT","GTCC","GTCC","AGTC","AGTC","GTCC","GTCC","ACCT","ACCT","ACG","ACG","CAG","CAG","ACT","CAG","CAG","TAA","AGA","GAC","AAC","TTA","TAA","AAC","ACT","TTA","TAC","TAC","AGT","AGT","AGT","CTG","CTG","GCC","GAC","ACG","ACG","GTC","GTC","GAG","GAG","GCC","CGG","CGG","GAG","GAG","GAG","CTG","CTG","GTC","GTC","GTC","GTC","CAG","CAG","AGA","GAG","GAG","GAG","AGT","AGT","AGT","GTC","GTC","GTC","GTC","CCC","CCC","CCT","CTA","CTA","TAC","TAC","TAC","CCT","CCT","CCT","CTA","CTA","TAC","TAC","TAC","ACG","ACG","CA","CA","CA","CA","CA","CA","CA","CA","CA","CA","AC","AC","AC","AC","TT","TT","AA","AA","AC","AC","AC","AC","AC","AC","AC","AC","TA","TA","AG","AG","GT","GT","TT","TT","TA","TA","TA","TA","TA","TA","AC","AC","AC","AC","AC","AC","AC","AC","CC","CC","CC","CC","CC","CC","CT","CT","CT","CT","AG","AG","AG","AG","AG","AG","AG","AG","GT","GT","GT","GT","GT","GT","GT","GT","CT","CT","CT","CT","CT","CT","CT","GT","GT","GT","GT","GT","GT","GT","GT","TG","TG","TG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GC","GC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","GG","GG","GG","GG","GG","GG","AC","AC","AC","AC","AC","AC","AC","AC","CG","CG","CG","CG","CG","CG","GT","GT","GT","GT","GT","GT","GT","GT","CG","CG","CG","CG","CG","CG","GG","GG","GG","GG","GG","GG","GA","GA","GA","GA","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CG","CG","CG","CG","CG","CG","GG","GG","GG","GG","GG","GG","GA","GA","GA","GA","GA","GA","AG","AG","AG","AG","AG","AG","AG","AG","GC","GC","GC","CT","CT","CT","CT","CT","CT","CT","TG","TG","TG","GT","GT","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CA","CA","CA","CA","AG","AG","AG","AG","AG","AG","AG","AG","GA","GA","GA","GA","GA","GA","AG","AG","AG","AG","AG","AG","AG","AG","GT","GT","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","AC","AC","AC","AC","AC","AC","AC","AC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CC","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","AC","AC","AC","AC","AC","AC","AC","AC","CG","CG","CG","CG","CG","CG","GA","GA","GA","GA","GA","GA"}
		],
		Test[
			"Test 3:",
			RepeatingSequences["UUGAGUCUUUAAUGCCGAGACAAAGCGAGCUUCUGUUUAAAUUGUGCGUACUCUUGUGCAUCCUCGGUGUUAGUAUUCGUUGAUUGCGUGACAUUAGCCG",2,20;;30],
			{"GA","GA","GA","GA","GA","AC","AC","CA","CA","AA","AA","AA","AA","AA","AA","AA","AA","AG","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","CG","CG","CG","CG","CG","CG","GA","GA","GA","GA","GA","AG","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","CU","CU","CU","CU","CU"}
		],
		Test[
			"Test 4:",
			RepeatingSequences["MetCysGluTyrMetArgThrGluSerProPheCysTrpProThrGlySerCysArgArgValHisPheProAsp"],
			{"Met","Cys","Cys","Glu","Met","Arg","Arg","Thr","Glu","Ser","Pro","Pro","Phe","Cys","Cys","Pro","Pro","Thr","Ser","Cys","Cys","Arg","Arg","Arg","Arg","Phe","Pro","Pro"}
		],
		Test[
			"Test 5:",
			RepeatingSequences["MetCysGluTyrMetArgThrGluSerProPheCysTrpProThrGlySerCysArgArgValHisPheProAsp",3],
			{}
		],
		Test[
			"Test 6:",
			RepeatingSequences["MetCysGluTyrMetArgThrGluSerProPheCysTrpProThrGlySerCysArgArgValHisPheProAsp",Range[10]],
			{{"Met","Cys","Cys","Glu","Met","Arg","Arg","Thr","Glu","Ser","Pro","Pro","Phe","Cys","Cys","Pro","Pro","Thr","Ser","Cys","Cys","Arg","Arg","Arg","Arg","Phe","Pro","Pro"},{},{},{},{},{},{},{},{},{}}
		],
		Test[
			"Test 7:",
			RepeatingSequences["GTGGCCGAGGGCATAGCCTGTCTCTCTAGCCTTTCTATCGGCCCGGTGCATCTGATACAAACACTGTATCTGACGCCTTAGTAAGTACGCTCCGGTTGAA",2,{20;;30,60;;70}]=={{"TG","TG","TG","TG","TG","TG","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC"},{"AA","AA","AA","AA","AA","AA","AC","AC","AC","AC","CA","CA","CA","AC","AC","AC","AC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TG","TG","TG","TG","TG","TG","GT","GT","GT","GT","GT","GT","TA","TA","TA","TA","TA","TA","TA","AT","AT","AT","AT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT"}},
			True
		],
		Test[
			"Test 8:",
			RepeatingSequences[{"GTGGCCGAGGGCATAGCCTGTCTCTCTAGCCTTTCTATCGGCCCGGTGCATCTGATACAAACACTGTATCTGACGCCTTAGTAAGTACGCTCCGGTTGAA","ACGTAGCTCGGCTTGTCCACTAGGTTGCGGTGTTCCAAGAACGCTGTCCCGACCCACAACACCAATGGAGTAGATGACATAAGTAACTCAGTATAGGTAA"},2,{20;;30,60;;70}],
			{{"TG","TG","TG","TG","TG","TG","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC"},{"AC","AC","AC","AC","AC","AC","AC","AC","CA","CA","CA","CA","CA","CA","CA","AC","AC","AC","AC","AC","AC","AC","AC","CC","CC","CC","CC","CC","CC","CA","CA","CA","CA","CA","CA","CA","AA","AA","AA","AA","AA","AA","AT","AT","AT","TG","TG","TG","TG","TG","GG","GG","GG","GG","GA","GA","GA","GA","AG","AG","AG","AG","AG","AG","AG","GT","GT","GT","GT","GT","GT","GT","GT","GT"}}
		],
		Test[
			"Test 9:",
			RepeatingSequences[{"GTGGCCGAGGGCATAGCCTGTCTCTCTAGCCTTTCTATCGGCCCGGTGCATCTGATACAAACACTGTATCTGACGCCTTAGTAAGTACGCTCCGGTTGAA","ACGTAGCTCGGCTTGTCCACTAGGTTGCGGTGTTCCAAGAACGCTGTCCCGACCCACAACACCAATGGAGTAGATGACATAAGTAACTCAGTATAGGTAA"},{2,5},{20;;30,60;;70}],
			{{"TG","TG","TG","TG","TG","TG","GT","GT","GT","GT","GT","GT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TC","TC","TC","TC","TC","TC","TC","CT","CT","CT","CT","CT","CT","CT","CT","CT","CT","TA","TA","TA","TA","TA","TA","TA","AG","AG","AG","AG","GC","GC","GC","GC","GC","GC","GC","CC","CC","CC","CC","CC","CC"},{}}
		],
		Test[
			"Test 10:",
			RepeatingSequences["AAATGTTTCCAAGGGTTCCGGAACTATAAGGTTCTTTGGAACCGTTGTCTTGGTCGGGTCAAGGGACGTTGTGGGAGAGCGATTTAATTATGGTATATCG",{4,2},{20;;30,60;;70}],
			{{"GGAA","GAAC","TATA","AAGG","AAGG","GGTT"},{"TC","TC","TC","TC","TC","TC","CA","AA","AA","AA","AA","AA","AA","AA","AG","AG","AG","AG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GG","GA","GA","GA","GA","GA","AC","AC","CG","CG","CG","CG","CG","GT","GT","GT","GT","GT","GT","GT","GT","GT","TT","TT","TT","TT","TT","TT","TT","TT","TT","TT","TT","TG","TG","TG","TG","TG","TG"}}
		],
		Test[
			"Test 11:",
			RepeatingSequences["CCAAACAGGAACAGATCTGGGGGCTTTGGGGAATGCCCACTTATAAAGTCGAGGCCGCTGCTAAGTCCTTTAGTTAGAAAGGGTTCACGCCAACCTATCG",{3,4},{20;;30,60;;70}],
			{{"TGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGC","GCT","GCT","CTT","CTT","TTT","TGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGG","GGA"},{"AAGT","AGTC","CTTT","TTAG"}}
		],
		Test[
			"Test 12:",
			RepeatingSequences["ACCUCAGGUCUUCGGCCAAGCUACUGUGUUCUUCCGAUGAAGGCGAUCGUGGAAUGGUCCCGAGCCAUGCACUAUCACAGGGACAAGCUAAGUAAAACAU",{3,4},{20;;30,60;;70}],
			{{"AAG","AAG","AAG","AGC","AGC","GCU","CUA","CUA","ACU","UGU","GUG","UGU","UUC","UUC","UCU"},{"CCGA","GCCA"}}
		],
		Test[
			"Test 13:",
			RepeatingSequences["Fish",5],
			_RepeatingSequences
		]
}];


(* ::Subsubsection::Closed:: *)
(*NumberOfRepeats*)


DefineTests[NumberOfRepeats,
{
		Example[{Basic,"Find number of 2-mer repeats:"},
			NumberOfRepeats["ATTAGATAGAGACA",2],
			16
		],
		Example[{Basic,"Find number of 4-mer repeats:"},
			NumberOfRepeats["CUUGUGGGCCGUCAAGUUAGCCGAU",4],
			2
		],
		Example[{Basic,"Find number of 4-mer repeats in multiple sequences:"},
			NumberOfRepeats[{"CUUGUGGGCCGUCAAGUUAGCCGAU","ACAACAAGCATCCCTCACTACTTAA"},4],
			{2,2}
		],
		Example[{Basic,"Count repeats of different sizes in one sequence:"},
			NumberOfRepeats["AACGATCTTTTTTATCACGGGCCGA",{3,4,5}],
			{18,6,2}
		],
		Test[
			"Test 1:",
			NumberOfRepeats["CAACCUGCCAUUUACUAUGACUCAA",{3,4,5}],
			{4,0,0}
		],
		Test[
			"Test 2:",
			NumberOfRepeats[{"AACGATCTTTTTTATCACGGGCCGA","CGAGTATGATCCAACGAATACCTGC","CCCTTTGCCCCTAGGATTGCATCTA"},{3,4,5}],
			{18,0,0}
		],
		Test[
			"Test 3:",
			NumberOfRepeats["SerCysPheLeuCysGlnGluTrpArgSerGlyGlyTyrArgPheIleLysAlaArgArgLysAspHisAspAsp",{3,4,5}],
			{0,0,0}
		],
		Test[
			"Test 4:",
			NumberOfRepeats["ATTCACACCGTGAGGTGGTTATTTA",2,10;;20],
			14
		],
		Test[
			"Test 5:",
			NumberOfRepeats["Fish",5],
			_NumberOfRepeats
		],
		Test[
			"Test 6:",
			NumberOfRepeats["ATTCACACCGTGAGGTGGTTATTTA",{2,3,4},10;;20],
			{14,5,0}
		],
		Test[
			"Test 7:",
			NumberOfRepeats["CUCCACUAGUUUGCGAUAGGACCUC",{2,3,4},10;;20],
			{6,1,0}
		],
		Test[
			"Test 8:",
			NumberOfRepeats[{"ATTCACACCGTGAGGTGGTTATTTA","TGCGAAGGGGATGGAATAACATACC","GGCGCACTTAAAAAACCGACTACGG"},3,10;;20],
			{5,5,13}
		],
		Test[
			"Test 9:",
			NumberOfRepeats[{"ATTCACACCGTGAGGTGGTTATTTA","TGCGAAGGGGATGGAATAACATACC","GGCGCACTTAAAAAACCGACTACGG"},{3,2,4},10;;20],
			{5,21,6}
		],
		Test[
			"Test 10:",
			NumberOfRepeats["TTTACCTAAGTTTCACGTAGGTCTATCATACAGTCGCTCCGGCTATATAACGTCGACTGACAATCGAACAATGCAAACGTTTGGGGAGTGTCGCACCTTC",4,{10;;20,40;;50}],
			{3,6}
		],
		Test[
			"Test 11:",
			NumberOfRepeats["TTTACCTAAGTTTCACGTAGGTCTATCATACAGTCGCTCCGGCTATATAACGTCGACTGACAATCGAACAATGCAAACGTTTGGGGAGTGTCGCACCTTC",{4,3},{10;;20,40;;50}],
			{3,16}
		],
		Test[
			"Test 12:",
			NumberOfRepeats["GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC",{4,3},{10;;20,40;;50}],
			{6,22}
		],
		Test[
			"Test 13:",
			NumberOfRepeats["GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC",4,{10;;20,40;;50}],
			{6,6}
		],
		Test[
			"Test 14:",
			NumberOfRepeats[{"GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC","GGAUAGUUCCUCUUCUACCAUCGGCGCGAGGUGUAGCCAGGACCACGGGCCCGGAUCGGCUGGGCACGUACACUUGAUCGUUCCAUGCCGUGCCACCAAG"},4,{10;;20,40;;50}],
			{6,5}
		],
		Test[
			"Test 15:",
			NumberOfRepeats[{"GCGCCAUUCGUCGAUAUACGAAAGGGACACUAUUGUAUGGCUUAUAAACAUUAUAAAUACUUCGUGAUCCAUCCGUGAAAAGCCGAGUAUCUAUCGGGAC","GGAUAGUUCCUCUUCUACCAUCGGCGCGAGGUGUAGCCAGGACCACGGGCCCGGAUCGGCUGGGCACGUACACUUGAUCGUUCCAUGCCGUGCCACCAAG"},{4,3},{10;;20,40;;50}],
			{6,24}
		],
		Test[
			"Test 16:",
			NumberOfRepeats["GTAGGGAATCGTACACCTAAAAATTTATTCCGGCCACATTGATTCGCTAGACACGGGTCTAAATTTGCCGGGTT"],
			{780,156,52,8,4,2}
		],
		Test[
			"Test 17:",
			NumberOfRepeats["UCCAAGUCAAACGAGCUGCCCGAUAGCUUGCUGACUUCACUUUUAGAUGACUAGACAGCGCCCAACGU"],
			{652,144,34,14,2}
		],
		Test[
			"Test 18:",
			NumberOfRepeats[{"GTAGGGAATCGTACACCTAAAAATTCGGGTCTAAATTTGCCGGGTT","ACGAAAACTACCCTTGAAATGTATCGAGACCCCTGTTAGAACACACTGATTGCTCGTCGCCTCATAAGACATGT"}],
			{{274,70,16,2,6},{772,192,48,12}}
		],
		Test[
			"Test 19:",
			NumberOfRepeats["AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAATCCTACTTTTATGGTGGGGGCGTCAATGGGAGGGAGATAATCAGGGGCCGGCC",10;;20],
			{144,43,10,2,1,1}
		],
		Test[
			"Test 20:",
			NumberOfRepeats["AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAATCCTACTTTTATGGTGGGGGCGTCAATGGGAGGGAGATAATCAGGGGCCGGCC",{10;;20,40;;50}],
			{{144,43,10,2,1,1},{144,37,8,3}}
		],
		Test[
			"Test 21:",
			NumberOfRepeats[{"AAGCTTGAGGGAGACCTCGTCCGAGCACCCCGCTACCAGCTGACAAATCCTACTTTTATGGTGGGGGCGTCAATGGGAGGGAGATAATCAGGGGCCGGCC","CGGTTAAGTACGTGACAGCGCAATCTTAAGGGACTGGATAAGACTGTTACCTGAGTAAACTTCCTATGCGCGATCTCTCGCTCACCTTGTTCACCCCAAG"},{40;;50,75;;85}],
			{{144,37,8,3},{141,45,8,4,1}}
		],
		Example[{Options,Polymer,"Can specify polymer type:"},
			NumberOfRepeats["ATTAGATAGAGACA",2,Polymer->DNA],
			16
		],
		Example[{Options,MinLevel,"Can specify MinLevel:"},
			NumberOfRepeats["CUUGUGGGCCGUCAAGUUAGCCGAU",2,MinLevel->5],
			20
		],
		Example[{Options,Consolidate,"Can turn on Condolidate while no length 'k' is provided:"},
			NumberOfRepeats["CUUGUGGGCCGUCAAGUUAGCCGAU",Consolidate->True],
			{104,14,2}
		],
		Example[{Options,Consolidate,"Can turn off Condolidate while no length 'k' is provided:"},
			NumberOfRepeats["CUUGUGGGCCGUCAAGUUAGCCGAU",Consolidate->False],
			{140,20,4,2}
		],
		Example[{Attributes,Listable,"Function is listable:"},
			NumberOfRepeats[{"AACGATCTTTTTTATCACGGGCCGA","CGAGTATGATCCAACGAATACCTGC","CCCTTTGCCCCTAGGATTGCATCTA"},{3,4,5}],
			{18,0,0}
		]
}];


(* ::Subsubsection::Closed:: *)
(*RepeatsQ*)


DefineTests[RepeatsQ,
{
		Test[
			"Test 1:",
			RepeatsQ["TTTTACTGTAAATACCTTCCGGTAG",3],
			True
		],
		Test[
			"Test 2:",
			!RepeatsQ["TTTTACTGTAAATACCTTCCGGTAG",6],
			True
		],
		Test[
			"Test 3:",
			RepeatsQ["GGGUUAGGUUCUAGAGCGAACGACA",4],
			True
		],
		Test[
			"Test 4:",
			!RepeatsQ["GGGUUAGGUUCUAGAGCGAACGACA",8],
			True
		],
		Test[
			"Test 5:",
			!RepeatsQ["HisHisLysArg",3],
			True
		],
		Test[
			"Test 6:",
			RepeatsQ["HisHisLysArg",1],
			True
		],
		Test[
			"Test 7:",
			RepeatsQ[{"GGTGAGCTAAGACGCCCAAGCGTCC","ATACACAGGGCTTCGTCAAGAGTCG","ACCGCCCTGCTTACTATTTACGCCG"},4],
			{False,False,True}
		],
		Test[
			"Test 8:",
			RepeatsQ["CGCTCAGCGTAAAATTGCTGGGGTG",{2,3,4,5}],
			{True,True,False,False}
		],
		Test[
			"Test 9:",
			RepeatsQ[{"CGCTCAGCGTAAAATTGCTGGGGTG","TGTTTCCGGGGCAGGACAATGCGTG","GTATCACGCGCGGTAGGAATGAAAC"},{3,4,5}],
			{True,False,False}
		],
		Test[
			"Test 10:",
			RepeatsQ["CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG",4,10;;20],
			True
		],
		Test[
			"Test 11:",
			!RepeatsQ["CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG",9,10;;20],
			True
		],
		Test[
			"Test 12:",
			RepeatsQ["CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG",4,{10;;20,40;;50}],
			{True,True}
		],
		Test[
			"Test 13:",
			RepeatsQ[{"CATAGCGGCTGCATCGCTCCCTGGGTTCCACCTGCAAGGTGCCTTATGGTATGGGGTGCATTTTACGTGGGTCTGAAAAAGGACCACCATCTGTATCCAG","CAATACATGTCAAACACCGCTTGCCGCCTTGTGCTGAATCGCCATTATCGAAGCTTCTCAGGCACCGATTAAGCTAGGGGCCTAATTGAGACTGAGCCCA"},{7,2},{10;;20,40;;50}],
			{False,True}
		],
		Example[
			{Basic,"Check if sequences are repeats:"},
			RepeatsQ[{"ATGC","TGAC","ATGC"}],
			True
		],
		Example[
			{Options,Polymer,"Can specify the polymer type:"},
			RepeatsQ[{"ATGC","TGAC","ATGC"}, Polymer->DNA],
			True
		],
		Example[
			{Basic,"Check if sequences are repeats:"},
			RepeatsQ[AllSequences[4]],
			False
		],
		Test[
			"Test 14:",
			RepeatsQ[{"ATGC","TGAC",DNA["ATGC"]}],
			True
		],
		Test[
			"Test 15:",
			RepeatsQ[{DNA["ATGC"],DNA["TGAC"],DNA["ATGC"]}],
			True
		],
		Test[
			"Test 16:",
			RepeatsQ[AllSequences[4],"ATGC"],
			True
		],
		Example[
			{Basic,"Not repeats:"},
			RepeatsQ[{"A","G","C"},"T"],
			False
		],
		Test[
			"Test 17:",
			RepeatsQ[AllSequences[4],DNA["ATGC"]],
			True
		],
		Test[
			"Test 18:",
			RepeatsQ[DNA/@AllSequences[4],DNA["ATGC"]],
			True
		],
		Test[
			"Test 19:",
			RepeatsQ[{AllSequences[4],AllSequences[4]},"ATGC"],
			{True,True}
		],
		Test[
			"Test 20:",
			RepeatsQ[{AllSequences[4],{"AGCA",DNA["AGCA"]}},"ATGC"],
			{True,False}
		],
		Test[
			"Test 21:",
			RepeatsQ[{AllSequences[4],{"AGCA",DNA["AGCA"],DNA["ATGC"]}},"ATGC"],
			{True,True}
		],
		Test[
			"Test 22:",
			RepeatsQ[AllSequences[4],{"ATGC","AGGC","GGCA"}],
			{True,True,True}
		],
		Test[
			"Test 23:",
			RepeatsQ[{AllSequences[4],AllSequences[2]},{"ATGA","AT"}],
			{True,True}
		],
		Example[
			{Options,CanonicalPairing,"CanonicalPairing set as true:"},
			RepeatsQ[Strand[DNA["CCATTGATAC"],RNA["CCAUUG"]],4,CanonicalPairing->True],
			True
		],
		Example[
			{Options,CanonicalPairing,"CanonicalPairing set as false:"},
			RepeatsQ[Strand[DNA["CCATTGATAC"],RNA["CCAUUG"]],4,CanonicalPairing->False],
			False
		],
		Example[
			{Options,CanonicalPairing,"CanonicalPairing set as true:"},
			RepeatsQ[Strand[DNA["CCAT"],DNA["TGATAC"],RNA["CCAUUG"]],4,CanonicalPairing->True],
			True
		],
		Test[
			"Test 24:",
			RepeatsQ[Strand[DNA["CCATTGATAC"],DNA["CCATTG"]],4,CanonicalPairing->True],
			True
		],
		Test[
			"Test 25:",
			RepeatsQ[Strand[DNA["CCATTGATAC"],RNA["CCAUUG"]],4,CanonicalPairing->True],
			True
		],
		Test[
			"Test 26:",
			RepeatsQ[Strand[DNA["CCATTGATAC"],RNA["CCAUUG"]],4,CanonicalPairing->False],
			False
		],
		Test[
			"Test 27:",
			RepeatsQ[Structure[{Strand[DNA["CCATTGATAC"],RNA["CCAUUG"]]},{}],4,CanonicalPairing->False],
			False
		],
		Example[
			{Basic,"Structure with a repeat of length 4:"},
			RepeatsQ[Structure[{Strand[DNA["CCATTGATAC"],RNA["CCAUUG"]]},{}],4],
			True
		]
}];


(* ::Subsection:: *)
(*Sub sequences*)


(* ::Subsubsection::Closed:: *)
(*removeOnce*)


DefineTests[removeOnce,{
	Example[{Basic,"Removes the first occurence of an item from a list:"},
		removeOnce[{a,b,c,d,a,b,c,d},a],
		{b,c,d,a,b,c,d}
	],
	Example[{Basic,"Works for any item:"},
		removeOnce[{"taco","taco","fish"},"taco"],
		{"taco","fish"}
	],
	Example[{Additional,"Returns the list unaltered if the item isn't present:"},
		removeOnce[{1,2,3,4},1000],
		{1,2,3,4}
	],
	Example[{Additional,"The item itself can be a list:"},
		removeOnce[{{1,2,3},{4,5,6},{7,8,9},{1,2,3}},{1,2,3}],
		{{4,5,6},{7,8,9},{1,2,3}}
	],
	Test["Doesn't accept something that's not a list as first input:",
		removeOnce[2,2],
		HoldPattern[removeOnce[2,2]]
	]
}];


(* ::Subsubsection::Closed:: *)
(*removeList*)


DefineTests[removeList,{
	Example[{Basic,"Removes the contents of a remove list from a source list:"},
		removeList[{1,2,3,4,5},{2,4}],
		{1,3,5}
	],
	Example[{Basic,"There is a one-to-one relation between the source and remove lists:"},
		removeList[{a,a,b,b,c,c,d,d},{a,b,c,d}],
		{a,b,c,d}
	],
	Example[{Additional,"The order of the remove list doesn't matter:"},
		removeList[{1,2,3,4,5},{5,4,1}],
		{2,3}
	],
	Test["The first input must be a list:",
		removeList[4,{4,5,6}],
		HoldPattern[removeList[4,{4,5,6}]]
	],
	Test["The second input must be a list:",
		removeList[{4,5,6},4],
		HoldPattern[removeList[{4,5,6},4]]
	]
}];


(* ::Subsubsection::Closed:: *)
(*EmeraldSubsequences*)


DefineTests[EmeraldSubsequences,
{
		Test[
			"Breaks the provided sequence into a list of overlapping subsequences of length 3:",
			EmeraldSubsequences["ATGATAGATAG",3],
			{"ATG","TGA","GAT","ATA","TAG","AGA","GAT","ATA","TAG"}
		],
		Test[
			"Breaks the provided sequence into a list of overlapping sub sequences of length 1:",
			EmeraldSubsequences["ATGATAGATAG",1],
			{"A","T","G","A","T","A","G","A","T","A","G"}
		],
		Test[
			"Breaks the provided sequence into a list of overlapping subsequences of length 6:",
			EmeraldSubsequences["ATGATAGATAG",6],
			{"ATGATA","TGATAG","GATAGA","ATAGAT","TAGATA","AGATAG"}
		],
		Test[
			"Returns an empty list when no subsequence of specified length exists:",
			EmeraldSubsequences["ATGATAGATAG",12],
			{}
		],
		Test[
			"Breaks the provided peptide into a list of overlapping subsequences of length 3:",
			EmeraldSubsequences["ArgHisHisArg",2],
			{"ArgHis","HisHis","HisArg"}
		],
		Test[
			"For each sequence, breaks the provided sequence into lists of overlapping subsequences of length 2:",
			EmeraldSubsequences[{"ATGATAGA","ATAGTAC","GGCGAGCA"},2],
			{{"AT","TG","GA","AT","TA","AG","GA"},{"AT","TA","AG","GT","TA","AC"},{"GG","GC","CG","GA","AG","GC","CA"}}
		],
		Example[
			{Messages, "unknownPolymer", "For invalid input sequence, will throw a message:"},
			EmeraldSubsequences[{"ATGATAGA","ArgArgHisHis","AUGUCU","Fish"},2],
			{{"AT","TG","GA","AT","TA","AG","GA"},{"ArgArg","ArgHis","HisHis"},{"AU","UG","GU","UC","CU"},$Failed},
			Messages:>Message[Monomers::unknownPolymer, "Fish"]
		],
		Test[
			"Breaks the provided sequence into a list of overlapping subsequences from length 1 to the length of the sequence:",
			EmeraldSubsequences["ATGATA"],
			{"A","T","G","A","T","A","AT","TG","GA","AT","TA","ATG","TGA","GAT","ATA","ATGA","TGAT","GATA","ATGAT","TGATA","ATGATA"}
		],
		Test[
			"Breaks the provided peptide into a list of overlapping subsequences from length 1 to the length of the sequence:",
			EmeraldSubsequences["HisArgArgHisLysLysArgLysHisLysLys"],
			{"His","Arg","Arg","His","Lys","Lys","Arg","Lys","His","Lys","Lys","HisArg","ArgArg","ArgHis","HisLys","LysLys","LysArg","ArgLys","LysHis","HisLys","LysLys","HisArgArg","ArgArgHis","ArgHisLys","HisLysLys","LysLysArg","LysArgLys","ArgLysHis","LysHisLys","HisLysLys","HisArgArgHis","ArgArgHisLys","ArgHisLysLys","HisLysLysArg","LysLysArgLys","LysArgLysHis","ArgLysHisLys","LysHisLysLys","HisArgArgHisLys","ArgArgHisLysLys","ArgHisLysLysArg","HisLysLysArgLys","LysLysArgLysHis","LysArgLysHisLys","ArgLysHisLysLys","HisArgArgHisLysLys","ArgArgHisLysLysArg","ArgHisLysLysArgLys","HisLysLysArgLysHis","LysLysArgLysHisLys","LysArgLysHisLysLys","HisArgArgHisLysLysArg","ArgArgHisLysLysArgLys","ArgHisLysLysArgLysHis","HisLysLysArgLysHisLys","LysLysArgLysHisLysLys","HisArgArgHisLysLysArgLys","ArgArgHisLysLysArgLysHis","ArgHisLysLysArgLysHisLys","HisLysLysArgLysHisLysLys","HisArgArgHisLysLysArgLysHis","ArgArgHisLysLysArgLysHisLys","ArgHisLysLysArgLysHisLysLys","HisArgArgHisLysLysArgLysHisLys","ArgArgHisLysLysArgLysHisLysLys","HisArgArgHisLysLysArgLysHisLysLys"}
		],
		Test[
			"For each sequence in the list, breaks the provides sequence into a list of overlapping subsequences from length 1 to the length of the sequence:",
			EmeraldSubsequences[{"ATATGAG","AUGCUA","ArgArgLysLys"}],
			{{"A","T","A","T","G","A","G","AT","TA","AT","TG","GA","AG","ATA","TAT","ATG","TGA","GAG","ATAT","TATG","ATGA","TGAG","ATATG","TATGA","ATGAG","ATATGA","TATGAG","ATATGAG"},{"A","U","G","C","U","A","AU","UG","GC","CU","UA","AUG","UGC","GCU","CUA","AUGC","UGCU","GCUA","AUGCU","UGCUA","AUGCUA"},{"Arg","Arg","Lys","Lys","ArgArg","ArgLys","LysLys","ArgArgLys","ArgLysLys","ArgArgLysLys"}}
		],
		Test[
			"For each sequence in the list, breaks the provides sequence into a list of overlapping subsequences from length 1 to the length of the sequence:",
			ToString[EmeraldSubsequences[{"AUGCUA","ArgArgLysLys"}]],
			"{{A, U, G, C, U, A, AU, UG, GC, CU, UA, AUG, UGC, GCU, CUA, AUGC, UGCU, GCUA, AUGCU, UGCUA, AUGCUA}, {Arg, Arg, Lys, Lys, ArgArg, ArgLys, LysLys, ArgArgLys, ArgLysLys, ArgArgLysLys}}"
		],
		Test[
			"Breaks the provided peptide into a list of overlapping subsequences of length 2:",
			EmeraldSubsequences[Peptide["ArgHisHisArg"],2],
			{Peptide["ArgHis"],Peptide["HisHis"],Peptide["HisArg"]}
		],
		Test[
			"Breaks the provided DNA into a list of overlapping subsequences of length 3:",
			EmeraldSubsequences[DNA["ATGATAGATAG"],3],
			{DNA["ATG"],DNA["TGA"],DNA["GAT"],DNA["ATA"],DNA["TAG"],DNA["AGA"],DNA["GAT"],DNA["ATA"],DNA["TAG"]}
		],
		Test[
			"Breaks the provided DNA into a list of overlapping subsequences of length 1:",
			EmeraldSubsequences["ATGATAGATAG",1,ExplicitlyTyped->True],
			{DNA["A"],DNA["T"],DNA["G"],DNA["A"],DNA["T"],DNA["A"],DNA["G"],DNA["A"],DNA["T"],DNA["A"],DNA["G"]}
		],
		Test[
			"Breaks the provided sequence with degenerate bases into a list of overlapping subsequences of length 4:",
			EmeraldSubsequences["ATGATANNCNAT",4],
			{"ATGA","TGAT","GATA","ATAN","TANN","ANNC","NNCN","NCNA","CNAT"}
		],
		Test[
			"Breaks the provided DNA with degenerate bases into a list of overlapping subsequences of length 4:",
			EmeraldSubsequences[DNA["ATGATANNCNAT"],4],
			{DNA["ATGA"],DNA["TGAT"],DNA["GATA"],DNA["ATAN"],DNA["TANN"],DNA["ANNC"],DNA["NNCN"],DNA["NCNA"],DNA["CNAT"]}
		],
		Test[
			"Breaks the provided degenerate sequence into a list of overlapping subsequences of length 5:",
			EmeraldSubsequences[DNA[12],5],
			{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]}
		],
		Test[
			"Breaks the provided degenerate sequence into a list of overlapping subsequences of length 5:",
			EmeraldSubsequences[DNA[10],5,ExplicitlyTyped->False],
			{"NNNNN","NNNNN","NNNNN","NNNNN","NNNNN","NNNNN"}
		],
		Test[
			"Given a Structure, and a level 5, returns a list of rules for each subsequence of the Structure:",
			EmeraldSubsequences[Structure[{Strand[DNA[10,"A"],DNA["ATCGATCGAT","B"]],Strand[DNA["ATGCAGGAC","C"],DNA["ATCGATCGAT","B"],RNA["GCUAUG","D"]]},{}],5],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]},"C"->{DNA["ATGCA"],DNA["TGCAG"],DNA["GCAGG"],DNA["CAGGA"],DNA["AGGAC"]},"D"->{RNA["GCUAU"],RNA["CUAUG"]}}
		],
		Example[
			{Basic,"Given a Structure, and a level 5, returns a list of rules for each subsequence of the Structure:"},
			EmeraldSubsequences[Structure[{Strand[DNA[10,"A"],DNA["ATCGATCGAT","B"]]},{}],5],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]}}
		],
		Example[
			{Basic,"Given a Structure, and a level 5, returns a list of rules for each subsequence of each unique motif in the set of strands of the Structure:"},
			EmeraldSubsequences[Structure[{Strand[DNA[20,"A"],DNA["ATCGATCGAT","B"],DNA[20,"C"]],Strand[DNA[20,"motif$4"],DNA[20,"C'"],DNA["ATCGATCGAT","B'"]]},{Bond[{1,2,1;;10},{2,3,1;;10}],Bond[{1,3},{2,2}]}],5],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]},"C"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"motif$4"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]}}
		],
		Example[
			{Options, Polymer, "Given a sequence that has a specified type, return a list of overlapping subsequences of length 2:"},
			EmeraldSubsequences["ATGATAGATAG",3, Polymer -> DNA],
			{"ATG","TGA","GAT","ATA","TAG","AGA","GAT","ATA","TAG"}
		],
		Example[
			{Options, MinLevel, "Specify the minimum level of subsequences to consider when deconstructing:"},
			EmeraldSubsequences[Structure[{Strand[DNA[10,"A"],DNA["ATCGATCGAT","B"]]},{}],5,MinLevel->2],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]}}
		],
		Example[
			{Options, Complete, "Given a Structure, and a level 5, returns a minimal set of rules for each subsequence of the Structure:"},
			EmeraldSubsequences[Structure[{Strand[DNA[10,"A"],DNA["ATCGATCGAT","B"]]},{}],5,Complete->False],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]}}
		],
		Example[
			{Options, Complete, "Given a Structure, and a level 5, returns a set of rules for each subsequence of the Structure including the reverse compliment subsequences:"},
			EmeraldSubsequences[Structure[{Strand[DNA[10,"A"],DNA["ATCGATCGAT","B"]]},{}],5,Complete->True],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]},"A'"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B'"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]}}
		],
		Example[
			{Options, ExplicitlyTyped, "Given a DNA Structure, and a level 5, returns a list of rules for each subsequence of the Structure:"},
			EmeraldSubsequences[{Strand[DNA[10,"A"],DNA["ATCGATCGAT","B"]],Strand[DNA["ATGCAGGAC","C"],DNA["ATCGATCGAT","B"],RNA["GCUAUG","D"]]},5,ExplicitlyTyped->True],
			{"A"->{DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"],DNA["NNNNN"]},"B"->{DNA["ATCGA"],DNA["TCGAT"],DNA["CGATC"],DNA["GATCG"],DNA["ATCGA"],DNA["TCGAT"]},"C"->{DNA["ATGCA"],DNA["TGCAG"],DNA["GCAGG"],DNA["CAGGA"],DNA["AGGAC"]},"D"->{RNA["GCUAU"],RNA["CUAUG"]}}
		],
		Example[
			{Options,CanonicalPairing,"With CanonicalPairing off, subsequences will leave the subsequences in the alphabets of their source polymers:"},
			EmeraldSubsequences["AUGUCUAUGUAGU",3,CanonicalPairing->False],
			{"AUG","UGU","GUC","UCU","CUA","UAU","AUG","UGU","GUA","UAG","AGU"}
		],
		Example[
			{Options,CanonicalPairing,"With CanonicalPairing on, all of the subsequences will be transformed into DNA sequences using ToDNA:"},
			EmeraldSubsequences["AUGUCUAUGUAGU",3,CanonicalPairing->True],
			{"ATG","TGT","GTC","TCT","CTA","TAT","ATG","TGT","GTA","TAG","AGT"}
		],
		Example[
			{Options,CanonicalPairing,"This option works with Strand and Structure subsequence calls as well:"},
			EmeraldSubsequences[Strand[RNA["AUGUCUAUGUAGU","A"],DNA["ATGAGA","B"]],3,CanonicalPairing->True],
			{"A"->{DNA["ATG"],DNA["TGT"],DNA["GTC"],DNA["TCT"],DNA["CTA"],DNA["TAT"],DNA["ATG"],DNA["TGT"],DNA["GTA"],DNA["TAG"],DNA["AGT"]},"B"->{DNA["ATG"],DNA["TGA"],DNA["GAG"],DNA["AGA"]}}
		],
		Test["Simple strand with rev comp motif, Complete->False:",
			EmeraldSubsequences[Strand[DNA[8,"A"],DNA[8,"A'"]],3,ExplicitlyTyped->False,Complete->False],
			{"A"->{"NNN","NNN","NNN","NNN","NNN","NNN"}}
		],
		Test["Simple strand with rev comp motif, Complete->True:",
			EmeraldSubsequences[Strand[DNA[8,"A"],DNA[8,"A'"]],3,ExplicitlyTyped->False,Complete->True],
			{"A"->{"NNN","NNN","NNN","NNN","NNN","NNN"},"A'"->{"NNN","NNN","NNN","NNN","NNN","NNN"}}
		]

}];


(* ::Subsubsection::Closed:: *)
(*buildSequence*)


DefineTests[
	buildSequence,
	{
		Test[
			"Builds a complete sequence from multiple overlapping inputs:",
			buildSequence[{"ATGA","TGAT","GATA"}],
			"ATGATA"
		],
		Test[
			"Concatenates single bases to build a complete inputs:",
			buildSequence[{"A","T","G","A","T","A"}],
			"ATGATA"
		],
		Test[
			"Uses overlapping dimers to construct a complete sequence:",
			buildSequence[{"AT","TG","GA","AT","TA"}],
			"ATGATA"
		],
		Test[
			"Uses overlapping amino acids to build a complete sequence:",
			buildSequence[{"ArgArg","ArgLys","LysHis","HisLys","LysArg","ArgHis"}],
			"ArgArgLysHisLysArgHis"
		],
		Test[
			"Can handle multiple lists of dimers and concatenates each list individually:",
			buildSequence[{{"AT","TT","TG","GA","AT","TA","AG"},{"AU","UG","GU","UC","CU","UA","AU","UG","GU"},{"AT","TG","GA","AG"},{"AU","UG","GU","UG","GU","UG"}}],
			{"ATTGATAG","AUGUCUAUGU","ATGAG","AUGUGUG"}
		],
		Test[
			"The function can handle differently wrapped elements in the list input:",
			buildSequence[{"ACGC","CGCG","GCGA",DNA["CGAA"],"GAAC","AACG","ACGA","CGAA","GAAC","AACC","ACCA","CCAC","CACA","ACAG"}],
			"ACGCGAACGAACCACAG"
		],
		Test[
			"The function can output explicity wrapped sequences:",
			buildSequence[{"ACGC","CGCG","GCGA",DNA["CGAA"],"GAAC","AACG","ACGA","CGAA","GAAC","AACC","ACCA","CCAC","CACA","ACAG"},ExplicitlyTyped->True],
			DNA["ACGCGAACGAACCACAG"]
		],
		Test[
			"The function can concatenate sequences that are all wrapped the same way:",
			buildSequence[{DNA["ACGC"],DNA["CGCG"],DNA["GCGA"],DNA["CGAA"],DNA["GAAC"],DNA["AACG"],DNA["ACGA"],DNA["CGAA"],DNA["GAAC"],DNA["AACC"],DNA["ACCA"],DNA["CCAC"],DNA["CACA"],DNA["ACAG"]}],
			DNA["ACGCGAACGAACCACAG"]
		],
		Test[
			"The function can output sequences in a specific language:",
			buildSequence[{"ACGC","CGCG","GCGA","CGAA","GAAC","AACG","ACGA","CGAA","GAAC","AACC","ACCA","CCAC","CACA","ACAG"},Polymer->RNA,ExplicitlyTyped->True],
			RNA["ACGCGAACGAACCACAG"]
		],
		Test[
			"The function will concatenate extremeley long lists of single bases:",
			buildSequence[{"A","C","G","C","G","A","A","C","G","A","A","C","C","A","C","A","G"}],
			"ACGCGAACGAACCACAG"
		],
		Test[
			"The function will handle elements that wrapped vs. those that are unwrapped:",
			buildSequence[{"A","C","G","C","G",RNA["A"],"A","C","G","A","A","C","C","A","C","A","G"},Polymer->RNA],
			"ACGCGAACGAACCACAG"
		],
		Test[
			"The function will output in a specified language:",
			buildSequence[{"A","C","G","C","G",RNA["A"],"A","C","G","A","A","C","C","A","C","A","G"},ExplicitlyTyped->False,Polymer->RNA],
			"ACGCGAACGAACCACAG"
		],
		Test[
			"The function will handle output in a specified language II:",
			buildSequence[{"A","C","G","C","G",DNA["A"],"A","C","G","A","A","C","C","A","C","A","G"},ExplicitlyTyped->True],
			DNA["ACGCGAACGAACCACAG"]
		],
		Test[
			"The function will handle output in a specified language III:",
			buildSequence[{"A","C","G","C","G",RNA["A"],"A","C","G","A","A","C","C","A","C","A","G"},ExplicitlyTyped->True,Polymer->RNA],
			RNA["ACGCGAACGAACCACAG"]
		],
		Example[
			{Basic, "The function will concatenate overlapping sequences to construct a total sequence:"},
			buildSequence[{"ATGA","TGAT","GATA"}],
			"ATGATA"
		],
		Example[
			{Basic, "The function will concatenate single letters to construct a sequence:"},
			buildSequence[{"A","G","T","A"}],
			"AGTA"
		],
		Example[
			{Basic, "The function will overlap dimers appropriately:"},
			buildSequence[{"AT","TG","GA","AT","TA"}],
			"ATGATA"
		],
		Example[
			{Options, Polymer, "The function will return output in a desired language:"},
			buildSequence[{"ACGC","CGCG","GCGA","CGAA","GAAC","AACG","ACGA","CGAA","GAAC","AACC","ACCA","CCAC","CACA","ACAG"},Polymer->RNA,ExplicitlyTyped->True],
			RNA["ACGCGAACGAACCACAG"]
		],
		Example[
			{Options, ExplicitlyTyped, "The function will wrap the output in the language type if set to true:"},
			buildSequence[{"ACGC","CGCG","GCGA",DNA["CGAA"],"GAAC","AACG","ACGA","CGAA","GAAC","AACC","ACCA","CCAC","CACA","ACAG"}, ExplicitlyTyped-> True],
			DNA["ACGCGAACGAACCACAG"]
		],
		Example[
			{Messages, "NonOverlapping", "The sequences provided do not overlap, so nothing is returned and a message is thrown:"},
			buildSequence[{"ATGA","TGAT","GCTA"}],
			Null,
			Messages :> buildSequence::NonOverlapping
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*subsequencesQ*)


DefineTests[
	subsequencesQ,
	{
		Test[
			"Returns false if the provided protein sequences do not all overlap by an offset of one:",
			subsequencesQ[{"ValArgAsn","LysAsnArg","AsnArgTrp"}],
			False
		],
		Test[
			"Returns false if the provided DNA sequences do not all overlap by an offset of one:",
			subsequencesQ[{"ATGCAG","TGATGC","CAGCAG"}],
			False
		],
		Test[
			"Returns false if the intput consists of members that are not valid polymers:",
			subsequencesQ[{"Fish","TC","CG"}],
			False
		],
		Test[
			"Returns false when the provided sequences are of different types:",
			!subsequencesQ[{"AGCA","GCAG",RNA["CAGC"],"AGCG","GCGG","CGGC","GGCG","GCGA","CGAG","GAGC","AGCT","GCGA"}, Polymer->RNA],
			True
		],
		Example[
			{Basic, "Returns true if the provided sequences are overlapping by an offset of one and are of the same type:"},
			subsequencesQ[{"AGCA","GCAG",RNA["CAGC"],"AGCG","GCGG","CGGC","GGCG","GCGA","CGAG","GAGC","AGCG","GCGA"},Polymer->RNA],
			True
		],
		Example[
			{Basic,"Check if the provided protein sequences are overlapping by an offset of one:"},
			subsequencesQ[{"ValArgAsn","ArgAsnArg","AsnArgTrp"}],
			True
		],
		Example[
			{Options, Polymer,"Returns true if the provided sequences are overlapping by an offset of one and are of the type specified by the option polymer:"},
			subsequencesQ[{"UGCA","GCAG","CAGC","AGCG","GCGG","CGGC","GGCG","GCGA","CGAG","GAGC","AGCG","GCGU"}, Polymer -> RNA],
			True
		],
		Example[
			{Options, Degeneracy, "If set to true, degnerate monomers are considered valid and will attempt to be included:"},
			subsequencesQ[{"AGNN","GNNN","NNNN",RNA["NNNN"],"NNNC","NNCG","NCGA","CGAG","GAGC","AGCG","GCGA"}, Degeneracy -> True,Polymer->RNA],
			True
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*NextSubsequences*)


DefineTests[
	NextSubsequences,
	{
		Test[
			"Checks that the next subsequences for AA are provided correctly:",
			NextSubsequences["AA"],
			{"AA","AG","AT","AC"}
		],
		Test[
			"Checks that subsequences are returned in the correct language:",
			NextSubsequences[DNA["ATGCATGA"]],
			{DNA["TGCATGAA"],DNA["TGCATGAG"],DNA["TGCATGAT"],DNA["TGCATGAC"]}
		],
		Test[
			"Checks that subsequences of amino acids are returned as amino acids:",
			NextSubsequences["LysArgArg"],
			{"ArgArgAla","ArgArgGlu","ArgArgLeu","ArgArgSer","ArgArgArg","ArgArgGln","ArgArgLys","ArgArgThr","ArgArgAsn","ArgArgGly","ArgArgMet","ArgArgTrp","ArgArgAsp","ArgArgHis","ArgArgPhe","ArgArgTyr","ArgArgCys","ArgArgIle","ArgArgPro","ArgArgVal","ArgArgPyl"}
		],
		Test[
			"Checks that possibilities can be produced for generic DNA:",
			NextSubsequences[DNA[4]],
			{DNA["NNNA"],DNA["NNNG"],DNA["NNNT"],DNA["NNNC"]}
		],
		Test[
			"Checks that the exclusion options works as desired:",
			NextSubsequences["AA",Exclude->{"AA","AG"}],
			{"AT","AC"}
		],
		Test[
			"Checks that next subsequences can be generated for lists, i.e. that the function is listable:",
			NextSubsequences[{"AA","TT","GC"}],
			{{"AA","AG","AT","AC"},{"TA","TG","TT","TC"},{"CA","CG","CT","CC"}}
		],
		Test[
			"Checks that the function appropriately handles non-nucleic acid input:",
			NextSubsequences["FISH"],
			_NextSubsequences
		],
		Test[
			"Checks that the function can handle an additional list input:",
			NextSubsequences["ATGC",{"TGCA","TGCT","GCGC","AGAC"}],
			{"TGCA","TGCT"}
		],
		Test[
			"Checks that the function can handle the explicity typed option:",
			NextSubsequences["ATGC",{"TGCA","TGCT","GCGC","AGAC"},ExplicitlyTyped->True],
			{DNA["TGCA"],DNA["TGCT"]}
		],
		Test[
			"Checks that the function is appropriatelhy listable for different lengths of sequences:",
			NextSubsequences[{"ATGCA","GCA","AAGAGA"}],
			{{"TGCAA","TGCAG","TGCAT","TGCAC"},{"CAA","CAG","CAT","CAC"},{"AGAGAA","AGAGAG","AGAGAT","AGAGAC"}}
		],
		Test[
			"Checks that the function appropriately produces an empty list:",
			NextSubsequences["ATGC",{"GCGC","AGAC"}],
			{}
		],
		Test[
			"Checks that the function is listable with lists of lists:",
			NextSubsequences[{"ATGC","AGCG"},{"TGCA","TGCT","GCGC","AGAC"}],
			{{"TGCA","TGCT"},{"GCGC"}}
		],
		Test[
			"Checks that the function can handle an empty list input:",
			NextSubsequences["CGA",{}],
			{}
		],
		Test[
			"Checks that the function can handle a list of lists mapped to an empty list:",
			NextSubsequences[RandomSequence[5,3],{}],
			{{},{},{}}
		],
		Test[
			"Checks that a function can handle different lengths of input:",
			NextSubsequences["TGC",{"TGCA","TGCT","GCGC","AGAC"}],
			{"TGCA","TGCT"}
		],
		Test[
			"Checks that a function can handle different lengths of input in a different order:",
			NextSubsequences["ATA",AllSequences[4]],
			{"ATAA","ATAG","ATAT","ATAC"}
		],
		Test[
			"Checks that true if the function can handle the removeList option appropriately:",
			NextSubsequences[PNA["A"],removeList[AllSequences[2],{"AG","GT","TC","CT","TA"}],Polymer->PNA],
			{PNA["AA"],PNA["AT"],PNA["AC"]}
		],
		Example[
			{Basic,"Lists all subsequences that could appear after ATN in a larger sequence:"},
			NextSubsequences["ATN",AllSequences[3]],
			{}
		],
		Example[
			{Basic,"Lists all possible subsequences that could appear after a given sequence of amino acids:"},
			NextSubsequences["LysArgArg"],
			{"ArgArgAla","ArgArgGlu","ArgArgLeu","ArgArgSer","ArgArgArg","ArgArgGln","ArgArgLys","ArgArgThr","ArgArgAsn","ArgArgGly","ArgArgMet","ArgArgTrp","ArgArgAsp","ArgArgHis","ArgArgPhe","ArgArgTyr","ArgArgCys","ArgArgIle","ArgArgPro","ArgArgVal","ArgArgPyl"}
		],
		Example[
			{Basic, "Lists subsequences that could appear after the given subsequence in a larger sequence:"},
			NextSubsequences["TGC",{"TGCA","TGCT","GCGC","AGAC"}],
			{"TGCA","TGCT"}
		],
		Example[
			{Options, Polymer, "Specify the potential alphabet a valid sequence should be composed of:"},
			NextSubsequences[PNA["A"],removeList[AllSequences[2],{"AG","GT","TC","CT","TA"}],Polymer->PNA],
			{PNA["AA"],PNA["AT"],PNA["AC"]}
		],
		Example[
			{Options, ExplicitlyTyped, "If true, wrap the Monomers in their polymer type:"},
			NextSubsequences["ATGC",{"TGCA","TGCT","GCGC","AGAC"},ExplicitlyTyped->True],
			{DNA["TGCA"],DNA["TGCT"]}
		],
		Example[
			{Options, Exclude, "Provide a list of sequences that will not be included in the output:"},
			NextSubsequences["AA",Exclude->{"AA","AG"}],
			{"AT","AC"}
		],
		Example[
			{Options, Degeneracy, "If true, will accept subsequences that could in any of their possible incarnations, match. Otherwise, it must be an exact match:"},
			NextSubsequences["ATN",AllSequences[3],Degeneracy->True],
			{"TAA","TAG","TAT","TAC","TGA","TGG","TGT","TGC","TTA","TTG","TTT","TTC","TCA","TCG","TCT","TCC"}
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*nextSubsequencesQ*)


DefineTests[
	nextSubsequencesQ,
	{
		Test[
			"Returns true if the second argument is a valid next subsequence of the first argument:",
			nextSubsequencesQ["ATGCA","TGCAT"],
			True
		],
		Test[
			"Returns true if the second argument is not a valid next subsequence of the first:",
			!nextSubsequencesQ["ATGCA","TGGAT"],
			True
		],
		Test[
			"Determines that the function can handle wrapped input:",
			nextSubsequencesQ["ATGCA",DNA["TGCAT"]],
			True
		],
		Test[
			"Determines that the function can handle wrapped input for all inputs:",
			nextSubsequencesQ[DNA["ATGCA"],DNA["TGCAT"]],
			True
		],
		Test[
			"Determines that the function can take differently wrapped inputs and compare them:",
			!nextSubsequencesQ[DNA["ATGCA"],PNA["TGCAT"]],
			True
		],
		Test[
			"Determines that the function can handle single letter inputs:",
			nextSubsequencesQ["A","T"],
			True
		],
		Test[
			"Returns true if the arguments provided cannot follow each other:",
			!nextSubsequencesQ["G","AT"],
			True
		],
		Test[
			"Determines that the function can handle different lengths of subsequences:",
			nextSubsequencesQ["AC","ACG"],
			True
		],
		Test[
			"Determines that the function can handle different lengths of subsequences II:",
			nextSubsequencesQ["ACG","ACGT"],
			True
		],
		Test[
			"Determines that the function can handle different lengths wrapped differently:",
			nextSubsequencesQ["ACG",DNA["ACGT"]],
			True
		],
		Example[
			{Basic,"The function will return true if the subsequence is appropriate, regardless of length:"},
			nextSubsequencesQ["TN","TCA"],
			False
		],
		Example[
			{Basic,"The function will return true if the subsequences can follow each other:"},
			nextSubsequencesQ["A","T"],
			True
		],
		Example[
			{Basic,"The function will return true if the subsequence is appropriate, regardless of length:"},
			!nextSubsequencesQ["G","AT"],
			True
		],
		Example[
			{Options, Degeneracy,"The function will return true because this is an appropriate following subsequence in some incarnation:"},
			nextSubsequencesQ["ATNA","TCNG",Degeneracy->True],
			True
		],
		Example[
			{Options, Polymer, "The function will compare inputs in the specified language:"},
			nextSubsequencesQ["AC","ACG", Polymer-> DNA],
			True
		],
		Example[
			{Attributes, Listable, "The function can handle lists as input:"},
			nextSubsequencesQ[{"ATGCA","TGCAT"},{"ATCGA","ACTGA"}],
			{False, False}
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*previousSubsequences*)


DefineTests[
	previousSubsequences,
	{
		Test[
			"Checks that the correct subsequneces are returned:",
			previousSubsequences["ATGCAT"],
			{"AATGCA","GATGCA","TATGCA","CATGCA"}
		],
		Test[
			"Checks that the subsequences in the correct language are returned:",
			previousSubsequences[DNA["ATG"]],
			{DNA["AAT"],DNA["GAT"],DNA["TAT"],DNA["CAT"]}
		],
		Test[
			"Checks that generic sequences of DNA can be handled:",
			previousSubsequences[DNA[5]],
			{DNA["ANNNN"],DNA["GNNNN"],DNA["TNNNN"],DNA["CNNNN"]}
		],
		Test[
			"Checks that amino acid inputs yield amino acid outputs:",
			previousSubsequences["LysArgArg"],
			{"AlaLysArg","GluLysArg","LeuLysArg","SerLysArg","ArgLysArg","GlnLysArg","LysLysArg","ThrLysArg","AsnLysArg","GlyLysArg","MetLysArg","TrpLysArg","AspLysArg","HisLysArg","PheLysArg","TyrLysArg","CysLysArg","IleLysArg","ProLysArg","ValLysArg","PylLysArg"}
		],
		Test[
			"Checks that the polymer options works:",
			previousSubsequences["ACAC",Polymer->RNA],
			{"AACA","GACA","UACA","CACA"}
		],
		Test[
			"Checks that the function can handle a list of mixed languages:",
			previousSubsequences[{"AGCAU","ATGA","LysArg"}],
			{{"AAGCA","GAGCA","UAGCA","CAGCA"},{"AATG","GATG","TATG","CATG"},{"AlaLys","GluLys","LeuLys","SerLys","ArgLys","GlnLys","LysLys","ThrLys","AsnLys","GlyLys","MetLys","TrpLys","AspLys","HisLys","PheLys","TyrLys","CysLys","IleLys","ProLys","ValLys","PylLys"}}
		],
		Test[
			"Checks that the function appropriately handles non-nucleic acid input:",
			previousSubsequences["Fish"],
			_previousSubsequences
		],
		Test[
			"Checks taht the function returns nothing if any of the inputs are not nucleic acids:",
			previousSubsequences["FISH",DNA["AATGC"]],
			_previousSubsequences
		],
		Test[
			"Checks that the function can take a list as input:",
			previousSubsequences["ATGC",{"CATG","GATG","GCAA","AACT"}],
			{"CATG","GATG"}
		],
		Test[
			"Checks that the function can take a list of lists as input:",
			previousSubsequences[{"ATGC","CAAG"},{"CATG","GATG","GCAA","AACT"}],
			{{"CATG","GATG"},{"GCAA"}}
		],
		Test[
			"Checks that the function's ExplicityTyped option works as desired:",
			previousSubsequences["ATGC",{"CATG","GATG","GCAA","AACT"},ExplicitlyTyped->True],
			{DNA["CATG"],DNA["GATG"]}
		],
		Test[
			"Checks that the function can handle different types of input within one list:",
			previousSubsequences["ATGC",{"CATG",DNA["GATG"],"GCAA",DNA["AACT"]}],
			{"CATG","GATG"}
		],
		Test[
			"Checks that the function can handle different types of input in all places:",
			previousSubsequences[DNA["ATGC"],{"CATG",DNA["GATG"],"GCAA",DNA["AACT"]}],
			{DNA["CATG"],DNA["GATG"]}
		],
		Test[
			"Checks that the function can handle an mpety list and can return empty lists when necessarY:",
			previousSubsequences["CGA",{}],
			{}
		],
		Test[
			"Checks that the function can handle of list of empty lists:",
			previousSubsequences[RandomSequence[5,3],{}],
			{{},{},{}}
		],
		Test[
			"Checks that a function can return subsequences of different sizes from the input:",
			previousSubsequences["ATA",AllSequences[4]],
			{"AATA","GATA","TATA","CATA"}
		],
		Test[
			"Checks that size of the subsequences inputted is irrelevant:",
			previousSubsequences["ATG",{"CATG","GATG","GCAA","AACT"}],
			{"CATG","GATG"}
		],
		Example[
			{Basic,"Possible subsequences are returned, assuming the same wrapping for all of them:"},
			previousSubsequences[DNA["ATGC"],{"CATG",DNA["GATG"],"GCAA",DNA["AACT"]}],
			{DNA["CATG"],DNA["GATG"]}
		],
		Example[
			{Basic,"All subsequences will be returned:"},
			previousSubsequences["ATA",AllSequences[4]],
			{"AATA","GATA","TATA","CATA"}
		],
		Example[
			{Basic, "Sub sequences of different sizes can be handled as input:"},
			previousSubsequences["ATG",{"CATG","GATG","GCAA","AACT"}],
			{"CATG","GATG"}
		],
		Example[
			{Options, Polymer, "Specify the potential alphabet a valid sequence should be composed of:"},
			previousSubsequences[PNA["A"],removeList[AllSequences[2],{"AG","GT","TC","CT","TA"}],Polymer->PNA],
			{PNA["AA"],PNA["GA"],PNA["CA"]}
		],
		Example[
			{Options, ExplicitlyTyped, "If true, wrap the Monomers in their polymer type:"},
			previousSubsequences["ATGC",{"TGCA","TGCT","GCGC","AGAC"},ExplicitlyTyped->True],
			{}
		],
		Example[
			{Options, Exclude, "Provide a list of sequences that will not be included in the output:"},
			previousSubsequences["AA",Exclude->{"AA","AG"}],
			{"GA","TA", "CA"}
		],
		Example[
			{Options, Degeneracy, "If true, will accept subsequences that could in any of their possible incarnations, match. Otherwise, it must be an exact match:"},
			previousSubsequences["ATN",AllSequences[3],Degeneracy->True],
			{"AAT","GAT","TAT","CAT"}
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*previousSubsequencesQ*)


DefineTests[
	previousSubsequencesQ,
	{
		Test[
			"Returns true if the second argument is an appropriate previous subsequence for the first:",
			previousSubsequencesQ["ATGCA","AATGC"],
			True
		],
		Test[
			"Returns true if the arguments are appropriate, regardless of wrapping:",
			previousSubsequencesQ["ATGCA",DNA["AATGC"]],
			True
		],
		Test[
			"Retursn true if the arguments are appropriate, regardless of wrapping II:",
			previousSubsequencesQ[DNA["ATGCA"],"AATGC"],
			True
		],
		Test[
			"Returns true if the arguments are appropriate and are wrapped the same way:",
			previousSubsequencesQ[DNA["ATGCA"],DNA["AATGC"]],
			True
		],
		Test[
			"Returns true if the arguments are appropriate, even if they are wrapped differently:",
			!previousSubsequencesQ[DNA["ATGCA"],PNA["AATGC"]],
			True
		],
		Test[
			"Returns true if the arguments are not subsequences that follow each other:",
			!previousSubsequencesQ["ATGCA","GGCAT"],
			True
		],
		Test[
			"Returns true, even if the subsequences are of different sizes:",
			previousSubsequencesQ["ACG","GACG"],
			True
		],
		Test[
			"Returns true if the subsequences are of different sizes, even if they are wrapped differently:",
			previousSubsequencesQ["ACG",DNA["GACG"]],
			True
		],
		Test[
			"Returns true if the subsequences are of different sizes, even if they are wrapped differently II:",
			previousSubsequencesQ["AC",DNA["GAC"]],
			True
		],
		Test[
			"Returns true if the subsequences are of different sizes II:",
			previousSubsequencesQ["AC","GAC"],
			True
		],
		Example[
			{Basic,"The function will return false if the subsequences cannot follow each other:"},
			previousSubsequencesQ["ATGCA","AATGN"],
			False
		],
		Example[
			{Basic,"The function will return true if the subsequences can follow each other regardless of wrapping:"},
			previousSubsequencesQ["AC",DNA["GAC"]],
			True
		],
		Example[
			{Basic,"The function will return true because these cannot follow each other:"},
			!previousSubsequencesQ["ATGCA","GGCAT"],
			True
		],
		Example[
			{Options, Degeneracy,"The function will return false because the subsequence provided is not an exact match:"},
			previousSubsequencesQ["ATNCA","AATGC",Degeneracy->False],
			False
		],
		Example[
			{Options, Polymer, "The function will compare the given sequences in the desired language:"},
			previousSubsequencesQ["ATNCA","AATGC",Polymer->DNA],
			False
		],
		Example[
			{Attributes, Listable, "The function will compare lists appropriately:"},
			previousSubsequencesQ[{"ATGCA","TGCAT"},{"ATCGA","ACTGA"}],
			{False,False}
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*possibleSubsequences*)


DefineTests[
	possibleSubsequences,
		{
		Example[
			{Basic,"This will generate all possible subsequences using the provided string of base pairs:"},
			possibleSubsequences["TGNC"],
			{"TGAC","TGCC","TGGC","TGTC"}
		],
		Test[
			"Tests that the function can generate the subsequences:",
			possibleSubsequences[DNA["TGNC"]],
			{DNA["TGAC"],DNA["TGCC"],DNA["TGGC"],DNA["TGTC"]}
		],
		Example[
			{Options, Previous,"This will generate all generic subsequences, given a previous value:"},
			possibleSubsequences["NNNN",AllSequences[4],Previous->"ATGC"],
			{"TGCA","TGCC","TGCG","TGCT"}
		],
		Test[
			"Tests that previous and next work:",
			possibleSubsequences["NNNN",Previous->DNA["ATGC"],Next->"NNCT"],
			{"TGCC"}
		],
		Test[
			"Tests that previous and next work again:",
			possibleSubsequences["NNNN",Previous->DNA["ATGC"],Next->DNA["NNCT"]],
			{"TGCC"}
		],
		Example[
			{Basic,"This generates all possible subsequences of the given sequence, using N to mark generics:"},
			possibleSubsequences["ACNN",AllSequences[4]],
			{"ACAA","ACAC","ACAG","ACAT","ACCA","ACCC","ACCG","ACCT","ACGA","ACGC","ACGG","ACGT","ACTA","ACTC","ACTG","ACTT"}
		],
		Example[
			{Basic,"Given a monomer, the function will return that monomer:"},
			possibleSubsequences["A"],
			{"A"}
		],
		Example[
			{Options, Next,"The function can use a given next sequence to generate the desired set of subsequences:"},
			possibleSubsequences["NNNN",AllSequences[4],Next->"ATGC"],
			{"AATG","CATG","GATG","TATG"}
		],
		Test[
			"This tests that the generic subsequence works:",
			possibleSubsequences["NNNN",AllSequences[4],Previous->"TGNA",Next->"NNNN",ExplicitlyTyped->True],
			{DNA["GAAA"],DNA["GAAC"],DNA["GAAG"],DNA["GAAT"],DNA["GCAA"],DNA["GCAC"],DNA["GCAG"],DNA["GCAT"],DNA["GGAA"],DNA["GGAC"],DNA["GGAG"],DNA["GGAT"],DNA["GTAA"],DNA["GTAC"],DNA["GTAG"],DNA["GTAT"]}
		],
		Example[
			{Options, Exclude, "This will exclude specific sequences from the output:"},
			possibleSubsequences["NN",Exclude-> {"AA","CA"}],
			{"AC","AG","AT","CC","CG","CT","GA","GC","GG","GT","TA","TC","TG","TT"}
		],
		Example[
			{Options, ExplicitlyTyped, "This will list out the explicit wrapping if set to true:"},
			possibleSubsequences["NNNN",Previous->DNA["ATGC"],Next->DNA["NNCT"], ExplicitlyTyped-> True],
			{DNA["TGCC"]}
		],
		Example[
			{Options, Polymer, "The function can compute in the desired language:"},
			possibleSubsequences["TGNC", Polymer-> DNA],
			{"TGAC","TGCC","TGGC","TGTC"}
		]
	}
];


(* ::Subsubsection::Closed:: *)
(*junctions*)


DefineTests[
	junctions,
		{
		Example[
			{Basic,"This generates a list of the neighboring motifs:"},
			junctions[{Strand[DNA[20,"A"],DNA["ATCGATCGAT","B"],DNA[20,"C"]],Strand[DNA[20,"motif$4"],DNA[20,"C'"],DNA["ATCGATCGAT","B'"]]}],
			{{"A","B"},{"B","C"},{"motif$4","C'"},{"C'","B'"}}
		],
		Example[
			{Basic,"This generates a list of neighoring motifs of a list of possibilities:"},
			junctions[Structure[{Strand[DNA[20,"A"],DNA["ATCGATCGAT","B"],DNA[20,"C"]]},{}]],
			{{"A","B"},{"B","C"}}
		],
		Example[
			{Basic,"This generates a list from a list of inputs:"},
			junctions[Strand[DNA[20,"A"],DNA["ATCGATCGAT","B"],DNA[20,"C"]]],
			{{"A","B"},{"B","C"}}
		],
		Example[
			{Basic,"This generates a list from a list of different types of inputs:"},
			junctions[{Structure[{Strand[DNA["ATCGATCG","cat"],DNA[3,"dog"],RNA["AUUUU","rat"]]},{}],Structure[{Strand[DNA["GCAGCA","A"],DNA[10,"B"],RNA["NCNANCN","C"]]},{}]}],
			{{"cat","dog"},{"dog","rat"},{"A","B"},{"B","C"}}
		]
	}
];


(* ::Subsection:: *)
(*Sequence Generation*)


(* ::Subsubsection:: *)
(*AllSequences*)


DefineTests[AllSequences,{
	Example[{Basic,"Given a length, all sequences will generate a list of every sequence of that length:"},
		AllSequences[2],
		{"AA","AG","AT","AC","GA","GG","GT","GC","TA","TG","TT","TC","CA","CG","CT","CC"}
	],
	Example[{Basic,"Lengths must be equal to or greater than one:"},
		AllSequences[1],
		{"A","G","T","C"}
	],
	Example[{Basic,"Lengths must be equal to or greater than one:"},
		AllSequences[3],
		{"AAA","AAG","AAT","AAC","AGA","AGG","AGT","AGC","ATA","ATG","ATT","ATC","ACA","ACG","ACT","ACC","GAA","GAG","GAT","GAC","GGA","GGG","GGT","GGC","GTA","GTG","GTT","GTC","GCA","GCG","GCT","GCC","TAA","TAG","TAT","TAC","TGA","TGG","TGT","TGC","TTA","TTG","TTT","TTC","TCA","TCG","TCT","TCC","CAA","CAG","CAT","CAC","CGA","CGG","CGT","CGC","CTA","CTG","CTT","CTC","CCA","CCG","CCT","CCC"}
	],
	Example[{Attributes,Listable,"Function is listable:"},
		AllSequences[{2,3}],
		{{"AA","AG","AT","AC","GA","GG","GT","GC","TA","TG","TT","TC","CA","CG","CT","CC"},{"AAA","AAG","AAT","AAC","AGA","AGG","AGT","AGC","ATA","ATG","ATT","ATC","ACA","ACG","ACT","ACC","GAA","GAG","GAT","GAC","GGA","GGG","GGT","GGC","GTA","GTG","GTT","GTC","GCA","GCG","GCT","GCC","TAA","TAG","TAT","TAC","TGA","TGG","TGT","TGC","TTA","TTG","TTT","TTC","TCA","TCG","TCT","TCC","CAA","CAG","CAT","CAC","CGA","CGG","CGT","CGC","CTA","CTG","CTT","CTC","CCA","CCG","CCT","CCC"}}
	],
	Example[{Options,Polymer,"Works on any known polymer type:"},
		AllSequences[3,Polymer->RNA],
		{"AAA","AAG","AAU","AAC","AGA","AGG","AGU","AGC","AUA","AUG","AUU","AUC","ACA","ACG","ACU","ACC","GAA","GAG","GAU","GAC","GGA","GGG","GGU","GGC","GUA","GUG","GUU","GUC","GCA","GCG","GCU","GCC","UAA","UAG","UAU","UAC","UGA","UGG","UGU","UGC","UUA","UUG","UUU","UUC","UCA","UCG","UCU","UCC","CAA","CAG","CAU","CAC","CGA","CGG","CGU","CGC","CUA","CUG","CUU","CUC","CCA","CCG","CCU","CCC"}
	],
	Example[{Options,Polymer,"Including Non-nucleic acids like peptides:"},
		AllSequences[2,Polymer->Peptide],
		{"AlaAla","AlaGlu","AlaLeu","AlaSer","AlaArg","AlaGln","AlaLys","AlaThr","AlaAsn","AlaGly","AlaMet","AlaTrp","AlaAsp","AlaHis","AlaPhe","AlaTyr","AlaCys","AlaIle","AlaPro","AlaVal","AlaPyl","GluAla","GluGlu","GluLeu","GluSer","GluArg","GluGln","GluLys","GluThr","GluAsn","GluGly","GluMet","GluTrp","GluAsp","GluHis","GluPhe","GluTyr","GluCys","GluIle","GluPro","GluVal","GluPyl","LeuAla","LeuGlu","LeuLeu","LeuSer","LeuArg","LeuGln","LeuLys","LeuThr","LeuAsn","LeuGly","LeuMet","LeuTrp","LeuAsp","LeuHis","LeuPhe","LeuTyr","LeuCys","LeuIle","LeuPro","LeuVal","LeuPyl","SerAla","SerGlu","SerLeu","SerSer","SerArg","SerGln","SerLys","SerThr","SerAsn","SerGly","SerMet","SerTrp","SerAsp","SerHis","SerPhe","SerTyr","SerCys","SerIle","SerPro","SerVal","SerPyl","ArgAla","ArgGlu","ArgLeu","ArgSer","ArgArg","ArgGln","ArgLys","ArgThr","ArgAsn","ArgGly","ArgMet","ArgTrp","ArgAsp","ArgHis","ArgPhe","ArgTyr","ArgCys","ArgIle","ArgPro","ArgVal","ArgPyl","GlnAla","GlnGlu","GlnLeu","GlnSer","GlnArg","GlnGln","GlnLys","GlnThr","GlnAsn","GlnGly","GlnMet","GlnTrp","GlnAsp","GlnHis","GlnPhe","GlnTyr","GlnCys","GlnIle","GlnPro","GlnVal","GlnPyl","LysAla","LysGlu","LysLeu","LysSer","LysArg","LysGln","LysLys","LysThr","LysAsn","LysGly","LysMet","LysTrp","LysAsp","LysHis","LysPhe","LysTyr","LysCys","LysIle","LysPro","LysVal","LysPyl","ThrAla","ThrGlu","ThrLeu","ThrSer","ThrArg","ThrGln","ThrLys","ThrThr","ThrAsn","ThrGly","ThrMet","ThrTrp","ThrAsp","ThrHis","ThrPhe","ThrTyr","ThrCys","ThrIle","ThrPro","ThrVal","ThrPyl","AsnAla","AsnGlu","AsnLeu","AsnSer","AsnArg","AsnGln","AsnLys","AsnThr","AsnAsn","AsnGly","AsnMet","AsnTrp","AsnAsp","AsnHis","AsnPhe","AsnTyr","AsnCys","AsnIle","AsnPro","AsnVal","AsnPyl","GlyAla","GlyGlu","GlyLeu","GlySer","GlyArg","GlyGln","GlyLys","GlyThr","GlyAsn","GlyGly","GlyMet","GlyTrp","GlyAsp","GlyHis","GlyPhe","GlyTyr","GlyCys","GlyIle","GlyPro","GlyVal","GlyPyl","MetAla","MetGlu","MetLeu","MetSer","MetArg","MetGln","MetLys","MetThr","MetAsn","MetGly","MetMet","MetTrp","MetAsp","MetHis","MetPhe","MetTyr","MetCys","MetIle","MetPro","MetVal","MetPyl","TrpAla","TrpGlu","TrpLeu","TrpSer","TrpArg","TrpGln","TrpLys","TrpThr","TrpAsn","TrpGly","TrpMet","TrpTrp","TrpAsp","TrpHis","TrpPhe","TrpTyr","TrpCys","TrpIle","TrpPro","TrpVal","TrpPyl","AspAla","AspGlu","AspLeu","AspSer","AspArg","AspGln","AspLys","AspThr","AspAsn","AspGly","AspMet","AspTrp","AspAsp","AspHis","AspPhe","AspTyr","AspCys","AspIle","AspPro","AspVal","AspPyl","HisAla","HisGlu","HisLeu","HisSer","HisArg","HisGln","HisLys","HisThr","HisAsn","HisGly","HisMet","HisTrp","HisAsp","HisHis","HisPhe","HisTyr","HisCys","HisIle","HisPro","HisVal","HisPyl","PheAla","PheGlu","PheLeu","PheSer","PheArg","PheGln","PheLys","PheThr","PheAsn","PheGly","PheMet","PheTrp","PheAsp","PheHis","PhePhe","PheTyr","PheCys","PheIle","PhePro","PheVal","PhePyl","TyrAla","TyrGlu","TyrLeu","TyrSer","TyrArg","TyrGln","TyrLys","TyrThr","TyrAsn","TyrGly","TyrMet","TyrTrp","TyrAsp","TyrHis","TyrPhe","TyrTyr","TyrCys","TyrIle","TyrPro","TyrVal","TyrPyl","CysAla","CysGlu","CysLeu","CysSer","CysArg","CysGln","CysLys","CysThr","CysAsn","CysGly","CysMet","CysTrp","CysAsp","CysHis","CysPhe","CysTyr","CysCys","CysIle","CysPro","CysVal","CysPyl","IleAla","IleGlu","IleLeu","IleSer","IleArg","IleGln","IleLys","IleThr","IleAsn","IleGly","IleMet","IleTrp","IleAsp","IleHis","IlePhe","IleTyr","IleCys","IleIle","IlePro","IleVal","IlePyl","ProAla","ProGlu","ProLeu","ProSer","ProArg","ProGln","ProLys","ProThr","ProAsn","ProGly","ProMet","ProTrp","ProAsp","ProHis","ProPhe","ProTyr","ProCys","ProIle","ProPro","ProVal","ProPyl","ValAla","ValGlu","ValLeu","ValSer","ValArg","ValGln","ValLys","ValThr","ValAsn","ValGly","ValMet","ValTrp","ValAsp","ValHis","ValPhe","ValTyr","ValCys","ValIle","ValPro","ValVal","ValPyl","PylAla","PylGlu","PylLeu","PylSer","PylArg","PylGln","PylLys","PylThr","PylAsn","PylGly","PylMet","PylTrp","PylAsp","PylHis","PylPhe","PylTyr","PylCys","PylIle","PylPro","PylVal","PylPyl"}
	],
	Example[{Options,Exclude,"Providng a list of excluded Monomers or subsequences will only generate sequences that do not contain these Monomers or subsequences:"},
		AllSequences[3,Exclude->{"A","CC"}],
		{"GGG","GGT","GGC","GTG","GTT","GTC","GCG","GCT","TGG","TGT","TGC","TTG","TTT","TTC","TCG","TCT","CGG","CGT","CGC","CTG","CTT","CTC"}
	],
	Example[{Options,ExplicitlyTyped,"Explicit typing can be requested though the ExplicitlyTyped option:"},
		AllSequences[2,Polymer->RNA,ExplicitlyTyped->True],
		{RNA["AA"],RNA["AG"],RNA["AU"],RNA["AC"],RNA["GA"],RNA["GG"],RNA["GU"],RNA["GC"],RNA["UA"],RNA["UG"],RNA["UU"],RNA["UC"],RNA["CA"],RNA["CG"],RNA["CU"],RNA["CC"]}
	],
	Example[{Attributes,"Listable","The function is listable by the length of the sequences:"},
		AllSequences[{1,2,3}],
		{{"A","G","T","C"},{"AA","AG","AT","AC","GA","GG","GT","GC","TA","TG","TT","TC","CA","CG","CT","CC"},{"AAA","AAG","AAT","AAC","AGA","AGG","AGT","AGC","ATA","ATG","ATT","ATC","ACA","ACG","ACT","ACC","GAA","GAG","GAT","GAC","GGA","GGG","GGT","GGC","GTA","GTG","GTT","GTC","GCA","GCG","GCT","GCC","TAA","TAG","TAT","TAC","TGA","TGG","TGT","TGC","TTA","TTG","TTT","TTC","TCA","TCG","TCT","TCC","CAA","CAG","CAT","CAC","CGA","CGG","CGT","CGC","CTA","CTG","CTT","CTC","CCA","CCG","CCT","CCC"}}
	],
	Example[{Messages,"TooMany","If too large a space of solutions is requested, the TooMany error will be thrown:"},
		AllSequences[100],
		Null,
		Messages:>{Message[AllSequences::TooMany,1606938044258990275541962092341162602522202993782792835301376,100000000]}
	],
	Example[{Issues,"Length zero returns an empty list:"},
		AllSequences[0,Polymer->RNA],
		{}
	],
	Test["Negative lengths remain unevaluated:",
		AllSequences[-3],
		_AllSequences
	],
	Test["Symbolic input remain unevaluated:",
		AllSequences[Fish],
		_AllSequences
	],
	Test["Bad options pass through default:",
		AllSequences[1,Polymer->Fish],
		{"A","G","T","C"},
		Messages:>{Warning::OptionPattern}
	],
	Test["Bad options pass through default:",
		AllSequences[1,ExplicitlyTyped->Fish],
		{"A","G","T","C"},
		Messages:>{Warning::OptionPattern}
	],
	Test["Bad options pass through default:",
		AllSequences[1,Exclude->Fish],
		{"A","G","T","C"},
		Messages:>{Warning::OptionPattern}
	]
}];


(* ::Subsubsection::Closed:: *)
(*RandomSequence*)


DefineTests[RandomSequence,{
	Test["Cannot make a sequence of negative length:",
		RandomSequence[-4],
		RandomSequence[-4]
	],
	Test["A 0 length sequence is an empty string:",
		RandomSequence[0],
		""
	],
	Example[{Basic,"Creates a random sequence of DNA with the desired length:"},
		RandomSequence[10],
		_?DNAQ
	],
	Example[{Basic,"Create 3 random sequences of DNA with the desired length:"},
		RandomSequence[10,3],
		{_?DNAQ,_?DNAQ,_?DNAQ}
	],
	Example[{Options,Polymer,"Designate the type of polymer of the sequence:"},
		RandomSequence[100,Polymer->RNA],
		_?RNAQ
	],
	Test["Check that the length is correct:",
		SequenceLength[RandomSequence[760]],
		760
	],
	Example[{Options,ExplicitlyTyped,"Return a typed sequence:"},
		RandomSequence[10,ExplicitlyTyped->True],
		_DNA
	],
	Example[{Options,Exclude,"Exclude a certain sequence from being generated:"},
		RandomSequence[10,Exclude->{"ATCGCGACGC"}],
		_?DNAQ
	],
	Example[{Attributes,Listable,"Create a list of different sized DNA sequences:"},
		RandomSequence[{3,6,10}],
		{_?DNAQ,_?DNAQ,_?DNAQ}
	]
}];


(* ::Subsubsection::Closed:: *)
(*AllPalindromes*)


DefineTests[AllPalindromes,{
	Example[{Basic,"The function is used to generate all palindromic sequences of a given length:"},
		AllPalindromes[2],
		{"AT","GC","TA","CG"}
	],
	Example[{Basic,"A palindrome is defined as a sequence this is its own reverse compliment:"},
		ReverseComplementSequenceQ[#,#]&/@AllPalindromes[2],
		{True,True,True,True}
	],
	Example[{Basic,"The number of Palindromes explodes expoentially with larger lengths:"},
		AllPalindromes[4],
		{"AATT","AGCT","ATAT","ACGT","GATC","GGCC","GTAC","GCGC","TATA","TGCA","TTAA","TCGA","CATG","CGCG","CTAG","CCGG"}
	],
	Example[{Issues,"In DNA and RNA, there is no self-Pairing monomer and thus there are no palindromes of odd length:"},
		AllPalindromes[5],
		{}
	],
	Example[{Attributes,Listable,"Function is listable:"},
		AllPalindromes[{2,4}],
		{{"AT","GC","TA","CG"},{"AATT","AGCT","ATAT","ACGT","GATC","GGCC","GTAC","GCGC","TATA","TGCA","TTAA","TCGA","CATG","CGCG","CTAG","CCGG"}}
	],
	Example[{Options,Polymer,"The polymer type can be provided using the Polymer options:"},
		AllPalindromes[4,Polymer->RNA],
		{"AAUU","AGCU","AUAU","ACGU","GAUC","GGCC","GUAC","GCGC","UAUA","UGCA","UUAA","UCGA","CAUG","CGCG","CUAG","CCGG"}
	],
	Example[{Options,ExplicitlyTyped,"Explicit typing of the output sequences can be requested:"},
		AllPalindromes[4,ExplicitlyTyped->True],
		{DNA["AATT"],DNA["AGCT"],DNA["ATAT"],DNA["ACGT"],DNA["GATC"],DNA["GGCC"],DNA["GTAC"],DNA["GCGC"],DNA["TATA"],DNA["TGCA"],DNA["TTAA"],DNA["TCGA"],DNA["CATG"],DNA["CGCG"],DNA["CTAG"],DNA["CCGG"]}
	],
	Example[{Options,Exclude,"Specific Monomers or subsequences can be provided that must be excluded from the palindromes:"},
		AllPalindromes[4,Exclude->{"A","CC"}],
		{"GCGC","CGCG"}
	],
	Example[{Messages,"TooMany","If too large a space of solutions is requested, the TooMany error will be thrown:"},
		AllPalindromes[100],
		Null,
		Messages:>{Message[AllPalindromes::TooMany,1267650600228229401496703205376,100000000]}
	],
	Example[{Attributes,"Listable","The function is listable by the length of the palindromes:"},
		AllPalindromes[Range[4]],
		{{},{"AT","GC","TA","CG"},{},{"AATT","AGCT","ATAT","ACGT","GATC","GGCC","GTAC","GCGC","TATA","TGCA","TTAA","TCGA","CATG","CGCG","CTAG","CCGG"}}
	],
	Test["Symbolic input remains unevaluated:",
		AllPalindromes[Fish],
		_AllPalindromes
	]
}];


(* ::Subsection:: *)
(*Dynamic Generation*)


(* ::Subsubsection::Closed:: *)
(*junctionSubsequences*)


DefineTests[
	junctionSubsequences,
		{
		Example[
			{Basic,"The subsequences at the junction sites are returned:"},
			junctionSubsequences[Structure[{Strand[DNA["ATCGATCG","cat"],DNA[10,"dog"],RNA["AUUUU","rat"]]},{}],4],
			{"TCGN","CGNN","GNNN","NNNA","NNAT","NATT"}
		],
		Example[
			{Basic,"The subsequences at the junction sites are returned:"},
			junctionSubsequences[Strand[DNA["ATGATACA","A"],DNA["GCAGCCAG","B"]],4],
			{"ACAG","CAGC","AGCA"}
		],
		Example[
			{Basic,"The function can handle sequences of various lengths:"},
			junctionSubsequences[Structure[{Strand[DNA["AACACCCGACGAAAAATTAC","A"],DNA["GTAGAGGCAG","B"],DNA["CGTGAGTCTCTTCAGTCAAA","C"]],Strand[DNA["TCTTACAGTTTTAAGCCGCG","D'"],DNA["TTTGACTGAAGAGACTCACG","C'"],DNA["CTGCCTCTAC","B'"]]},{Bond[{1,2,1;;10},{2,3,1;;10}],Bond[{1,3},{2,2}]}],3],
			{"ACG","CGT","AGC","GCG","CGT","GTT","CGC","GCT"}
		],
		Example[
			{Basic,"Structures are treated as reverse listable by junctionSubsequences:"},
			junctionSubsequences[{Strand[DNA["ATGATACA","A"],DNA["GCAGCCAG","B"]],Strand[DNA["AGCCACAC","C"],RNA["AUGUCUAUG","D"]]},4],
			{"ACAG","CAGC","AGCA","CACA","ACAT","CATG"}
		],
		Example[
			{Options, ExplicitlyTyped,"If explicitly typed function is set to false, the function will output regularly. If true, all output will be wrapped:"},
			junctionSubsequences[Structure[{Strand[DNA["ATGATACA","A"],DNA["GCAGCCAG","B"]],Strand[DNA["AGCCACAC","C"],RNA["AUGUCUAUG","D"]]},{}],4, ExplicitlyTyped -> False],
			{"ACAG","CAGC","AGCA","CACA","ACAT","CATG"}
		],
		Example[
			{Options,CanonicalPairing,"Structures are treated as reverse listable by junctionSubsequences. Canonical pairing option wraps each output as DNA:"},
			junctionSubsequences[{Structure[{Strand[DNA["ATGATACA","A"],DNA["GCAGCCAG","B"]],Strand[DNA["AGCCACAC","C"],RNA["AUGUCUAUG","D"]]},{}],Structure[{Strand[DNA[10,"Z"],RNA["AUGUCUA","Q"]]},{}]},4, CanonicalPairing-> True],
			{"ACAG","CAGC","AGCA","CACA","ACAT","CATG","NNNA","NNAT","NATG"}
		]
	}
];


(* ::Subsubsection:: *)
(*GenerateSequence*)


DefineTests[
	GenerateSequence,
		{
		Test[
			"Tests that the function works:",
			GenerateSequence[Structure[{Strand[DNA[20,"A"],DNA[10,"B"],DNA[20,"C"]],Strand[DNA[20,"D'"],DNA[20,"C'"],DNA[10,"B'"]]},{Bond[{1,2,1;;10},{2,3,1;;10}],Bond[{1,3},{2,2}]}],5],
			_?StructureQ
		],
		Example[
			{Basic,"The function will output a sequence, given certain parameters:"},
			GenerateSequence[Structure[{Strand[DNA[20,"A"],DNA[10,"B"],DNA[20,"C"]],Strand[DNA[20,"D'"],DNA[20,"C'"],DNA[10,"B'"]]},{Bond[{1,2,1;;10},{2,3,1;;10}],Bond[{1,3},{2,2}]}],5],
			_?StructureQ
		],
		Example[
			{Basic,"The function will output a sequence, given parameters and specific sequences:"},
			GenerateSequence[Structure[{Strand[DNA[20,"A"],DNA["ATCGATCGAT","B"],DNA[20,"C"]],Strand[DNA[20,"D'"],DNA[20,"C'"],DNA["ATCGATCGAT","B'"]]},{Bond[{1,2,1;;10},{2,3,1;;10}],Bond[{1,3},{2,2}]}],5],
			_?StructureQ
		],
		Example[
			{Basic,"The function will output a sequence, given a monomer input:"},
			GenerateSequence[Strand[DNA[20,"A"]]],
			_?StrandQ
		],
		Example[
			{Basic,"The function will generate the desired sequence, given monomers:"},
			GenerateSequence[DNA[20,"A"]],
			_?SequenceQ
		],
		Example[
			{Basic,"The function can generate a random strand of DNA:"},
			GenerateSequence[Strand[DNA[20]]],
			_?StrandQ
		],
		Example[
			{Options, Verbose,"The function can output its progress:"},
			GenerateSequence["NNNNNNNNNNN", Verbose -> True],
			_?SequenceQ
		],
		Example[
			{Options, ExplicitlyTyped,"The sequence can be generated with its specific wrapping:"},
			GenerateSequence[DNA[20],ExplicitlyTyped->False],
			_?SequenceQ
		],
		Example[
			{Options, Polymer,"The function can work in the desired language:"},
			GenerateSequence[25,Polymer->PNA],
			_?SequenceQ
		],
		Example[
			{Options, Exclude,"The function can exclude sequences that are not desired:"},
			GenerateSequence[2, Exclude-> {"CA","AA"}],
			_?SequenceQ
		],
		Example[
			{Options, CombinatoricsBuffer,"The function can be told how strictly optimal to be with this option:"},
			GenerateSequence[25, CombinatoricsBuffer -> 2],
			_?SequenceQ
		],
		Example[
			{Messages,"NoSolution","This message will be thrown if there is no solution for the given commands:"},
			GenerateSequence[2, Exclude-> AllSequences[2]],
			_,
			Messages :> GenerateSequence::NoSolution
		],
		Test["Make sure revcomp motifs are properly filled in with revcomps:",
			Module[{seqs},
				seqs=GenerateSequence[Strand[DNA[25,"A"],DNA[25,"A'"]]][Sequences];
				SameQ[First[seqs],ReverseComplementSequence[Last[seqs]]]
			],
			True
		]
	}
]
