(* ::Package:: *)

(* ::Text:: *)
(*\[Copyright] 2011-2023 Emerald Cloud Lab, Inc.*)


(* ::Subsubsection::Closed:: *)
(*AllWells*)


DefineUsage[AllWells,
{
	BasicDefinitions -> {
		{"AllWells[]", "wells", "generates a matrix of all of the wells in a microtiter plate."},
		{"AllWells[plate]", "wells", "generates all of the wells in the provided microtiter 'plate'."},
		{"AllWells[vessel]", "wells", "returns a single well for the provided vessel."},
		{"AllWells[startWell,endWell]", "wells", "generates all of the wells in a microtiter plate from the 'startWell' to the provided 'endWell'."},
		{"AllWells[endWell]", "wells", "generates all of the wells in a microtiter plate up to the provided 'endWell'."}
	},
	MoreInformation -> {
		"By default, a standard SBS 96-well microtiter is assumed, but options can be provided for alternative plate formats."
	},
	Input :> {
		{"startWell", WellP, "Starting well for well generation."},
		{"endWell", WellP, "Ending well for well generation."},
		{"plate", ObjectP[Model[Container,Plate]] | PacketP[Model[Container,Plate]], "Plate for which you wish to generate all of the wells of."},
		{"vessel", ObjectP[Model[Container,Vessel]] | PacketP[Model[Container,Vessel]], "Vessel for which you wish to generate all of the wells of."}
	},
	Output :> {
		{"wells", {WellP..} | {{WellP..}..}, "Wells generated by the function."}
	},
	SeeAlso -> {
		"ConvertWell",
		"WellP"
	},
	Author -> {"daniel.shlian", "tyler.pabst", "steven", "Frezza"},
	Guides -> {

	},
	Tutorials -> {

	}
}];


(* ::Subsubsection::Closed:: *)
(*ConvertWell*)


DefineUsage[ConvertWell,
{
	BasicDefinitions -> {
		{"ConvertWell[well]", "formatted", "converts to and from well indexes and well positions."}
	},
	MoreInformation -> {
		"By default, a standard SBS 96-well microtiter is assumed, but options can be provided for alternative plate formats."
	},
	Input :> {
		{"well", WellP, "The well you wish to Convert to another format."}
	},
	Output :> {
		{"formatted", WellP, "The input 'well' after conversion to the output format."}
	},
	SeeAlso -> {
		"AllWells",
		"WellP"
	},
	Author -> {"hayley", "mohamad.zandian", "wyatt", "Frezza", "Courtney"},
	Guides -> {

	},
	Tutorials -> {

	}
}];



(* ::Subsubsection::Closed:: *)
(*centrifugeBalance*)


DefineUsage[centrifugeBalance,
	{
		BasicDefinitions -> {
			{"centrifugeBalance[containerWeightPairs]","{pairedContainers, unpairedContainers}","given a list of containers and their corresponding weights, returns a list of paired containers according to weight."}
		},
		MoreInformation -> {
		},
		Input :> {
			{"containerWeightPairs", {{ObjectReferenceP[Object[Container]],MassP}..}, "A nested list of the containers to be paired and their corresponding weights."}
		},
		Output :> {
			{"pairedContainers", {{ObjectP[Object[Container]],ObjectP[Object[Container]]}..}, "A nested list of container pairs."},
			{"unpairedContainers", {ObjectP[Object[Container]]...}, "Containers that were not able to be paired with another input container."}
		},
		SeeAlso -> {
			"ExperimentCentrifuge",
			"ExperimentEvaporate"
		},
		Author -> {"malav.desai", "xu.yi", "weiran.wang", "Ben"},
		Guides -> {

		},
		Tutorials -> {

		}
	}];


(* ::Subsubsection::Closed:: *)
(*PreferredContainer*)


DefineUsage[PreferredContainer,
	{
		BasicDefinitions -> {
			{"PreferredContainer[model,modelVolume]","container","returns the smallest model of ECL standardized 'container' which is compatible with 'model' and can hold the provided 'volume'."},
			{"PreferredContainer[volume]","container","returns the smallest model of ECL standardized 'container' which can hold the provided 'volume'."},
			{"PreferredContainer[mass]","container","returns the smallest model of ECL standardized 'container' which can hold the provided 'mass'."}

		},
		AdditionalDefinitions -> {
			{"PreferredContainer[model,All]","containers","returns all 'containers' that could be chosen for the given combination options for any volume/mass."},
			{"PreferredContainer[All]","containers","returns all 'containers' that could be chosen for the given 'model' for any volume/mass."}
		},
		MoreInformation -> {
			"The fields LightSensitive and Sterile are used to determine if a 'container' is compatible with a provided 'model'.",
			"In the 'volume' overload, LightSensitive and Sterile default Automatics to False."
		},
		Input :> {
			{"model",ListableP[ObjectP[Model[Sample]]],"The model of the contents to be contained in a preferred model container."},
			{"modelVolume",ListableP[GreaterP[0 Milliliter]],"The contents' volume to be contained in a preferred model container."},
			{"volume",GreaterP[0 Milliliter],"The contents' volume to be contained in a preferred model container."},
			{"mass",GreaterP[0 Gram],"The contents' mass to be contained in a preferred model container."}
		},
		Output :> {
			{"container",Model[Container],"The container model best suited to contain the input volume/mass."},
			{"containers",{Model[Container]..},"All container models compatible with the given option values."}
		},
		SeeAlso -> {
			"ExperimentSampleManipulation",
			"ExperimentAliquot",
			"ExperimentStockSolution",
			"ExperimentFilter",
			"MaintenanceReceiveInventory"
		},
		Author -> {"daniel.shlian", "tyler.pabst", "steven", "hayley", "wyatt", "paul"}
	}
];